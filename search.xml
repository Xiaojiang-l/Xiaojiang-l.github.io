<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习例会</title>
      <link href="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/"/>
      <url>/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="先进探测器工程技术研究中心例会"><a href="#先进探测器工程技术研究中心例会" class="headerlink" title="先进探测器工程技术研究中心例会"></a>先进探测器工程技术研究中心例会</h2><blockquote><p>闪烁体探测器</p></blockquote><h2 id="8月11日"><a href="#8月11日" class="headerlink" title="8月11日"></a>8月11日</h2><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083345595.png" alt="image-20200811083345595" loading="lazy"></p><h3 id="实验室介绍"><a href="#实验室介绍" class="headerlink" title="实验室介绍"></a>实验室介绍</h3><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083423343.png" alt="image-20200811083423343" loading="lazy"></p><h3 id="闪烁体种题探测器发展规划"><a href="#闪烁体种题探测器发展规划" class="headerlink" title="闪烁体种题探测器发展规划"></a>闪烁体种题探测器发展规划</h3><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083542550.png" alt="image-20200811083542550" loading="lazy"></p><h3 id="具体实验室规划"><a href="#具体实验室规划" class="headerlink" title="具体实验室规划"></a>具体实验室规划</h3><blockquote><p>三个实验室 107、601、701</p></blockquote><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083804075.png" alt="image-20200811083804075" loading="lazy"></p><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083909372.png" alt="image-20200811083909372" loading="lazy"></p><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811083933526.png" alt="image-20200811083933526" loading="lazy"></p><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811084047685.png" alt="image-20200811084047685" loading="lazy"></p><h3 id="人员分工"><a href="#人员分工" class="headerlink" title="人员分工"></a>人员分工</h3><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811152609124.png" alt="image-20200811152609124" loading="lazy"></p><h3 id="近期人员安排"><a href="#近期人员安排" class="headerlink" title="近期人员安排"></a>近期人员安排</h3><p><img src="/2020/08/11/%E5%AD%A6%E4%B9%A0%E4%BE%8B%E4%BC%9A/image-20200811084256723.png" alt="image-20200811084256723" loading="lazy"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发</title>
      <link href="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="小程序开发"><a href="#小程序开发" class="headerlink" title="小程序开发"></a>小程序开发</h2><h2 id="1、初识小程序"><a href="#1、初识小程序" class="headerlink" title="1、初识小程序"></a>1、初识小程序</h2><h3 id="1-1、什么是微信小程序"><a href="#1-1、什么是微信小程序" class="headerlink" title="1.1、什么是微信小程序"></a>1.1、什么是微信小程序</h3><p><a href="https://baike.baidu.com/item/%E5%BE%AE%E4%BF%A1/3905974">微信</a>小程序，<a href="https://baike.baidu.com/item/%E5%B0%8F%E7%A8%8B%E5%BA%8F">小程序</a>的一种，英文名Wechat Mini Program，是一种不需要下载安装即可使用的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8">应用</a>，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用</p><blockquote><p>2017年1月9日，<a href="https://baike.baidu.com/item/%E5%BC%A0%E5%B0%8F%E9%BE%99/24795">张小龙</a>在2017微信公开课Pro上发布的微信小程序正式上线。</p><p>2019年8月9日，<a href="https://baike.baidu.com/item/%E5%BE%AE%E4%BF%A1/3905974">微信</a>向开发者发布新能力公测与更新公告，微信<a href="https://baike.baidu.com/item/PC/107">PC</a>版新版本中，支持打开聊天中分享的微信小程序。</p></blockquote><h3 id="1-2、注册小程序账号"><a href="#1-2、注册小程序账号" class="headerlink" title="1.2、注册小程序账号"></a>1.2、注册小程序账号</h3><p>官方网站：<code>https://mp.weixin.qq.com/cgi-bin/wx</code></p><p>按照页面的流程一步步进行注册</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625145303875.png" alt="image-20200625145303875" loading="lazy"></p><h3 id="1-3、开发环境准备"><a href="#1-3、开发环境准备" class="headerlink" title="1.3、开发环境准备"></a>1.3、开发环境准备</h3><ol><li><p>下载开发工具</p><ul><li>下载网站：<code>https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</code></li><li>选择相应的电脑版本进行下载</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625150156548.png" alt="image-20200625150156548" loading="lazy"></p></li><li><p>获取小程序AppID和AppSecret密钥</p><ul><li><p>登录<a href="https://mp.weixin.qq.com/">微信公众平台</a>登录小程序账号</p></li><li><p>点击开发设置</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625150503948.png" alt="image-20200625150503948" loading="lazy"></p></li></ul></li><li><p>下载完成之后可以进行登录</p><ul><li><p>登录界面</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625150646394.png" alt="image-20200625150646394" loading="lazy"></p></li><li><p>新增项目，添加刚才获取的AppID</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625150859819.png" alt="image-20200625150859819" loading="lazy"></p></li><li><p>现在可以正式开发了</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625150951101.png" alt="image-20200625150951101" loading="lazy"></p></li></ul></li></ol><h3 id="1-4、第一个小程序"><a href="#1-4、第一个小程序" class="headerlink" title="1.4、第一个小程序"></a>1.4、第一个小程序</h3><ol><li><p>打开刚才新建的项目</p></li><li><p>修改index.wxml中的代码，<code>&lt;view&gt;</code>标签就是显示内容的。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usermotto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改为“第一个小程序测试效果” --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一个小程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p>完成之后按 Ctrl + S 保存，效果如下</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625151349228.png" alt="image-20200625151349228" loading="lazy"></p></li><li><p>可以通过点击预览按钮在手机端进行测试</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625151715417.png" alt="image-20200625151715417" loading="lazy"></p></li></ol><p>至此，我们已经简单的了解了一个小程序的创建过程，但这还远远不够，还存在着许多的问题。</p><p>例如：</p><ul><li>小程序的启动入口在哪里？</li><li>index.wxml、index.wxss、index.js等文件各自的作用，能否进行重命名？</li><li>WXML、WXSS文件是什么？</li><li>以及创建完成之后如何发布给别人使用？</li></ul><h2 id="2、小程序开发核心"><a href="#2、小程序开发核心" class="headerlink" title="2、小程序开发核心"></a>2、小程序开发核心</h2><blockquote><p>本部分主要讲解小程序框架及核心内容。小程序框架可让开发者在微信中用尽可能简单、高效的方式开发出具有原生App体验的服务， 这套框架控制着小程序完整的生命周期， 负责页面的加载、渲染、销毁等工作， 它是小程序的核心， 学习小程序前， 我们一定要对这套框架有深入的了解。</p><p>本部分主要对小程序目录结构、文件类型进行详细分析， 重点介绍小程序视图层WXML、 MXSS, 逻辑层JS, 这些是小程序开发的核心内容,能对框架有个整体认识即可。</p></blockquote><h3 id="2-1、简介"><a href="#2-1、简介" class="headerlink" title="2.1、简介"></a>2.1、简介</h3><p>小程序框架将整个系统划分为视图层和逻辑层</p><ul><li><strong>视图层</strong>：由框架设计的标签语言WXML和用于描述WXML组件样式的WXSS组成。（类型HTML和CSS的关系）</li><li><strong>逻辑层</strong>：是一套运行在本地Javascript引擎的Javascript代码</li></ul><blockquote><p>小程序整体开发流程类似前端，但是没有DOM的概念，也没有window、document等对象。</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625153532967.png" alt="image-20200625153532967" loading="lazy"></p><h3 id="2-2、创建小程序"><a href="#2-2、创建小程序" class="headerlink" title="2.2、创建小程序"></a>2.2、创建小程序</h3><ol><li><p>打开刚才创建的小程序项目</p></li><li><p>打开app.json，修改下面代码</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"pages"</span><span class="token operator">:</span><span class="token punctuation">{</span>         /* 指定默认启动页面地址 */        <span class="token string">"mypages/index/index"</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>打开index.wxml，写入以下代码</p><pre class=" language-xml"><code class="language-xml">&lt;view bindtap = "countClick">我是index页面，你点击了{{count}}次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开index.js文件，写入以下代码</p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    countClick<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>测试结果，点击文字的时候，数字会开始增加</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625155633893.png" alt="image-20200625155633893" loading="lazy"></p></li><li><p>项目结构图：也可以直接修改pages下面的index.js</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625155737286.png" alt="image-20200625155737286" loading="lazy"></p></li></ol><h3 id="2-3、框架主体文件App"><a href="#2-3、框架主体文件App" class="headerlink" title="2.3、框架主体文件App()"></a>2.3、框架主体文件App()</h3><p>框架主体文件由app.json、app.js、app.wxss构成，这3个文件必须放置在项目根目录下，一个小程序只有一份，它们负责小程序整体的配置：</p><ul><li><strong>app.json</strong>：小程序的公共设置，配置小程序全局设置</li><li><strong>app.js</strong>：小程序逻辑文件，主要用于注册小程序全局实例，编译时会和其他页面逻辑文件打包成一份JavaScript文件</li><li><strong>app.wxss</strong>：小程序公共样式表，对所有页面的布局文件都有效</li></ul><blockquote><p>app.json和app.js是必须存在的，app.wxss不是必须创建的。</p></blockquote><h4 id="2-3-1、app-json"><a href="#2-3-1、app-json" class="headerlink" title="2.3.1、app.json"></a>2.3.1、app.json</h4><p><strong>app.json是配置文件，编写时要严格遵循json的格式。</strong></p><ul><li><strong>pages</strong>：设置页面路径，必填项</li><li><strong>window</strong>：设置默认页面的窗口变化</li><li><strong>tabBar</strong>：设置tab菜单栏的表现</li><li><strong>networkTimeout</strong>：设置网络超时时间</li><li><strong>debug</strong>：设置是否开启debug模式，默认关闭</li></ul><p>app.json文件内容整体结构(使用逗号分隔，最后一个不需要写)</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     // 页面路径设置    <span class="token property">"pages"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 默认页面的窗口设置    <span class="token property">"window"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    // 底部tab设置    <span class="token property">"tabBar"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    // 设置网络请求API的超时时间    <span class="token property">"networkTimeout"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    // 是否为debug模式    <span class="token property">"debug"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span> </code></pre><ol><li><p><strong>pages配置</strong></p><p>pages负责注册小程序页面 ， 必须填写， value值为 一个包含页面路径的数组， 用来指定小程序由哪些页面构成， 每一项由页面“路径＋文件名”组成， 如下所示</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"pages"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token string">"mypages/index/index"</span><span class="token punctuation">,</span>         <span class="token string">"mypages/page2/mypagefilename"</span><span class="token punctuation">,</span>         <span class="token string">"otherpages/index/index"</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span> </code></pre><p>pages数组中页面路径不需要填写文件后缀名， 渲染页面时框架会自动寻找路径 .json，.js， .wxml，.wxss四个文件进行整合 ，路径中的文件名可以和目录名不一致 ，但在项目过程中，为了便于管理 建议文件名和目录名保持一致。pages配置数组第一项代表小程序的初始页面。小程序中增加、删除页面，都需要对pages进行修改，并且保存项目。</p></li><li><p><strong>window配置</strong></p><p>window负责设置小程序状态栏、导航条、标题、窃口背景色等系统级样式。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td align="left">导航栏背景颜色，如”#000000”(十六进制颜色值）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td align="left">导航栏标题颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td align="left">导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td align="left">窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td align="left">下拉背景字体、loading 图的样式，仅支持 dark/light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td align="left">是否开启下拉刷新，详见页面相关事件处理函数。</td></tr><tr><td>pageOrientation</td><td>string</td><td>portrait</td><td align="left">屏幕旋转设置，支持 auto（跟随手机）/ portrait（不可选中）/ landscape（横屏）</td></tr></tbody></table><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625162639588.png" alt="image-20200625162639588" loading="lazy"></p></li><li><p><strong>tabBar设置</strong></p><p>用于设计程序顶部和底部的菜单栏（主要是list数组）</p><p><strong>属性列表</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ext-class</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">添加在组件内部结构的class，可用于修改组件内部的样式</td></tr><tr><td align="left">list</td><td align="left"><code>array&lt;object&gt;</code></td><td align="left"></td><td align="left">否</td><td align="left">Tabbar的项的数组，按照规范，至少要有2个Tabbar项</td></tr><tr><td align="left">current</td><td align="left">number</td><td align="left">0</td><td align="left">否</td><td align="left">当前选中的Tabbar项的下标</td></tr><tr><td align="left">bindchange</td><td align="left">eventhandler</td><td align="left"></td><td align="left">否</td><td align="left">Tabbar项发生改成的时候触发此事件，detail为{index, item}，index是Tabbar下标，item是对应的Tabbar项的配置</td></tr><tr><td align="left">color</td><td align="left">String</td><td align="left"></td><td align="left">否</td><td align="left">tab文字默认颜色</td></tr><tr><td align="left">selectedColor</td><td align="left">String</td><td align="left"></td><td align="left">否</td><td align="left">tab文字被选中的颜色</td></tr><tr><td align="left">backgroundColor</td><td align="left">String</td><td align="left"></td><td align="left">否</td><td align="left">tab背景颜色</td></tr><tr><td align="left">borderStyle</td><td align="left">String</td><td align="left">balck</td><td align="left">否</td><td align="left">上边框的颜色，只有black/white</td></tr><tr><td align="left">position</td><td align="left">String</td><td align="left">bottom</td><td align="left">否</td><td align="left">tab在顶部或底部显示，可选bottom、top</td></tr></tbody></table><p>list属性是对象数组，每一项表示一个Tabbar项，其字段含义为</p><table><thead><tr><th align="left">字段名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">Tabbar项的标题</td></tr><tr><td align="left">iconPath</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">Tabbar项的icon图片路径，建议使用绝对路径，相对路径要相对于组件所在目录的。</td></tr><tr><td align="left">selectedIconPath</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">Tabbar项选中时的icon，建议使用绝对路径，相对路径要相对于组件所在目录的。</td></tr><tr><td align="left">badge</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">是否显示Tabbar的右上角的Badge</td></tr><tr><td align="left">pagePath</td><td align="left">String</td><td align="left"></td><td align="left">是</td><td align="left">显示页面的路径</td></tr></tbody></table><p><strong>测试</strong></p><pre class=" language-json"><code class="language-json"><span class="token property">"tabBar"</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>    <span class="token property">"selectedColor"</span><span class="token operator">:</span> <span class="token string">"#ff7f50"</span><span class="token punctuation">,</span>    <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>    <span class="token property">"borderStyle"</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>    <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>         <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"想法"</span><span class="token punctuation">,</span>        <span class="token property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"images/黑板.png"</span><span class="token punctuation">,</span>        <span class="token property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"images/黑板2.png"</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token punctuation">{</span>       <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>      <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"测试"</span><span class="token punctuation">,</span>      <span class="token property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"images/烧瓶.png"</span><span class="token punctuation">,</span>      <span class="token property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"images/奶茶.png"</span>  <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"position"</span><span class="token operator">:</span> <span class="token string">"bottom"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre><p><strong>效果</strong>(菜单栏必须是两个以上)</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625170917506.png" alt="image-20200625170917506" loading="lazy"></p></li><li><p><strong>networkTimeout配置</strong></p><ul><li><p><strong>request</strong>: 设置wx. request的超时时间,单位毫秒。</p></li><li><p><strong>connectSocket</strong>: 设置wx. connectSoc的超时时间,单位毫秒。</p></li><li><p><strong>uploadFile</strong>: 设置wx. uploadFile的超时时间,单位毫秒。</p></li><li><p><strong>downoadFile</strong>: 设置wx. downloadFi le的超时时间,单位毫秒。</p></li></ul><pre class=" language-json"><code class="language-json"><span class="token property">"networkTimeout"</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token property">"request"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>    <span class="token property">"connectSocket"</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre></li><li><p><strong>debug配置</strong></p><p>此配置项控制是否开启 debug模式,默认是关闭的。开启 debug模式后,在开发者工具的控制面板,调试信息以info形式输出。其中信息有Page的注册、页面路由、数据更新、事件触发,可以帮助开发者快速定位一些常见问题。</p><pre class=" language-json"><code class="language-json"><span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre><p>测试结果，在开发者工具的控制面板,调试信息以info形式输出。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625171753270.png" alt="image-20200625171753270" loading="lazy"></p></li></ol><p>以上便是 app.json的5类配置项,这些配置项都是全局的,小程序中除了app.json这种全局配置文件还有页面配置文件，当路由到对应页面时，页面配置文件的配置项将会覆盖全局配置，页面配置文件将在后绩内容中进行详细介绍。</p><h4 id="2-3-1、app-js"><a href="#2-3-1、app-js" class="headerlink" title="2.3.1、app.js"></a>2.3.1、app.js</h4><blockquote><p>小程序中逻辑文件分为页面逻辑文件和小程序逻辑文件,app.js便是小程序逻辑文件,在这个文件中,我们可以通过App(函数注册小程序生命周期函数、全局方法和全局属性,已注册的小程序实例可以在其他逻辑层代码中通过getApp()获取。</p></blockquote><ol><li><p><strong>注册小程序</strong></p><p>App()函数用于注册一个小程序,参数为一个 object对象,在这个参数对象中我们可以注册自定义方法和属性供全局使用,我们利用App()注册了用户登录信息App()函数必须在 app.js中注册,且不能注册多个,其参数属性如下:</p><ul><li><strong>onLaunch</strong>:生命周期函数,监听小程序初始化当小程序初始化完成时,就会触发onLaunch, onLoaunch事件全局只会触发一次</li><li><strong>onShow</strong>:生命周期函数,监听小程序显示。当小程序启动,或者从后台进入前台显示时都会触发 on Show</li><li><strong>onHide</strong>:生命周期函数,监听小程序隐藏。当小程序从前台进入后台会触发。</li><li><strong>其他</strong>:开发者可以添加任意的函数或数据到 Object参数中,这些属性会被注册到小程序对象中,其他逻辑文件可以通过 getApp()函数获取已注册的小程序实例。</li></ul></li><li><p><strong>小程序生命周期</strong></p><ul><li><strong>当启动一个小程序时,首先会先依次触发onLaunch、onShow和方法</strong>,然后通过app.json的 page属性注册相应的页面,最后根据默认路径加载首页;</li><li><strong>当用户点击左上角关闭,或者按了设备Home按钮离开微信时,小程序并没有直接销毁</strong>,而是进入了后台,这两种情况都会触发 onHide方法;</li><li>当再次唤醒微信(针对点击Home按钮离开微信或再次从微信中打开小程序时,<strong>又会从后台进入前台,这时会触发 onShow方法。</strong></li><li>只有当小程序<strong>进入后台一定时间,或者系统资源占用过高,才会被真正销毁</strong>。</li></ul></li><li><p><strong>注册小程序示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onLaunch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//小程序初始化完成时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//显示小程序时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//隐藏小程序时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    globalFunction<span class="token punctuation">:</span><span class="token string">'我是全局函数'</span><span class="token punctuation">,</span>    globalData<span class="token punctuation">:</span><span class="token string">'我是全局属性'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li><li><p><strong>获取小程序实例</strong></p><p>注册小程序后,在其他逻辑文件中,可以通过全局函数 getApp()获取小程序实例,例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在App()注册的函数中,我们可以使用this接获取App实例,而不用getApp()方法。通过getApp()获取实例后,可以获取注册的属性、调用注册的方法,但不要私自调用生命周期函数(onLaunch、 onShow、 onHide),这样会打乱项目逻辑,除非你已经对它们很熟悉。</p></li></ol><h4 id="2-3-2、app-wxss"><a href="#2-3-2、app-wxss" class="headerlink" title="2.3.2、app.wxss"></a>2.3.2、app.wxss</h4><blockquote><p><strong>app.wxss是全局样式表</strong>,对项目中每个页面都有效,可将一些系统级别的统一样式风格写入这个文件,页面渲染时,框架页中的wxss文件样式会覆盖app.wxss中相同的选择器样式。WSS是小程序基于C拓展的一套样式语言,它实现了CSS大部分规则。小程序框架主体相关的文件app.json、app.js、app.wxss我们已经全部介绍完成,下面为大家介绍框架页面相关的文件。</p></blockquote><h3 id="2-4、框架页面文件Page"><a href="#2-4、框架页面文件Page" class="headerlink" title="2.4、框架页面文件Page()"></a>2.4、框架页面文件Page()</h3><blockquote><p>小程序中一个框架页面包含4个文件,同一框架页面的<strong>这4个文件必须具有相同的路径与文件名</strong>,进入小程序时或页面跳转时,小程序会根据 app json配置的路径找到对应的资源进行渲染。</p><p>与框架主体文件相比框架页面文件多了一种页面结构文件,其余3个文件和框架主体文件的功能类同,下面我们一 一讲解每个文件作用。</p></blockquote><ol><li><p><strong>.js文件</strong>: 页面逻辑文件,必要项。</p></li><li><p><strong>.wxm文件</strong>: 页面结构文件,必要项</p></li><li><p><strong>wxss文件</strong>: 页面样式文件</p></li><li><p><strong>.json文件</strong>: 页面配置文件。</p></li></ol><h4 id="2-4-1、页面配置文件-json"><a href="#2-4-1、页面配置文件-json" class="headerlink" title="2.4.1、页面配置文件 json"></a>2.4.1、页面配置文件 json</h4><blockquote><p>页面配置文件和框架配置文件一样，是一个json文件，而不同的是，页面配置文件时非必要存在的，同时页面配置文件的<strong>配置项只有window</strong>，控制当前页面的窗口表现，window属性和app.json一致。</p><p>页面渲染的时候，页面中的window配置会覆盖app.json中的相同配置项。</p></blockquote><p>由于<strong>只有window相关属性</strong>，所以编写时只需要直接写出属性，不用写window这个键。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>    <span class="token property">"navigationBarTextStyle"</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>    <span class="token property">"navigationBarTitleText"</span><span class="token operator">:</span><span class="token string">"我的页面"</span><span class="token punctuation">,</span>    <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token string">"#efefef"</span><span class="token punctuation">,</span>    <span class="token property">"backgroundTextStyle"</span><span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">}</span> </code></pre><h4 id="2-4-2、页面的逻辑文件-js"><a href="#2-4-2、页面的逻辑文件-js" class="headerlink" title="2.4.2、页面的逻辑文件 js"></a>2.4.2、页面的逻辑文件 js</h4><p>(JavaScript)</p><blockquote><p>页面逻辑文件主要功能有:<strong>设置初始化数据</strong>、<strong>注册当前页面生命周期函数</strong>、<strong>注册事件处理函数</strong>等。</p><p>小程序的逻辑层文件是 JavaScript文件,所有的逻辑文件包括 app.js,最终将会打包成一个js文件,在小程序启动时运行,直到小程序销毁。</p><p>由于avascript逻辑文件是运行在纯 JavaScript引擎中而并非运行在浏览器中,一些浏览器提供的特有对象,如 <strong>document、 window等,在小程序中都无法使用</strong>,同理,一些基于 document、 window的框架如: jQuery、 Zepto都不能在小程序中使用,同时我们不能通过操作DOM改变页面,这时需要我们将面向DOM操作的编程思跻转化为数据绑定和事件响应。</p></blockquote><h5 id="1、注册页面Page"><a href="#1、注册页面Page" class="headerlink" title="1、注册页面Page()"></a><strong>1、注册页面Page()</strong></h5><p>在页面逻辑文件中需要通过Page()函数注册页面,指定页面的初始数据、生命周期函数、事件处理函数等,参数为一个 Object对象,其属性如下:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">data</span><span class="token punctuation">:</span><span class="token attr-value">页面的初始数据,数据格式必须是可转成JSON格式的对象类型。当页面第一次渲染时,data会以JSON的形式由逻辑层传至渲染层,渲染层可以通过WXML对数据进行绑定。</span><span class="token attr-name">onLoad</span><span class="token punctuation">:</span><span class="token attr-value">生命周期函数,页面加载时触发。一个页面只会调用一次,接受页面参数,可以获取wx.navigateTo、wx. redirectTo以及中的 query参数</span><span class="token attr-name">onShow</span><span class="token punctuation">:</span><span class="token attr-value">生命周期函数,页面显示时触发。每次打开页面都会调用一次。</span><span class="token attr-name">onReady</span><span class="token punctuation">:</span><span class="token attr-value">生命周期函数,页面初次渲染完成时触发。一个页面生命周期中只会调用一次,代表当前页面已经准备安当,可以和视图层进行交互。一些对界面的设置,操作需要在页面准备妥当后调用,如wx. setNavigationBarTitleonReady,需要在之后设置。</span><span class="token attr-name">onHide</span><span class="token punctuation">:</span><span class="token attr-value">生命周期函数,页面隐藏时触发。</span><span class="token attr-name">onUnload</span><span class="token punctuation">:</span><span class="token attr-value">生命周期函数,页面卸载时触发。</span><span class="token attr-name">onPullDownRefresh</span><span class="token punctuation">:</span><span class="token attr-value">页面相关时间处理函数,用户下拉时触发。使用时需要将app.json配置中 window enablePulDownRefresh属性设置为true。当处理完数据刷新后,可以调用wx. stopPul DownRefresh方法停止当前页面的下拉刷新。</span><span class="token attr-name">onReachBottom</span><span class="token punctuation">:</span><span class="token attr-value">页面下拉触底事件的处理函数。</span><span class="token attr-name">其他</span><span class="token punctuation">:</span><span class="token attr-value">开发者可以添加任意的函数或数据到 Object参数中,可以用this访问这些函数和数据。</span></code></pre><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取app实例</span><span class="token keyword">var</span> app <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 页面初始化数据</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 页面加载时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 页面打开时执行</span>        console<span class="token punctuation">.</span><span class="token function">og</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onReady<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 页面初次渲染完成执行,一个页面只会调用一次</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 页面隐藏时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onUnload<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 页面卸载时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onPullDownRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 下拉刷新时执行</span>    <span class="token punctuation">}</span> ，    onReachBottom<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 下拉触底时执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自定义函数,可与渲染层中的组件进行事件绑定</span>    countclick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 触发视图层重新渲染</span>        <span class="token keyword">this</span><span class="token punctuation">.</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自定义数据</span>    customData<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'微信'</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a><strong>2、生命周期</strong></h5><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">小程序初始化</span><span class="token punctuation">:</span><span class="token attr-value">默认页面入栈,依次触发默认页面onload、onShow、onReady方法。</span><span class="token attr-name">打开新页面</span><span class="token punctuation">:</span><span class="token attr-value">新页面入栈,依次触发新页面 onload、onShow、onReady方法。</span><span class="token attr-name">页面重定向</span><span class="token punctuation">:</span><span class="token attr-value">当前页面出栈并卸载,触发当前页面 onUnload方法,新页面入栈,触发新页面 onLoad、 onShow、onReady方法。</span><span class="token attr-name">页面返回</span><span class="token punctuation">:</span><span class="token attr-value">页面不断出栈并卸载,触发当前弹出页面 onUnload方法,直到返回目标页面,新页面入栈,触发新页面onShow方法。</span><span class="token attr-name">Tab切换</span><span class="token punctuation">:</span><span class="token attr-value">当前页面出栈但不卸载,仅触发 onside方法,新页面入栈,如果当前页面是新加载的,触发。 onload、onShow、onReady方法,如果当前页面已加载过,仅触发 onShow方法。</span><span class="token attr-name">程序从前台到后台</span><span class="token punctuation">:</span><span class="token attr-value">触发当前页面onHide方法,触发App onHide方法。</span><span class="token attr-name">程序从后台到前台</span><span class="token punctuation">:</span><span class="token attr-value">触发小程序onShow方法,触发页面onShow方法。</span></code></pre><p>小结：</p><ul><li>在页面的生命周期中只会触发onShow和onLoad方法</li><li>只有加载和卸载时才会触发onLoad、onReady和onUnload方法</li><li>而触发页面卸载只有页面返回和页面重定向两种操作</li></ul><h5 id="3、获取当前页面栈"><a href="#3、获取当前页面栈" class="headerlink" title="3、获取当前页面栈"></a><strong>3、获取当前页面栈</strong></h5><p>getcurrentPages()函数便是用于获取当前页面栈的实例,页面栈以数组形式按栈顺序给出,<strong>第一个元素为首页</strong>,<strong>最后一个元素为当前页面</strong>。<strong>不要尝试修改页面栈,这会导致路由以及页面状态错误</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*获取页面栈*/</span><span class="token keyword">var</span> pages <span class="token function">getcurrentpages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*获取当前页面对象*/</span><span class="token keyword">var</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>pages<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h5 id="4、事件处理函数"><a href="#4、事件处理函数" class="headerlink" title="4、事件处理函数"></a><strong>4、事件处理函数</strong></h5><p>页面对象中注册的函数可以和视图层中的组件进行绑定,当达到触发条件时,就会执行Page中定义的相应事件,这类自定义函数统称为事件处理函数。</p><p>小程序中组件的事件分为<strong>通用事件和特殊事件</strong>。</p><ol><li><p><strong>添加事件</strong></p><p><code>bindtap</code>，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数</p><pre class=" language-html"><code class="language-html">&lt;view bindtap = "myevent">点击执行逻辑层事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>事件处理方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 与上面定义的bintap的值对应</span>    myevent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">'点击了view'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li></ol><h5 id="5、触发视图层渲染"><a href="#5、触发视图层渲染" class="headerlink" title="5、触发视图层渲染"></a><strong>5、触发视图层渲染</strong></h5><ul><li>页面首次加载时,框架会结合初始化数据渲染页面,在逻辑层中则需主动调用 Page. prototype. setData()方法,而不能直接修改Page的data值,这样不仅无法触发视图层渲染,还会造成数据不一致。</li></ul><ul><li>当 Page. prototype. setData()被调用时,会将数据从逻辑层发送到视图层触发视图层重绘,同时会修改Page的data值。 setData()接受一个 Object对象参数,方法会自动将 this.data中的key对应的值变成 Object参数中key对应的值。</li></ul><ul><li>当 Object参数key对应的值和 this.data中key对应的值一致时,将不会触发视图层渲染。在项目中我们一定要保证视图层和逻辑层的数据一致。</li></ul><ol><li><strong>视图层</strong> index.wxml</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改普通数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{object.subObject.objectText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeObjectText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改对象数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{array[0].arrayText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeArrayText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改数组数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{newFile.newFileText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNewData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加新字段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><strong>逻辑控制层</strong> index.js</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         text<span class="token punctuation">:</span> <span class="token string">'normal data'</span><span class="token punctuation">,</span>        object<span class="token punctuation">:</span><span class="token punctuation">{</span>             subObject<span class="token punctuation">:</span><span class="token punctuation">{</span>                 objectText<span class="token punctuation">:</span> <span class="token string">'object data'</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">,</span>        array<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> arrayText<span class="token punctuation">:</span> <span class="token string">'array data'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    changeText<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 普通索引</span>            text<span class="token punctuation">:</span> <span class="token string">'new normal data'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    changeObjectText<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 按路径索引</span>            <span class="token string">'object.subObject.objectText'</span><span class="token punctuation">:</span> <span class="token string">'new object data'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    changeArrayText<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 按路径索引</span>            <span class="token string">'array[0].arrayText'</span><span class="token punctuation">:</span> <span class="token string">'new array data'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    addNewData<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">/*修改一个已绑定,但未在data中定义的数据*/</span>            <span class="token string">'newFile.newFileText'</span><span class="token punctuation">:</span> <span class="token string">'add new data'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><ol start="3"><li><p><strong>测试结果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625192053617.png" alt="image-20200625192053617" loading="lazy"></p></li></ol><h5 id="6、页面生命周期"><a href="#6、页面生命周期" class="headerlink" title="6、页面生命周期"></a>6、页面生命周期</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625183304075.png" alt="image-20200625183304075" loading="lazy"></p><p><strong>线程启动后视图层和逻辑层相互监听</strong></p><ul><li><p>当逻辑层线程触发onLoad、onShow方法后会把初始数据data传送给视图层线程,视图层完成第一次渲染后触发逻辑层 onReady方法,代表页面已经准备妥当,之后我们便可通过setData方法主动触发视图层渲染。</p></li><li><p>当页面被调往后台时,触发 onHide方法,这时逻辑层线程并没有销毁,我们仍然可以通过代码控制视图层渲染,只是可能不会在界面上表现出来。</p></li><li><p>当页面从后台回到前台时,触发 onshow方法,最后当页面销毁时,触发 onUnload方法。</p></li><li><p>整体来看 onload、 onReady和 onUnload方法在生命周期中只会调用一次,生命周期内显示、隐藏页面都是触发 onshow和 onside方法。</p></li><li><p>在路由方式中,只有页面重定向和页面返回会结束当前页面生命周期,当进入一个已加载的页面时只会触发 onshow方法,不会触发 onload和onReady方法。</p></li></ul><h4 id="2-4-3、页面结构文件WXML"><a href="#2-4-3、页面结构文件WXML" class="headerlink" title="2.4.3、页面结构文件WXML"></a>2.4.3、页面结构文件WXML</h4><blockquote><p>WXML(WeiXin Markup Language) 是框架设计的一套标记语言，用于渲染界面，WXML的渲染原理和React Native思路一致，通过一套标记语言，在不同平台被解析为不同端的渲染文件。</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625204931096.png" alt="image-20200625204931096" loading="lazy"></p><ul><li><p>WXML语言最终会转译为宿主端对应的语言,<strong>所以WXML中所使用的标签一定是小程序定义的标签</strong>,不能使用自定义标签,这样才能保证页面能被正确转译。</p></li><li><p>使用微信开发者工具开发时,在WXML中编写一些HTML标签或自定义标签仍然会被正常解析,这会给开发者造成一种小程序能直接支持HTM标签的误解。这是因为微信开发者工具内核是浏览器内核,同时小程序框架并没对WXML中的标签和wxss中的内容进行强验证,所以<strong>HTML和CS能直接被解析,但这种不合法的wxML在手机端微信中是不能正常显示的</strong>。开发过程中我们一定要拿真机进行测试,保证程序能正常运行。</p></li><li><p><strong>WXML具有数据绑定、列表渲染、亲件渲染、模板、事件等能力。</strong></p></li></ul><hr><h5 id="1、数据绑定-data"><a href="#1、数据绑定-data" class="headerlink" title="1、数据绑定 data"></a>1、数据绑定 data</h5><ul><li><p>小程序中页面渲染时,框架会将WXML文件同对应Page的data进行绑定,在页面中我们可以直接使用data中的属性。小程序的数据绑定使用 Mustache语法（双大括号）将变量或简单的运算规则包起来,主要有以下几种渲染方式。</p></li><li><p>使用`{{}}`可以获取data中的值。- **简单绑定**  简单绑定是指我们使用双大括号将变量包起来,在模板中直接作为字符串输出使用，可作用于内容、组件属性、控制属性、关键字等输出，期中关键字输出是指将JavaScript中的关键字按其真值输出。  ```xml  <!-- 作为内容 -->  <view>{{content}}</view></p><!-- 作为组件属性 -->{{border}}<!-- 作为控制属性 --><p><view wx: if="{{showContent}}">作为属性渲染</view></p><pre><code>```jsPage({   data:{         border:&#39;solid lpx #000&#39;,        id: 1,        content: &#39;内容&#39;,        showContent: false    } } );</code></pre></li><li><p><strong>运算</strong></p><p>在`{{}}`内可以做一些简单的运算，支持的运算有三元运算、算数运算、逻辑判断、字符串运算，这些运算均符合Javascript运算规则。  ```xml  <!-- 三元表达式 -->  <view>{{showContent ? '显示文本': '不显示文本'}}</view></p><!-- 算数运算符 --><p><view>{{num1 + num2}} + 1 + {{num3}} = ?</view></p><!-- 字符串运算 --><p><view>{{"name:" + name}}</view></p><!-- 逻辑判断 --><p><view>{{num3 > 0}}</view></p><!-- 数据路径运算 --><p><view>{{myObject.age}}:{{myArray[1]}}</view></p><pre><code>```jsPage({     data:{         showContent: false,        num1: 1,        num2: 2,        num3: 3,        name: &#39;weixin&#39;,        myObject:{                age: 12           } ,        myArray: [&#39;arr1&#39;, &#39;arr2&#39;]    } } );</code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706154603867.png" alt="image-20200706154603867" loading="lazy"></p></li><li><p><strong>组合</strong></p><p>data中的数据可以在模板再次组合成新的数据结构，这种组合常常在数组或对象中使用。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{[myValue, 2, 3, 'stringtype']}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         myValue<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最终页面组合成的对象为[0, 2, 3, ‘stringtype’]。</p><p>对象组合有3种组合方式，这里我们以数据注入模板为例。</p><ul><li><p><strong>直接将数据作为value值进行组合</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testTemp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>name = {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>age = {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testTemp<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{name:myValue1, age:myValue2}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 运算</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>       myValue1<span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span>        myValue2<span class="token punctuation">:</span> <span class="token string">'value2'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><pre><code>  **效果展示**![image-20200706155645054](.\小程序开发.assets\image-20200706155645054.png)- **通过&quot;...&quot;将第一个对象展开，把key-value值拷贝到新的结构中**  ```xml  &lt;template name=&quot;testTemp&quot;&gt;      &lt;view&gt;key1 = {{key1}}&lt;/view&gt;      &lt;view&gt;key2 = {{key2}}&lt;/view&gt;      &lt;view&gt;key3 = {{key3}}&lt;/view&gt;      &lt;view&gt;key4 = {{key4}}&lt;/view&gt;      &lt;view&gt;key5 = {{key5}}&lt;/view&gt;      &lt;view&gt;key6 = {{key6}}&lt;/view&gt;  &lt;/template&gt;  &lt;template is = &quot;testTemp&quot;      data = &quot;{{...myObject1, key5: 5, ...myObject2, key6: 6}}&quot;&gt;&lt;/template&gt;</code></pre></li></ul><pre><code>    ```js  Page({         data:{           myObject1:{                 key1: 1,                key2: 2            } ,            myObject2:{               key3: 3,                key4: 4            }         }     } );</code></pre><p><strong>效果展示</strong></p><p>  <img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706155357767.png" alt="image-20200706155357767" loading="lazy"></p><ul><li><p><strong>如果对象key和value相同，可以只写key值</strong></p><pre class=" language-xml"><code class="language-xml">&lt;template is = "testTemp"    data = "{{key1, key2}}"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         key1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        key2<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种写法最后组合成的对象是{key1: 1, key2: 2}</p><p><strong>注意：当一个组合中有相同的属性名时，后面的属性将会覆盖前面的属性。</strong></p></li></ul><h5 id="2、条件和遍历"><a href="#2、条件和遍历" class="headerlink" title="2、条件和遍历"></a>2、条件和遍历</h5><ul><li><p><strong>wx: if</strong></p><p>除了简单的数据绑定，我们常常会使用逻辑分支，这时候可以使用<code>wx: if&quot;{{判断条件}}&quot;</code>来进行条件渲染，当条件成立时渲染该代码块</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{showContent}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         showContent<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例中view代码块将不会渲染，只有当showContent的值为true时才渲染。和普通的编程语言一样，<strong>WXML也支持wx: elif 和wx: else</strong></p></li><li><p><strong>wx: elif、wx: else</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{false}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{false}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>示例中页面只渲染最后一个。wx: elif、wx: else必须和wx: if配合使用，否则会导致页面解析出错。</p></li><li><p><strong>block wx:if</strong></p><p>wx: if是一个控制属性，可以添置在任何组件标签上，但如果我们需要<strong>包装多个组件，又不想影响布局</strong>，这时就需要使用 <code>&lt;block/&gt;</code>标签将需要包装的组件放置在里面，通过wx: if作判断。</p><p><strong><code>&lt;block/&gt;</code>不是一个组件，仅仅是一个包装元素。</strong></p><pre class=" language-xml"><code class="language-xml">&lt;block wx:if = "{{true}}">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>view组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>wx: if 与 hidden</strong></p><p>除了wx:if 组件,也可以通过 hidden属性控制组件是否显示,开发者难免有疑问,这两种方式该怎样取舍,这里我们整理了两种方式的区别:</p><ul><li><strong>wx:if</strong> :控制是否渲染条件块内的模板,当其条件值切换时,会触发局部渲染以确保条件块在切换时销毁或重新渲染。wx:if是惰性的,如果在初始渲染条件为 false时,框架将什么也不做,在条件第一次为真时才局部渲染。</li><li><strong>hidden</strong> :控制组件是否显示,组件始终会被渲染,只是简单控制显示与隐藏,并不会触发重新渲染和销毁。</li></ul><p>综合两个渲染流程可以看出,由于wx:if会触发框架局部渲染过程,在<strong>频繁切换状态的场景中,会产生更大的消耗,这时尽量使用 hidden</strong>;<strong>在运行时条件变动不大的场景中我们使用wx:if</strong>,这样能保证页面有更高效的渲染,而不用把所有组件都渲染出来。</p></li></ul><h5 id="3、列表渲染"><a href="#3、列表渲染" class="headerlink" title="3、列表渲染"></a>3、列表渲染</h5><ul><li><p><strong>wx: for</strong></p><p>组件的wx: for控制属性用于遍历数组，重复渲染该组件，遍历过程中当前项的<strong>下标变量名默认为index，数组当前变量名默认为item</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myArray}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{index}}:{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         myArray<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过遍历myArray，页面渲染了两个<code>&lt;view/&gt;</code></p><p><strong>结果如下</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625230121128.png" alt="image-20200625230121128" loading="lazy"></p></li><li><p><strong>wx: for-index 和 wx:for-item</strong></p><p><strong>index、item变量名</strong>可以通过wx: for-index、wx: for-item属性修改</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myArray}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myIndex<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{myIndex}}:{{myItem.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         myArray<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'value1'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'value2'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果和上例一致</p></li><li><p><strong>wx:for嵌套使用</strong></p><p>普通遍历中我们没必要修改index、item变量名，而在使用wx:for嵌套时，就有必要设置变量名，避免变量名冲突。(当然也可以不用重命名)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myArray}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myIndex<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myItem}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subIndex<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{subItem}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 简写，效果相同 --></span>    <span class="token comment" spellcheck="true">&lt;!--  &lt;view wx:for="{{myArray}}" >      &lt;block wx:for="{{item}}">    {{item}}      &lt;/block>  &lt;/view>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         myArray<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>输出结果</strong>：在本示例中，我们使用了<code>&lt;block/&gt;</code>标签，以渲染一个包含多个节点的结构快。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200625232230296.png" alt="image-20200625232230296" loading="lazy"></p></li></ul><h5 id="4、模板"><a href="#4、模板" class="headerlink" title="4、模板"></a>4、模板</h5><p>在项目过程中，常常会遇到某些相同的结构在不同的地方重复出现，这时可以将相同的布局代码片段放置到一个模块中，在不同的地方传入对应的数据进行渲染，这样能避免重复开发，提高开发效率</p><ul><li><p><strong>定义模板</strong></p><p>在<code>&lt;template/&gt;</code>内定义代码片段，设置<code>&lt;template/&gt;</code>的name属性，指定模板名称即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>使用模板</strong></p><p>使用模板时，<strong>设置is属性指向需要使用的模板</strong>，设置data属性，将模板所需的变量传入。<strong>模板拥有自己的作用域，只能使用data属性传入的数据，而不是直接使用Page中的data数据</strong>，渲染时，<code>&lt;template/&gt;</code>标签将被模板中的代码块完全替代</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{myObj.key1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{key2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{content:<span class="token punctuation">'</span>内容<span class="token punctuation">'</span>, name, myObj, ...myObj2}}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         name<span class="token punctuation">:</span> <span class="token string">'myTemplate'</span><span class="token punctuation">,</span>        myObj<span class="token punctuation">:</span><span class="token punctuation">{</span>             key1<span class="token punctuation">:</span> <span class="token string">'value1'</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span>        myObj2<span class="token punctuation">:</span><span class="token punctuation">{</span>             key2<span class="token punctuation">:</span><span class="token string">'value2'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong>：模板只能使用自己的data数据，注意属性和值之间是冒号分开</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626113841720.png" alt="image-20200626113841720" loading="lazy"></p></li><li><p><strong>嵌套使用模板</strong>：使用is进行引用模板</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>b template content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>a template content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><h5 id="5、事件"><a href="#5、事件" class="headerlink" title="5、事件"></a>5、事件</h5><p>WXML中的事件系统和HTML中DOM事件系统极其相似,也是通过在组件上设置“bind(或 catch)+事件名”属性进行事件绑定,当触发事件时,框架会调用逻辑层中对应的事件处理函数,并将当前状态通过参数传递给事件处理函数,<strong>由于小程序中没有DOM节点概念,所以事件只能通过XML绑定,不能通过逻辑层动态绑定</strong>。官方对WXML事件的定义如下:</p><pre><code>1. 事件是视图层到逻辑层的通讯方式。2. 事件可以将用户的行为反馈到逻辑层进行处理。3. 事件可以绑定在组件上,当触发事件时,就会执行逻辑层中对应的事件处理函数。4. 事件对象可以携带额外信息,如id、 dataset、 touches</code></pre><hr><ul><li><p><strong>事件分类</strong></p><ul><li><strong>冒泡事件</strong>：当一个组件上的事件被触发后，该事件会向父节点传递。例如：bindtap</li><li><strong>非冒泡事件</strong>：当一个组件上的事件被触发后，该事件不会向父节点传递。例如：catchtap</li></ul><p><strong>WXML冒泡事件如下：</strong></p><ul><li><strong>touchstart</strong>：手指触摸动作开始</li><li><strong>touchmove</strong>：手指触摸后移动</li><li><strong>touchcancel</strong>：手指触摸动作被打断，如来电提示、弹窗</li><li><strong>touchend</strong>：手指触摸动作结束</li><li><strong>tap</strong>：手指触摸后马上离开</li><li><strong>longtap</strong>：手指触摸后，超过350ms在离开</li></ul><p>对于冒泡事件每个组件都是默认支持的，除了上述事件之外的其他组件自定义事件如无特殊声明都是非冒泡事件，如<code>&lt;form/&gt;</code>的submit事件<code>，&lt;scroll-view/&gt;</code>的scroll事件。</p></li><li><p><strong>事件绑定</strong></p><p>事件绑定的写法和组件的属性一样，以key、value形式组织。</p><p>绑定时bind事件绑定不会阻止冒泡事件向上冒泡，catch事件会阻止向上冒泡。</p><ul><li><strong>key</strong>：以bind或catch开头，然后跟上事件类型，字母均小写，如bindtap、catchtouchstart。</li><li><strong>value</strong>：时间函数名，<strong>对应Page中定义的同名函数</strong>。找不到同名函数会导致报错。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tap1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    view1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        view2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tap3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            view3        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>点击view3会触发view2，而不会触发view1；点击view2也不会触发view1。</p></li></ul><h5 id="6、事件对象"><a href="#6、事件对象" class="headerlink" title="6、事件对象"></a>6、事件对象</h5><blockquote><p>如果没有特殊说明，当组件触发事件时，逻辑层绑定该事件的事件处理函数会收到一个事件对象。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   myEven<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626120743563.png" alt="image-20200626120743563" loading="lazy"></p><p>  <strong>事件对象属性基本上可分为三类：</strong></p><ul><li><strong>BaseEvent</strong></li><li><strong>CustomEvent</strong></li><li><strong>TouchEvent。</strong> </li></ul><ol><li><strong>BaseEvent为基础事件对象属性，包括：</strong> <ul><li><strong>type</strong>：事件类型<ul><li><strong>timeStamp</strong>：事件生成时的时间戳，页面打开到触发所经历过的毫秒数</li><li><strong>target</strong>：出发事件原组件（即冒泡开始的组件）的相关属性集合，如下：<ul><li><strong>id</strong>：事件源组件的id</li><li><strong>tagName</strong>：事件源组件的类型</li><li><strong>dataset</strong>：事件源组件上由data-开头的自定义属性组成的集合</li><li><strong>currentTarget</strong>：事件绑定的当前组件的相关属性集合，属性如下：<ul><li><strong>id</strong>：当前组件id</li><li><strong>tagName</strong>：当前组件类型</li><li><strong>dataset</strong>：当前组件上<strong>由data-开头的自定义属性</strong>组成的集合</li></ul></li></ul></li></ul></li></ul></li></ol><p>  <strong><code>&lt;canvas/&gt;</code>中的触摸事件不可冒泡，所以没有currentTarget。dataset是组件的自定义数据，以data- 开头，由”-“ 连接，大写会被转为小写，两个单词以上最终被转为驼峰命名形式</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myevent<span class="token punctuation">"</span></span> <span class="token attr-name">data-my-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>weixin<span class="token punctuation">"</span></span> <span class="token attr-name">data-myAge</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    dataset示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     myevent<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  <strong>测试结果输出自定义属性值</strong></p><p>  <img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626122153987.png" alt="image-20200626122153987" loading="lazy"></p><ol start="2"><li><p><strong>CustomEvnet为自定义事件对象（继承BaseEvent）</strong></p><ul><li>detail：额外信息，通常传递组件特殊信息。</li></ul></li><li><p><strong>TouchEvent为触摸事件对象（继承BaseEvnet）</strong></p><ul><li><strong>touches</strong>：触摸事件，当前停留在屏幕中的触摸点信息的数组。</li><li><strong>changedTouches</strong>：触摸事件，当前变化的触摸点信息的数组，从无变有、从有变无、位置变化。</li></ul><p>支持多点触摸，所以touches和changedTouches都是数组格式，<strong>每个元素为一个Touch对象（canvas触摸事件中为CanvasTouch对象）</strong></p></li></ol><blockquote><p><strong>Touch对象相关属性如下：</strong></p><ul><li>identifier：触摸点的标识符</li><li>pageX，pageY：距离文档左上角的距离，文档的左上角为原点，横向为X轴，纵向为Y轴</li><li>clientX，clientY：距离页面可显示区域（屏幕除去导航条）左上角的距离，横向为X轴</li></ul><p><strong>CanvasTouch对象相关属性如下：</strong></p><ul><li>identifier：触摸点的标识符</li><li>x，y：距离Canvas左上角的距离，Canvas的左上角为原点</li></ul></blockquote><hr><h5 id="7、引用"><a href="#7、引用" class="headerlink" title="7、引用"></a>7、引用</h5><blockquote><p>一个WXML<strong>可以通过 import或include</strong>或引入其他WXML文件,两种方式都能引入WXML文件,区别在于</p><p><strong>import</strong>引入WXML文件后只接受模板的定义,忽略模板定义之外的所有内容,而且使用过程中有作用域的概念。</p><p><strong>include</strong>则是引入文件中除<code>&lt;template/&gt;</code>以外的代码直接拷贝到<code>&lt;include/&gt;</code>位置，与 import相反,。</p><p>整体来说，import是引入模板，include是引入组件。</p></blockquote><ol><li><p><strong>import</strong>(只引用了模板)</p><blockquote><p><code>&lt;import/&gt;</code>的src属性是需要被引入文件的相对地址，<code>&lt;import/&gt;</code>引入会忽略引入文件中<code>&lt;tmplate/&gt;</code>定义以外的内容。</p></blockquote><ul><li><strong>a.wxml</strong> </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.wxml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用b.wxml中定义的模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><strong>b.wxml</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>b template content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p><strong>include</strong></p><blockquote><p>include引入会将模板定义标签之外的内容直接赋值替换<code>&lt;include/&gt;</code></p></blockquote><ul><li><strong>a.wxml</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.wxml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 不能调用该模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 但会显示出b.wxml中&lt;view>的值 --></span></code></pre><ul><li><strong>b.wxml</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 会在a.wxml中显示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>b template content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 会在a.wxml中显示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>测试效果</strong>：可以显示出b.wxml中的所有内容。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626131742354.png" alt="image-20200626131742354" loading="lazy"></p></li></ol><h5 id="8、初始化运行的事件"><a href="#8、初始化运行的事件" class="headerlink" title="8、初始化运行的事件"></a>8、初始化运行的事件</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 初始化运行</span>onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         times<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>times1    <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre><hr><h4 id="2-4-4、页面样式文件WXSS"><a href="#2-4-4、页面样式文件WXSS" class="headerlink" title="2.4.4、页面样式文件WXSS"></a>2.4.4、页面样式文件WXSS</h4><blockquote><p>WXSS( WeiXin Style Sheets)是基于CSS拓展的样式语言,用于描述WXML的组件样式,具有CSS的大部分特性,在CSS基础上WXSS拓展了尺寸单位、样式导入特性,对CSS选择器属性上做了部分兼容。</p><p>本部分主要讲述WXSS和CSS的不同点,后续布局章节会讲解CSS盒子模型布局相关属性,不过在开发过程中我们一定要开启开发者工具中“开启上传代码时样式文件自动补全功能,这样小程序会自动补全其余一些样式的兼容性写法,保证在不同终端达到统一视觉效果。</p></blockquote><ol><li><p><strong>尺寸单位</strong></p><ul><li><p><strong>rpx</strong></p><p>在渲染过程中rpx会按比例转化为px，WXSS规定屏幕宽度为750rpx。如手机屏幕宽度为375px，即750rpx = 375px，那么在该手机中1rpx = 0.5px</p></li><li><p><strong>rem</strong></p><p>与rpx一样，WXSS规定屏幕宽度为20rem。</p></li></ul><table><thead><tr><th align="left">设备</th><th align="left">rpx换算px (屏幕宽度/750)</th><th align="left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td align="left">iPhone5</td><td align="left">1rpx = 0.42px</td><td align="left">1px = 2.34rpx</td></tr><tr><td align="left">iPhone6</td><td align="left">1rpx = 0.5px</td><td align="left">1px = 2rpx</td></tr><tr><td align="left">iPhone6 Plus</td><td align="left">1rpx = 0.552px</td><td align="left">1px = 1.81rpx</td></tr></tbody></table><p>在设计界面时，要实现尺寸自适应，可以用iPhone6作为视觉标准，进行设计。</p><p><strong>注意：</strong> 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。</p></li><li><p><strong>选择器</strong></p><table><thead><tr><th align="left">选择器</th><th align="left">样例</th><th align="left">样例描述</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left"><code>.intro</code></td><td align="left">选择所有拥有 class=”intro” 的组件</td></tr><tr><td align="left">#id</td><td align="left"><code>#firstname</code></td><td align="left">选择拥有 id=”firstname” 的组件</td></tr><tr><td align="left">element</td><td align="left"><code>view</code></td><td align="left">选择所有 view 组件</td></tr><tr><td align="left">element, element</td><td align="left"><code>view, checkbox</code></td><td align="left">选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td align="left">::after</td><td align="left"><code>view::after</code></td><td align="left">在 view 组件后边插入内容</td></tr><tr><td align="left">::before</td><td align="left"><code>view::before</code></td><td align="left">在 view 组件前边插入内容</td></tr></tbody></table><p><strong>示例</strong></p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*选择所有class含myClass有的组件,并设置边框*/</span><span class="token selector"><span class="token class">.myClass</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*选择所有view组件且class含 myClass有的组件,并设置边框*/</span><span class="token selector">view<span class="token class">.myClass</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*选择所有view组件中子节点class含有myclas子节点含有的组件，并设置边框*/</span><span class="token selector">view <span class="token class">.myclass</span></span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*选所有 class含有myContent组件中所有checkbox组件和radiobox组件,并设置它们的边框*/</span><span class="token selector"><span class="token class">.myContent</span> checkbox,<span class="token class">.myContent</span> radiobox </span><span class="token punctuation">{</span> <span class="token property">boder</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*选择所有view组件且class含有myClass且含有的组件,在其后面插入新内容,内容为new content*/</span><span class="token selector">view. myclass: after </span><span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'new content'</span><span class="token punctuation">}</span> </code></pre></li><li><p><strong>内联样式</strong></p><blockquote><p>跟HTML一样，可以通过style、class属性控制样式。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通过style动态设置样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">border<span class="token pseudo-class">:solid</span> 1px <span class="token id">#000</span>; background-color:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过class选择器设置样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myClassName1 myClassName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>样式导入</strong></p><blockquote><p>为了便于管理，会将WXSS按职能拆分为多个文件，这是需要使用@import语句导入其他WXSS文件，用 “ ; “表示语句结束</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.common-view</span></span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"common.wxss"</span><span class="token punctuation">;</span></span><span class="token selector"><span class="token class">.page-container</span></span><span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">}</span> </code></pre></li></ol><p>==至此，小程序框架页面相关的4个文件已经介绍完成了==</p><hr><h3 id="2-5、模块化"><a href="#2-5、模块化" class="headerlink" title="2.5、模块化"></a>2.5、模块化</h3><blockquote><p>模块化主要解决JavaScript中命名冲突和文件依赖这两个问题</p></blockquote><h4 id="2-5-1、模块化简介"><a href="#2-5-1、模块化简介" class="headerlink" title="2.5.1、模块化简介"></a>2.5.1、模块化简介</h4><blockquote><p>起初JavaScript将代码统一放在一个文件内，但随着代码量的增多出现了很多问题，为了避免全局冲突等问题，决定参考Java的方式，引入命名空间和闭包来解决变量冲突问题。</p></blockquote><ul><li><p>起初代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'weixin'</span><span class="token punctuation">,</span>    age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 实现代码</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 实现代码</span><span class="token punctuation">}</span> </code></pre></li><li><p>优化后</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 定义全局命名空间</span>    myProject <span class="token operator">=</span> myProject<span class="token operator">||</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">;</span>    myProject<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">;</span>    myProject<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'weixin'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 闭包内变量，外部不能访问</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    myProject<span class="token punctuation">.</span>user<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 实现代码</span>    <span class="token punctuation">}</span>     myProject<span class="token punctuation">.</span>user<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 实现代码</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时可以通过myProject.user获取name，和使用getName、getAge方法，通过命名空间可以缓解大部分冲突，而user这个命名空间被我使用之后，别人就不能使用该空间，并且每次都需要记住一串命名空间，所以该方法依旧存在弊端。</p><p><strong>于是，模块化才正式诞生：</strong></p><ul><li>模块化是一段javas代码，具有统一的基本书写格式</li><li>模块之间通过基本交互规则，能彼此引用，协同工作</li></ul><blockquote><p>目前模块化的规范不统一，大致可分为CommonJS 和 ES6两种规范。</p></blockquote></li></ul><h4 id="2-5-2、文件作用域"><a href="#2-5-2、文件作用域" class="headerlink" title="2.5.2、文件作用域"></a>2.5.2、文件作用域</h4><blockquote><p>小程序中一个JavaScript文件就是一个模块，在这个文件中声明的变量和函数只在该文件中有效，不同文件中的相同变量名和函数名是不会相互影响的。</p><p>模块可以调用一些全局的方法。</p></blockquote><ul><li><strong>a.js中</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在App中定义全局属性</span>   myGlobalData<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'weixin'</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只能在该文件中使用的属性，并为其赋值</span><span class="token keyword">var</span> myPrivateData <span class="token operator">=</span> <span class="token string">'value1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用全局变量</span><span class="token keyword">var</span> appData <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appData<span class="token punctuation">.</span>myGlobalData<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'app'</span><span class="token punctuation">;</span></code></pre><ul><li><strong>b.js中</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 不会和a.js中同名变量冲突</span><span class="token keyword">var</span> myPrivateData <span class="token operator">=</span> <span class="token string">'value2'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同样可以调用全局变量，并为其赋值</span><span class="token keyword">var</span> appData <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appData<span class="token punctuation">.</span>myGlobalData<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'app'</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-3、模块的使用"><a href="#2-5-3、模块的使用" class="headerlink" title="2.5.3、模块的使用"></a>2.5.3、模块的使用</h4><blockquote><p>JavaScript写完接口之后，需要将接口进行暴露。模块接口的暴露和引入十分简单：</p><ul><li>通过exports暴露接口</li><li>通过require(path)引入依赖，path是需要引入的模块文件的相对路径</li></ul></blockquote><p><strong>示例代码</strong></p><ul><li><strong>a.js</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> privateData <span class="token operator">=</span> <span class="token string">'weixin'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>who <span class="token operator">+</span> <span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 暴露接口</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>run <span class="token operator">=</span> run<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    也可以写成    module.exports = {         run:run    } ;*/</span></code></pre><ul><li><strong>b.js</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取暴露的接口</span><span class="token keyword">var</span> otherMod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onShow<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 调用接口</span>        otherMod<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'somebody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-4、其他"><a href="#2-5-4、其他" class="headerlink" title="2.5.4、其他"></a>2.5.4、其他</h4><p><strong>JavaScript运行环境</strong></p><blockquote><p>微信小程序逻辑代码运行在三端：ios、Android和用于调试的开发者工具，这三端是各自不同的三个解析引擎：</p><ul><li>ios：小程序的JavaScript代码运行在JavaScriptCore中。</li><li>Android：小程序的JavaScript代码是通过X5内核来解析。</li><li>开发者工具：运行在nwjs（chrome内核）中。</li></ul><p>虽然环境相似，但一些语法、特性的支持还有一些区别。</p></blockquote><h3 id="2-6、小结"><a href="#2-6、小结" class="headerlink" title="2.6、小结"></a>2.6、小结</h3><p>小程序框架是小程序开发的核心，小程序这种基于数据的编码方式和前端基于DOM的编码方式有很大不同，要着重了解熟悉框架，了解小程序运行原理之后，后续学习组件和API将会非常简单。</p><h2 id="3、布局"><a href="#3、布局" class="headerlink" title="3、布局"></a>3、布局</h2><blockquote><p>WXSS实现了CSS布局相关的大部分规范，但在一些细节上有差异，这部分主要讲述CSS布局相关的一些基本知识，包裹盒子模型、浮动定位、绝对定位以及Flex布局。</p></blockquote><p>全局属性：</p><pre class=" language-css"><code class="language-css"><span class="token selector">Page</span><span class="token punctuation">{</span>   <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="3-1、基本知识"><a href="#3-1、基本知识" class="headerlink" title="3.1、基本知识"></a>3.1、基本知识</h3><h4 id="3-1-1、盒子模型"><a href="#3-1-1、盒子模型" class="headerlink" title="3.1.1、盒子模型"></a>3.1.1、盒子模型</h4><blockquote><p>盒子模型是CSS布局的基础，每个元素框中心都有一个内容区（content），周围有内边距（padding）、边框（border）和外边框（margin），这些默认宽度为0。</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626182801063.png" alt="image-20200626182801063" loading="lazy"></p><h4 id="3-1-2、块级元素"><a href="#3-1-2、块级元素" class="headerlink" title="3.1.2、块级元素"></a>3.1.2、块级元素</h4><blockquote><p>元素按照显示方式主要可以分为块级元素和行内元素，元素的显示方式是由display属性控制，块级元素会默认占一行高度，一般一行内只有一个块级元素（浮动后除外），当再添加新的块级元素，新元素会自动换行显示。</p><p>一些元素默认就是块级元素，如<code>&lt;view/&gt;</code>组件，而一些是默认行内元素，<strong>可以通过修改元素display属性为block</strong>，将一个元素强制设置为块级元素。</p></blockquote><p><strong>块级元素的特点：</strong></p><ul><li>总是再新行上开始</li><li>宽度默认刚好等于父级元素内容区宽度，除非设定一个新宽度，这里需要注意，当设置块级元素宽度为100%时，如果当前块级元素存在padding、margin会导致块级元素溢出父元素</li><li>盒子模型高度默认由内容决定</li><li>盒子模型中高度、宽度及外边距和内边距都可控制</li><li>可以容纳行内元素和其他块级元素</li></ul><hr><h4 id="3-1-3、行内元素"><a href="#3-1-3、行内元素" class="headerlink" title="3.1.3、行内元素"></a>3.1.3、行内元素</h4><blockquote><p>除了块级元素，最常见的就是行内元素，<strong>通过设置display属性为inline</strong>可以将一个元素设置为行内元素。</p><p>例如<code>&lt;text/&gt;</code>就是一个行内组件。</p></blockquote><p><strong>行内元素的特点:</strong></p><ul><li>和其他非块级元素都在一行上</li><li>盒子模型中高度、宽度、上下margin、上下padding设置均为无效，只能设置左右margin和左右padding</li><li>宽度就是文字或图片的宽度，不可改变</li><li>行内元素宽度、高度都不能直接设置</li><li>行内元素只能容纳文本或其他行内元素，再行内元素中放置块级元素会引起混乱</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通过设置将&lt;view>变为行内元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>inline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><hr><h4 id="3-1-4、行内块元素"><a href="#3-1-4、行内块元素" class="headerlink" title="3.1.4、行内块元素"></a>3.1.4、行内块元素</h4><blockquote><p>行内块元素就是块级元素和行内元素的混合物，<strong>当display属性为inline-block时</strong>，元素就被设置为一个行内块元素，可以设置宽、高、内边距和外边距。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>inline-block</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><hr><h3 id="3-2、浮动和定位"><a href="#3-2、浮动和定位" class="headerlink" title="3.2、浮动和定位"></a>3.2、浮动和定位</h3><blockquote><p>定位的基本思想很简单，它允许定义元素框相对于其正常位置应该出现在哪，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</p><p>浮动和定位时常用的布局方案，WXSS也支持Flex布局方案。</p></blockquote><h4 id="3-2-1、浮动"><a href="#3-2-1、浮动" class="headerlink" title="3.2.1、浮动"></a>3.2.1、浮动</h4><blockquote><p>浮动不完全是定位，同时它也不是正常流布局，通过设置float属性，浮动的框可以向左或者向右移动，直到其外边缘碰到包含框或另一个浮动框的边框为止。</p><p>设置float属性，left为左浮动。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>文本文本文本文本文本文本文本文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本</code></pre><p><strong>测试效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626190447825.png" alt="image-20200626190447825" loading="lazy"></p><h4 id="3-2-1、清除浮动"><a href="#3-2-1、清除浮动" class="headerlink" title="3.2.1、清除浮动"></a>3.2.1、清除浮动</h4><blockquote><p>在父级元素中使用浮动的时候，浮动元素不会出现在父级元素边框内，这时候就需要清除浮动影响：style=”clear:left;”（清除）。</p><p>当设置元素clear时，可以确保当前元素的左边、右边或左右两边同时不能出现浮动元素。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 父元素会包含清楚浮动元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>其他元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置当前元素左边不能出现浮动元素 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">clear</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清除浮动元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 利用伪属性在后面插入一个元素清除浮动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>其他元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 不清除浮动的效果 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>其他元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在浮动后面添加元素可以清除浮动，但不会换行 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>不清除浮动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 完全不清除浮动的效果 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>其他元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浮动框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>利用伪元素的时候需要在 .wxss中加上该语句</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span> </code></pre><p><strong>测试效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626194710242.png" alt="image-20200626194710242" loading="lazy"></p><hr><h4 id="3-2-2、定位"><a href="#3-2-2、定位" class="headerlink" title="3.2.2、定位"></a>3.2.2、定位</h4><blockquote><p>元素的定位由position属性控制，position有4种不同类型的定位，会影响元素框生成的方法。</p></blockquote><ul><li><strong>static</strong>：元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中，static是position的默认值。</li><li><strong>relative</strong>：元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。</li><li><strong>absolution</strong>：元素框从文档流中完全删除，并相对其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块。</li><li><strong>fixed</strong>：元素框的变现类似于将position设置为absolute，不过其包含块是视窗本身。</li></ul><hr><h3 id="3-3、Flex布局"><a href="#3-3、Flex布局" class="headerlink" title="3.3、Flex布局"></a>3.3、Flex布局</h3><blockquote><p>浮动和定位是基于盒子模型的传统布局解决方案，它在处理一些特殊布局时非常不方便，比如垂直居中。</p><p>2009年W3C提出了Flex布局，可以简单快速地完成各种伸缩性的设计。</p><p>Flex是Flexible Box的缩写，即为弹性盒子布局。</p></blockquote><h4 id="3-3-1、基本概念"><a href="#3-3-1、基本概念" class="headerlink" title="3.3.1、基本概念"></a>3.3.1、基本概念</h4><blockquote><p>Flex布局主要由容器和项目构成,采用Flex布局的元素,称为Flex容器(flexcontainer),它的所有直接子元素自动成为容器成员,称为Flex项目(flexitem)。</p><p><strong>可以设置display:flex或 display: inline-flex将任何一个元素指定为flex布局</strong></p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200626201701397.png" alt="image-20200626201701397" loading="lazy"></p><hr><h4 id="3-3-2、容器属性"><a href="#3-3-2、容器属性" class="headerlink" title="3.3.2、容器属性"></a>3.3.2、容器属性</h4><p>容器支持的属性有：</p><ul><li><strong>display</strong>: 通过设置 display属性指定元素是否为Flex布局</li><li><strong>flex -direction</strong>:指定主轴方向,决定了项目的排列方式。</li><li><strong>fex-wrap</strong>:排列换行设置。</li><li><strong>fex-flow</strong>: flex-direction和flex-wrap的简写形式</li><li><strong>justify-content</strong>:定义项目在主轴上的对齐方式。</li><li><strong>align-items</strong>:定义项目在交叉轴上的对齐方式。</li><li><strong>align-content</strong>:定义多根轴线的对齐方式,如果只有一根轴线,该属性不起作用。</li></ul><h5 id="1、display"><a href="#1、display" class="headerlink" title="1、display"></a>1、display</h5><blockquote><p>用来指定该元素是否为Flex布局</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span>flex | inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li>flex：用于产生块级Flex布局</li><li>inline-flex：用于产生行内Flex布局</li></ul><h5 id="2、flex-direction"><a href="#2、flex-direction" class="headerlink" title="2、flex-direction"></a>2、flex-direction</h5><blockquote><p>用于指定主轴的方向，即项目排列的方向</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span>row | row-reverse | column | column-reverser<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><strong>row</strong>：主轴为水平方向</li><li><strong>row-reverse</strong>：起点在右端的水平排列</li><li><strong>column</strong>：在上沿的垂直方向</li><li><strong>column-reverse</strong>：在下沿的垂直方向</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627230139540.png" alt="image-20200627230139540" loading="lazy"></p><h5 id="3、flex-wrap"><a href="#3、flex-wrap" class="headerlink" title="3、flex-wrap"></a>3、flex-wrap</h5><blockquote><p>当一条轴排列不下时使用</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-wrap</span><span class="token punctuation">:</span>nowrap | wrap | wrap-reverse<span class="token punctuation">}</span> </code></pre><ul><li><strong>nowrap</strong>：不换行，默认值</li><li><strong>wrap</strong>：换行，第一行在上方</li><li><strong>wrap-reverse</strong>：换行，第一行在下方</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627230436612.png" alt="image-20200627230436612" loading="lazy"></p><h5 id="4、flex-flow"><a href="#4、flex-flow" class="headerlink" title="4、flex-flow"></a>4、flex-flow</h5><blockquote><p>是flex-direction和flex-wrap的简写形式，默认值为row nowrap</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>&lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>row-reverse wrap<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>wrap row-reverse<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*与上一句相同*/</span><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>row-reverse<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>wrap<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h5 id="5、justify-content"><a href="#5、justify-content" class="headerlink" title="5、justify-content"></a>5、justify-content</h5><blockquote><p>定义项目在主轴的对齐方式</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">justify-content</span><span class="token punctuation">:</span>flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><strong>flex-start</strong>：左对齐，默认值</li><li><strong>flex-end</strong>：右对齐</li><li><strong>center</strong>：居中</li><li><strong>space-between</strong>：两端对齐，项目之间的间隔都相等</li><li><strong>space-around</strong>：每个项目两侧的间隔相等</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627231741914.png" alt="image-20200627231741914" loading="lazy"></p><h5 id="6、align-items"><a href="#6、align-items" class="headerlink" title="6、align-items"></a>6、align-items</h5><blockquote><p>align-items指定项目在交叉轴上如何对齐</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">align-items</span><span class="token punctuation">:</span>flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><strong>flex-start</strong>：交叉轴的起点对齐</li><li><strong>flex-end</strong>：交叉轴的终点对齐</li><li><strong>center</strong>：交叉轴的中线对齐</li><li><strong>baseline</strong>：项目根据它们第一行文字的基线对齐</li><li><strong>stretch</strong>：在交叉轴方向拉伸填充整个容器，默认值</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627232341708.png" alt="image-20200627232341708" loading="lazy"></p><h5 id="7、align-content"><a href="#7、align-content" class="headerlink" title="7、align-content"></a>7、align-content</h5><blockquote><p>定义项目多根轴线在交叉轴上的对齐方式，如果只有一根轴线则不起作用</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mybox</span></span><span class="token punctuation">{</span> <span class="token property">align-content</span><span class="token punctuation">:</span>flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><strong>flex-start</strong>：与交叉轴的起点对齐</li><li><strong>flex-end</strong>：与交叉轴的终点对齐</li><li><strong>center</strong>：与交叉轴的中点对齐</li><li><strong>space-between</strong>：与交叉轴两端对齐，间距平均</li><li><strong>space-around</strong>：每根两侧的间距相等</li><li><strong>stretch</strong>：轴线占满整个交叉轴，默认值</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627232819069-1594351690022.png" alt="image-20200627232819069" loading="lazy"></p><h4 id="3-3-3、项目属性"><a href="#3-3-3、项目属性" class="headerlink" title="3.3.3、项目属性"></a>3.3.3、项目属性</h4><p>项目支持的属性有6个：</p><ul><li>order：定义项目的排序顺序</li><li>flex-grow：定义项目的放大比例</li><li>flex-shrink：定义项目的缩小比例</li><li>flex-basis：分配多余空间之前，项目占据的主轴空间</li><li>flex：flex-grow、flex-shrink和flex-basis的简写</li><li>align-sele：用来设置单独的伸缩项目在交叉轴上的对齐方式</li></ul><h5 id="1、order"><a href="#1、order" class="headerlink" title="1、order"></a>1、order</h5><blockquote><p>order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">order</span><span class="token punctuation">:</span>&lt;integer><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627232819069.png" alt="image-20200627232819069" loading="lazy"></p><p><strong>order示例</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627232844528.png" alt="image-20200627232844528" loading="lazy"></p><h5 id="2、flex-grow"><a href="#2、flex-grow" class="headerlink" title="2、flex-grow"></a>2、flex-grow</h5><blockquote><p>定义项目的<strong>放大比例</strong>，默认为0，如果存在剩余空间也不放大，如果都为1的时候，则它们将等分剩余空间。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span>&lt;number><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627233113953.png" alt="image-20200627233113953" loading="lazy"></p><h5 id="3、flex-shrink"><a href="#3、flex-shrink" class="headerlink" title="3、flex-shrink"></a>3、flex-shrink</h5><blockquote><p>flex-shrink定义了项目的<strong>缩小比例</strong>，默认为1，如果空间不足，该项目将缩小</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span><span class="token property">shrink</span><span class="token punctuation">:</span>&lt;number><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627233242611.png" alt="image-20200627233242611" loading="lazy"></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627233512585.png" alt="image-20200627233512585" loading="lazy"></p><h5 id="4、flex-basis"><a href="#4、flex-basis" class="headerlink" title="4、flex-basis"></a>4、flex-basis</h5><blockquote><p>定义伸缩项目的基准值，剩余的空间将按比例进行缩放，默认为auto</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span>&lt;length> | auto<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h5 id="5、flex"><a href="#5、flex" class="headerlink" title="5、flex"></a>5、flex</h5><blockquote><p>是flex-grow、flex-shrink和flex-basis的简写，默认值为01autto</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> none | [&lt;<span class="token string">'flex-grow'</span>> &lt;<span class="token string">'flex-shrink'</span>> ? || &lt;<span class="token string">'flex-basis>'</span>]<span class="token punctuation">}</span> </code></pre><p>该属性有两个快捷键：auto（11auto）和none（00aotu）</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 上写两句相同 */</span><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span> autp<span class="token punctuation">}</span> <span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> auto<span class="token punctuation">}</span> <span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> auto<span class="token punctuation">}</span> <span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h5 id="6、align-self"><a href="#6、align-self" class="headerlink" title="6、align-self"></a>6、align-self</h5><blockquote><p>设置单独的伸缩项目在交叉轴上的对齐方式</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.myitem</span></span><span class="token punctuation">{</span> <span class="token property">align-self</span><span class="token punctuation">:</span>auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li>auto：没有父元素等同于stretch</li><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中线对齐</li><li>baseline：项目根据第一行文字的基线对齐</li><li>stretch：项目将在交叉轴方向拉伸填充整个容器</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200627235234125.png" alt="image-20200627235234125" loading="lazy"></p><p>==好了，关于容器的内容就到这里了~==</p><h2 id="4、组件"><a href="#4、组件" class="headerlink" title="4、组件"></a>4、组件</h2><p><strong>该部分内容建议边学边参考官方文档组件属性介绍</strong></p><blockquote><p>小程序定义了各种各样的组件,它们在WXML中起着各不相同的作用。与HTML元素一样,一个组件是指从组件开始标签到结束标签的所有代码,由于组件可能会被转译为不同端对应的代码,所以在页面创建过程中,<strong>不能使用小程序组件标签以外的标签</strong>。</p><p>在本部分介绍小程序相关组件,包括视图容器、基础容器、表单组件、导航媒体组件、地图、画布、客服会话8大类。</p></blockquote><h3 id="4-1、组件的定义及属性"><a href="#4-1、组件的定义及属性" class="headerlink" title="4.1、组件的定义及属性"></a>4.1、组件的定义及属性</h3><blockquote><p>按类型可以将组件划分为七大类：视图容器、基础内容、表单、导航、多媒体、地图、画布</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tagname</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>contens<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tagname</span><span class="token punctuation">></span></span></code></pre><p>组件属性的名称都是小写的，以连字符“ - ”连接</p><ol><li><strong>组件共同类型</strong><ul><li>id：组件的唯一表示</li><li>class：样式类</li><li>style：内联样式</li><li>hidden：是否显示</li><li>data-*：自定义属性</li><li><code>bind*/catch*</code>：组件的事件，bind为冒泡事件，catch为非冒泡事件</li></ul></li><li><strong>组件的属性类型</strong><ul><li>Boolean：布尔值</li><li>Number：数字</li><li>String：字符串</li><li>Array：数组</li><li>Object：对象</li><li>EventHandler：事件处理函数名</li><li>Any：任意属性</li></ul></li></ol><h3 id="4-2、视图容器"><a href="#4-2、视图容器" class="headerlink" title="4.2、视图容器"></a>4.2、视图容器</h3><blockquote><p>像前端的<code>&lt;div/&gt;</code>没有任何语义和功能，仅作为容器元素的存在，在小程序中也有类似的容器组件，</p><p>例如<code>&lt;view/&gt;、&lt;scroll-view/&gt;、&lt;swiper&gt;</code></p></blockquote><h4 id="4-2-1、view组件"><a href="#4-2-1、view组件" class="headerlink" title="4.2.1、view组件"></a>4.2.1、view组件</h4><blockquote><p><code>&lt;view/&gt;</code>是一个块级容器组件，没有特殊功能，主要用于布局展示，是最基本的UI组件，支持常用的CSS布局属性。</p></blockquote><ul><li>hover：是否启动点击态，默认为false</li><li>hover-class：指定按下去的样式。但class=“none”时，没有点击态效果，默认为none</li><li>hover-start-time：按住后多久出现点击态，默认50毫秒</li><li>hover-stay-time：手指松开后点击态保留时间，默认400毫秒</li></ul><h5 id="1、水平3栏布局"><a href="#1、水平3栏布局" class="headerlink" title="1、水平3栏布局"></a>1、水平3栏布局</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628110740293.png" alt="image-20200628110740293" loading="lazy"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h5 id="2、左右混合布局"><a href="#2、左右混合布局" class="headerlink" title="2、左右混合布局"></a>2、左右混合布局</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628112855358.png" alt="image-20200628112855358" loading="lazy"></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 左右布局 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">250</span>rpx<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h5 id="3、上下混合布局"><a href="#3、上下混合布局" class="headerlink" title="3、上下混合布局"></a>3、上下混合布局</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628112920047.png" alt="image-20200628112920047" loading="lazy"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>rpx<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">150</span>rpx<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h4 id="4-2-2、scroll-view滑动框"><a href="#4-2-2、scroll-view滑动框" class="headerlink" title="4.2.2、scroll-view滑动框"></a>4.2.2、scroll-view滑动框</h4><blockquote><p>具备滑动能力的组件，使用<code>&lt;scroll-view&gt;</code>增加滚动相关属性</p></blockquote><ul><li><strong>scroll-x</strong>：允许横向滚动，默认false</li><li><strong>scroll-y</strong>：允许纵向滚动，默认false</li><li><strong>upper-threshold</strong>：距顶部/左边多远时（单位px），触发scrolltoupper事件，默认50</li><li><strong>lower-threshold</strong>：距底部/右边多远时触发scrolltolower事件，默认为50</li><li><strong>scroll-top</strong>：设置竖向滚动条位置，number/string</li><li><strong>scroll-left</strong>：设置横向滚动条位置， number/string</li><li><strong>scroll-into-view</strong>：值应为某子元素id，滚动到该元素时，元素顶部对齐滚动区域顶部</li><li><strong>bindscrolltoupper</strong>：滚动到顶部/左边，会触发scrolltoupper事件</li><li><strong>bindscrolltolower</strong>：滚动到底部/右边，会触发scrolltolower事件</li><li><strong>bindscroll</strong>：滚动时触发</li></ul><blockquote><p>目前，<code>&lt;textarea/&gt;、&lt;video/&gt;、&lt;map/&gt;、&lt;comvas/&gt;</code>不能在<code>&lt;scroll-view/&gt;</code>中使用</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628115348863.png" alt="image-20200628115348863" loading="lazy"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-container<span class="token punctuation">"</span></span> <span class="token attr-name">upper-threshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">lower-threshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">scroll-into-view</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{toView}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindscroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll<span class="token punctuation">"</span></span> <span class="token attr-name">bindscrolltolower</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollToLower<span class="token punctuation">"</span></span> <span class="token attr-name">bindscrolltoupper</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollToUpper<span class="token punctuation">"</span></span> <span class="token attr-name">scroll-y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scroll-top</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{scrollTop}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll-item bg-blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>act<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollToTop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击滚动到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         toView<span class="token punctuation">:</span><span class="token string">'item-3'</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*     生命周期回调—监听页面加载页面加载时触发。    一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。    */</span>    onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             toView<span class="token punctuation">:</span> <span class="token string">'item-3'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    scrollToUpper<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发滚动顶部事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    scrollToLower<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发滚动到底部事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    scroll<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了滚动事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    scrollToTop<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             scrollTop<span class="token punctuation">:</span><span class="token string">'0'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 给予固定高度 */</span><span class="token selector"><span class="token class">.scroll-container</span></span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">800</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.scroll-container</span> <span class="token class">.scroll-item</span></span><span class="token punctuation">{</span>     <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>rpx<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">120%</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.bg-blue</span></span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#87CEFA</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.bg-red</span></span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FF6347</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.act</span></span><span class="token punctuation">{</span>     <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h4 id="4-2-3、滑块视图组件"><a href="#4-2-3、滑块视图组件" class="headerlink" title="4.2.3、滑块视图组件"></a>4.2.3、滑块视图组件</h4><blockquote><p>滑块视图容器可以实现轮播图、滑动页面、图片预览等效果。由一个<code>&lt;swiper/&gt;</code>和<code>&lt;swiper-item/&gt;</code>组成。</p><p><code>&lt;swiper/&gt;</code>只能放置<code>&lt;swiper-item/&gt;</code></p><p>而<code>&lt;swiper-item/&gt;</code>能放置任何组件</p></blockquote><p><code>&lt;swiper/&gt;</code>组件的属性：</p><ul><li><strong>indicator-dots</strong>: 是否显示面板指示点,默认为 false</li><li><strong>autoplay</strong>: 是否自动切换,默认为 false</li><li><strong>current</strong>: 当前所在页面的 index,默认为0</li><li><strong>interval</strong>: 自动切换时间间隔,默认为5000</li><li><strong>duration</strong>: 滑动动画时长,默认为1000</li><li><strong>circular</strong>: 是否采用衔接滑动,默认值为 false</li><li><strong>bindchange</strong>: current改变时会触发change事件,event.detail={current: current}</li></ul><h5 id="1、基本轮播图"><a href="#1、基本轮播图" class="headerlink" title="1、基本轮播图"></a>1、基本轮播图</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628125207434.png" alt="image-20200628125207434" loading="lazy"></p><ul><li>WXML文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 基本轮播图 --></span><span class="token comment" spellcheck="true">&lt;!-- 开启默认面板指示点，并设置为自动播放 --></span><span class="token comment" spellcheck="true">&lt;!--   interval 设置显示时间  duration 设置切换时的时间  bindchange 滑动时自动触发该事件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>banner<span class="token punctuation">"</span></span> <span class="token attr-name">indicator-dots</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{autoplay}}<span class="token punctuation">"</span></span> <span class="token attr-name">current</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span> <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sliderList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.className}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{item.name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停|播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>WXSS文件</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.banner</span></span><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ddd</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.bg-blue</span></span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#87CEFA</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.bg-red</span></span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FF6347</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.bg-green</span></span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#43CD80</span><span class="token punctuation">}</span> </code></pre><ul><li>js文件</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         autoplay<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        sliderList<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> className<span class="token punctuation">:</span><span class="token string">'bg-red'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string">'slider1'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>               <span class="token punctuation">{</span> className<span class="token punctuation">:</span><span class="token string">'bg-blue'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string">'slider2'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> className<span class="token punctuation">:</span><span class="token string">'bg-green'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string">'slider3'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    play<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             autoplay<span class="token punctuation">:</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>autoplay        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了滚动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、自定义轮播图"><a href="#2、自定义轮播图" class="headerlink" title="2、自定义轮播图"></a>2、自定义轮播图</h5><blockquote><p>通过bindchage事件实现自定面板</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200709194654445.png" alt="image-20200709194654445" loading="lazy"></p><ul><li>wxml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自定义轮播图 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customSwiper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 不开启默认面板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>banner<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">deration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sliderList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.imageSource}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自定义面板构建 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sliderList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{item.selected}}:{{index+1}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>wxss</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.customSwiper</span></span><span class="token punctuation">{</span>     <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">379.5</span>rpx<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.customSwiper</span> swiper</span><span class="token punctuation">{</span>     <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 自定义面板样式 */</span><span class="token selector"><span class="token class">.tab</span></span><span class="token punctuation">{</span>     <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">70</span>rpx<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.tab</span> <span class="token class">.tab-item</span></span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>rpx<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50</span>rpx<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">50</span>rpx<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>rpx<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">4</span>px<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.tab</span> <span class="token class">.tab-item.selected</span></span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li>js</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自定义轮播图</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>       sliderList<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span> selected<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> imageSource<span class="token punctuation">:</span><span class="token string">'../image/banner1.png'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> selected<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> imageSource<span class="token punctuation">:</span><span class="token string">'../image/banner2.png'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> selected<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> imageSource<span class="token punctuation">:</span><span class="token string">'../image/banner3.png'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 监听swiper滚动事件，并切换面板</span>  switchTab<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sliederList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>sliderList<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改指定点选中态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sliederList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       sliederList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>current <span class="token operator">==</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         sliderList<span class="token punctuation">:</span> sliederList    <span class="token punctuation">}</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3 id="4-3、基础组件"><a href="#4-3、基础组件" class="headerlink" title="4.3、基础组件"></a>4.3、基础组件</h3><h4 id="4-3-1、icon图标"><a href="#4-3-1、icon图标" class="headerlink" title="4.3.1、icon图标"></a>4.3.1、icon图标</h4><blockquote><p><code>&lt;icon/&gt;</code>是页面中非常常用的组件，它通常用于表示状态，起到引导作用</p></blockquote><ul><li><p><strong>type</strong>：icon的类型。</p><p>有效值包括：success、success_no_circle、info、warn、waiting、cancel、download、search、clear</p></li><li><p><strong>size</strong>：icon的大小，单位px。默认23px</p></li><li><p><strong>color</strong>：icon的颜色</p></li></ul><h5 id="1、示例"><a href="#1、示例" class="headerlink" title="1、示例"></a>1、示例</h5><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628142358814.png" alt="image-20200628142358814" loading="lazy"></p><ul><li><p>xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 小图标 --></span>&lt;view class = "section size">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图标大小展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sizeList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success_no_circle<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span>            {{item}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图标类型展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ciew</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{typeList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span>              {{item}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ciew</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图标颜色展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ciew</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{colorList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>safe_success<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">></span></span>              {{item}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ciew</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p>wxss</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section</span></span><span class="token punctuation">{</span>     <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.list</span></span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span>wrap<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.list</span> <span class="token class">.item</span></span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>rpx<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>    <span class="token property">justify-conntent</span><span class="token punctuation">:</span>flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.size</span> <span class="token class">.list</span> <span class="token class">.item</span></span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>rpx<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.list</span> <span class="token class">.item</span> label</span><span class="token punctuation">{</span>     <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.list</span> <span class="token class">.item</span> icon</span><span class="token punctuation">{</span>     <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">}</span> </code></pre></li><li><p>js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 小图标</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>       sizeList<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token string">'10px'</span><span class="token punctuation">,</span>          <span class="token string">'20px'</span><span class="token punctuation">,</span>          <span class="token string">'30px'</span><span class="token punctuation">,</span>          <span class="token string">'40px'</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      typeList<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token string">'success'</span><span class="token punctuation">,</span>           <span class="token string">'success_no_circle'</span><span class="token punctuation">,</span>          <span class="token string">'safe_success'</span><span class="token punctuation">,</span>           <span class="token string">'success_circle'</span><span class="token punctuation">,</span>          <span class="token string">'info'</span><span class="token punctuation">,</span>           <span class="token string">'info_circle'</span><span class="token punctuation">,</span>           <span class="token string">'waiting'</span><span class="token punctuation">,</span>          <span class="token string">'waiting_circle'</span><span class="token punctuation">,</span>          <span class="token string">'warn'</span><span class="token punctuation">,</span>           <span class="token string">'safe_warn'</span><span class="token punctuation">,</span>           <span class="token string">'circle'</span><span class="token punctuation">,</span>           <span class="token string">'download'</span><span class="token punctuation">,</span>           <span class="token string">'cancel'</span><span class="token punctuation">,</span>           <span class="token string">'search'</span><span class="token punctuation">,</span>           <span class="token string">'clear'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>      colorList<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'rgb(139, 101, 8)'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li></ul><h5 id="2、自定义样式图标组件"><a href="#2、自定义样式图标组件" class="headerlink" title="2、自定义样式图标组件"></a>2、自定义样式图标组件</h5><blockquote><p>使用阿里的图标库：<a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2">https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2</a></p><p>目前只能使用黑白颜色的图标</p></blockquote><ul><li><p>将图标添加到购物车，然后添加到项目中</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628151131559.png" alt="image-20200628151131559" loading="lazy"></p></li><li><p>生成相应的代码链接</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628151246058.png" alt="image-20200628151246058" loading="lazy"></p></li><li><p>将代码导入到小程序项目中</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628151404173.png" alt="image-20200628151404173" loading="lazy"></p></li><li><p>只需要在需要使用的页面的wxss文件中导入上面文件即可</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628151505695.png" alt="image-20200628151505695" loading="lazy"></p></li><li><p>使用图标</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628151600087.png" alt="image-20200628151600087" loading="lazy"></p></li></ul><h4 id="4-3-2、text文本"><a href="#4-3-2、text文本" class="headerlink" title="4.3.2、text文本"></a>4.3.2、text文本</h4><blockquote><p><code>&lt;text&gt;</code>组件主要用于文本内容的展示，类似HTML中的<code>&lt;p/&gt;</code>标签。</p><p>在小程序中，只有<code>&lt;text&gt;</code>节点内部的内容可以被长按选中，同时文本内容支持转义字符” \ “</p></blockquote><ul><li><p>wxml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span></code></pre></li><li><p>js</p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         content<span class="token punctuation">:</span><span class="token string">'我是内容\n我是内容\n我是内容'</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="4-3-3、progress进度条"><a href="#4-3-3、progress进度条" class="headerlink" title="4.3.3、progress进度条"></a>4.3.3、progress进度条</h4><blockquote><p>用于显示进度状态，比如资源加载、用户资料完成度、媒体资源播放进度等。</p></blockquote><ul><li><strong>percent</strong>：百分比显示</li><li><strong>show-info</strong>：是否在进度条右侧显示百分比，默认false</li><li><strong>stroke-width</strong>：进度条宽度，单位px，默认6</li><li><strong>color</strong>：进度条颜色</li><li><strong>active</strong>：是否显示从左到右的动画，默认false</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">percent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">percent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">percent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">percent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb(51, 216, 216)<span class="token punctuation">"</span></span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">percent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span> <span class="token attr-name">active</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">show-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">></span></span></code></pre><ul><li>效果展示</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628152944848.png" alt="image-20200628152944848" loading="lazy"></p><h3 id="4-4、表单组件"><a href="#4-4、表单组件" class="headerlink" title="4.4、表单组件"></a>4.4、表单组件</h3><blockquote><p>表单是应用中获取用户输入的重要手段</p></blockquote><h4 id="4-4-1、radio单选"><a href="#4-4-1、radio单选" class="headerlink" title="4.4.1、radio单选"></a>4.4.1、radio单选</h4><blockquote><p>单项框可以用来生成一组单选按钮，供用户从一批固定的选项中做出选择。单选框使用<code>&lt;radio-group/&gt;</code>和<code>&lt;radio/&gt;</code>两个组件组成。</p><p><code>&lt;radio&gt;</code>不能单独使用。</p></blockquote><p><strong>radio属性：</strong></p><ul><li><strong>value</strong>：<code>&lt;radio/&gt;</code>标识，当选中时，<code>&lt;radio-group&gt;</code>的change事件会携带<code>&lt;radio/&gt;</code>的value</li><li><strong>checked</strong>：是否被中，一组中只能有一个，出现多个时，默认最后一个</li><li><strong>disabled</strong>：是否禁用，默认false</li><li><strong>color</strong>：radio的颜色</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 单选框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radio-group</span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeChoosed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{radios}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radio</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.value}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radio</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radio-group</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单选框</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>       radios<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span> value<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span><span class="token string">'选项1'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> value<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span><span class="token string">'选项2'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> value<span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span><span class="token string">'选项3'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> value<span class="token punctuation">:</span><span class="token string">'4'</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span><span class="token string">'选项4'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>       <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  changeChoosed<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你选中了：'</span>  <span class="token operator">+</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628191807287.png" alt="image-20200628191807287" loading="lazy"></p><h4 id="4-4-2、checkbox复选"><a href="#4-4-2、checkbox复选" class="headerlink" title="4.4.2、checkbox复选"></a>4.4.2、checkbox复选</h4><blockquote><p>与单选框一样，复选框需要<code>&lt;checkbox-group/&gt;</code>和<code>&lt;checkbox/&gt;</code>两个组件组成</p></blockquote><p><strong>checkbox的属性</strong></p><ul><li><strong>value</strong>：触发时会携带的值</li><li><strong>checked</strong>：是否选中</li><li><strong>disabled</strong>：是否禁用</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 复选框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox-group</span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkboxChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{countrys}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.value}}<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.checked}}<span class="token punctuation">"</span></span> <span class="token attr-name">diable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.diable}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{item.name}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox-group</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 复选框</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>       countrys<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'中国'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'美国'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'日本'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">,</span> disabled<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'韩国'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span><span class="token string">'4'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'俄罗斯'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span><span class="token string">'5'</span><span class="token punctuation">,</span> checked<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>       <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  checkboxChange<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你选中的选项有：'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628192919076.png" alt="image-20200628192919076" loading="lazy"></p><h4 id="4-4-3、switch开关"><a href="#4-4-3、switch开关" class="headerlink" title="4.4.3、switch开关"></a>4.4.3、switch开关</h4><blockquote><p><code>&lt;switch/&gt;</code>是一个开关选择器</p></blockquote><ul><li><strong>checked</strong>：是否选中</li><li><strong>type</strong>：UI样式，有效值有switch、checkbox、默认为switch</li><li><strong>bindchange</strong>：checked改变时触发change事件</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 开关选择器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{switchs}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>switch</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.type}}<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.checked}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.changeEventName}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{item.name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>switch</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 开关选择器</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>       switchs<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span>               name<span class="token punctuation">:</span><span class="token string">'switch1'</span><span class="token punctuation">,</span>              checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>              type<span class="token punctuation">:</span><span class="token string">'switch'</span><span class="token punctuation">,</span>              changeEventName<span class="token punctuation">:</span><span class="token string">'change'</span>          <span class="token punctuation">}</span> <span class="token punctuation">,</span>          <span class="token punctuation">{</span>               name<span class="token punctuation">:</span><span class="token string">'switch2'</span><span class="token punctuation">,</span>              checked<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>              type<span class="token punctuation">:</span><span class="token string">'checkbox'</span><span class="token punctuation">,</span>              changeEventName<span class="token punctuation">:</span><span class="token string">'change'</span>          <span class="token punctuation">}</span>       <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 修改开关选择器对象模型的选中值</span>  change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628201115117.png" alt="image-20200628201115117" loading="lazy"></p><h4 id="4-4-4、Label文字"><a href="#4-4-4、Label文字" class="headerlink" title="4.4.4、Label文字"></a>4.4.4、Label文字</h4><blockquote><p>用来改进表单组件的可用性，绑定for属性让用户点击<code>&lt;label/&gt;</code>时触发对应的控件，目前可以绑定<code>&lt;button/&gt;、&lt;checkbox/&gt;、&lt;radio/&gt;、&lt;switch/&gt;</code></p></blockquote><p>触发<code>&lt;label/&gt;</code>的两种规则</p><ul><li><strong>内部控件</strong>：将控件放在标签内，<strong>当用户点击时触发第一个控件</strong></li><li><strong>设置for属性</strong>：<strong>点击时触发for属性对应的控件</strong>。for属性优先级高于内部控件，</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- label组件的使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox-group</span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkboxchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>点击文案也能选中radio        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>switch</span> <span class="token punctuation">/></span></span>点击文案也能切换开关    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选中元素内第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第一个            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第二个            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第三个            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第四个            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第五个        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>for属性优先级大于内部元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycheckbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token punctuation">/></span></span>label内部元素            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token punctuation">/></span></span>label内部元素        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycheckbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>label外部元素    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* lable组件的使用 */</span><span class="token selector"><span class="token class">.section</span> </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// label组件的使用</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   checkboxchange<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong>：点击文案能够触发内部控件，当有多个控件的时候触发第一个，可以设置for数值指定点击时候触发哪个控件。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200628203521554.png" alt="image-20200628203521554" loading="lazy"></p><h4 id="4-4-5、slider滑动选择"><a href="#4-4-5、slider滑动选择" class="headerlink" title="4.4.5、slider滑动选择"></a>4.4.5、slider滑动选择</h4><blockquote><p>滑动选择器 <code>&lt;slider/&gt;</code>，调节亮度、音量等</p></blockquote><ul><li>min：最小值，默认为0</li><li>max：最大值，默认为100</li><li>step：步长，默认为1</li><li>disabled：是否禁用</li><li>value：当前取值</li><li>color：背景条颜色</li><li>selected-color：已选择的颜色</li><li>show-value：是否在右侧显示当前value(不需要赋值)</li><li>bindchange：完成一次拖动后触发的事件</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 滑动选择器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section incon-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{icon.size}}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">opacity:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>icon<span class="token number">.</span>opacity/<span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>调整大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slider</span> <span class="token attr-name">show-value</span> <span class="token attr-name">selected-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00f<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>size<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slider</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>调整透明度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slider</span> <span class="token attr-name">show-value</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opacity<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeOpacity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slider</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 滑动选择器</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         icon<span class="token punctuation">:</span><span class="token punctuation">{</span>             size<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>            opacity<span class="token punctuation">:</span><span class="token number">8</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 改变大小</span>    changeSize<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>size<span class="token operator">=</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 改变透明度</span>    changeOpacity<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>opacity<span class="token operator">=</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200629192634721.png" alt="image-20200629192634721" loading="lazy"></p><h4 id="4-4-6、picker选择器"><a href="#4-4-6、picker选择器" class="headerlink" title="4.4.6、picker选择器"></a>4.4.6、picker选择器</h4><blockquote><p>可以在屏幕底部弹出一个窗口，供用户在所提供的选项中选择一个</p></blockquote><h5 id="1、普通选择器"><a href="#1、普通选择器" class="headerlink" title="1、普通选择器"></a>1、普通选择器</h5><ul><li>range：底部弹出选项的数组，默认为一个空数组，只有当mode为selector是，range属性才有效</li><li>rang-key：当range是一个Object Array时，通过rang-kty来指定Object中key的值作为选择器显示的内容</li><li>value：mode为selector时，value值时数字，表示选择了range中的第几个，从0开始</li><li>bindchange：value改变时触发change事件</li><li>disabled：是否禁用</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedIndex<span class="token punctuation">"</span></span> <span class="token attr-name">range</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        当前选中：{{list[selectedIndex]}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.picker</span></span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#fafafa</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建对应选择项</span>        list<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token string">'选项1'</span><span class="token punctuation">,</span>            <span class="token string">'选项2'</span><span class="token punctuation">,</span>            <span class="token string">'选项3'</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        selectedIndex<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 修改选中文案</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             selectedIndex<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630111836516.png" alt="image-20200630111836516" loading="lazy"></p><h5 id="2、时间选择器"><a href="#2、时间选择器" class="headerlink" title="2、时间选择器"></a>2、时间选择器</h5><blockquote><p>在普通选择器的基础上，将mode属性值定义为time即可</p></blockquote><ul><li>value：表示选中的时间，字符串格式为“ hh：mm”</li><li>start：表示有效时间范围的开始</li><li>end：表示有效时间范围的结束</li><li>bindchange：value改变时触发change事件</li><li>disable：是否禁用</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 时间选择器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectTime<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{startTime}}<span class="token punctuation">"</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{endTime}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        当前选中：{{selectTime}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         startTime<span class="token punctuation">:</span><span class="token string">"00:00"</span><span class="token punctuation">,</span>        endTime<span class="token punctuation">:</span><span class="token string">"24:00"</span><span class="token punctuation">,</span>        selecTime<span class="token punctuation">:</span><span class="token string">"11:30"</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 修改选中项文案</span>    change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             selectTime<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630112922680.png" alt="image-20200630112922680" loading="lazy"></p><h5 id="3、日期选择器"><a href="#3、日期选择器" class="headerlink" title="3、日期选择器"></a>3、日期选择器</h5><blockquote><p>对应的mode属性为data</p></blockquote><ul><li>value：表示选中的日期，字符串格式为“yyyy-MM-dd”</li><li>start：表示有效日期范围的开始</li><li>end：表示有效日期范围的结束</li><li>fields：表示选择器的粒度，有效值为year、month、day，默认为day</li><li>bindchange：value改变时触发change事件</li><li>disabled：是否禁用，默认值为false</li></ul><p><strong>示例</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 日期选择器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDate<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{startDate}}<span class="token punctuation">"</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{endDate}}<span class="token punctuation">"</span></span> <span class="token attr-name">filed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>day<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        当前选中：{{selectDate}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 日期选择器</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         startDate<span class="token punctuation">:</span><span class="token string">"2020-6-30"</span><span class="token punctuation">,</span>        endDate<span class="token punctuation">:</span><span class="token string">"2020-12-30"</span><span class="token punctuation">,</span>        selectDate<span class="token punctuation">:</span><span class="token string">"2020-10-01"</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             selectDate<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630114413691.png" alt="image-20200630114413691" loading="lazy"></p><h4 id="4-4-7、picker-view自定义选择器"><a href="#4-4-7、picker-view自定义选择器" class="headerlink" title="4.4.7、picker-view自定义选择器"></a>4.4.7、picker-view自定义选择器</h4><blockquote><p>自定义滚动选择器，使用<code>&lt;picker-view/&gt;和&lt;picker-view-column/&gt;</code>实现，其中<code>&lt;picker-view-column/&gt;</code>用于创建列</p></blockquote><p><code>&lt;picker-view/&gt;</code><strong>属性如下</strong></p><ul><li>value：数组类型，数组中的数字依次表示选择的第几项，从0开始</li><li>indicator-style：设置选择器中间选中框的样式</li><li>bingchange：当滚动选择时，触发事件</li></ul><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">value</td><td align="left"><code>Array.&lt;number&gt;</code></td><td align="left"></td><td align="left">否</td><td align="left">数组中的数字依次表示 picker-view 内的 picker-view-column 选择的第几项（下标从 0 开始），数字大于 picker-view-column 可选项长度时，选择最后一项。</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td align="left">indicator-style</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">设置选择器中间选中框的样式</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td align="left">indicator-class</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">设置选择器中间选中框的类名</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td align="left">mask-style</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">设置蒙层的样式</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td align="left">mask-class</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">设置蒙层的类名</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td align="left">bindchange</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">滚动选择时触发change事件，event.detail = {value}；value为数组，表示 picker-view 内的 picker-view-column 当前选择的是第几项（下标从 0 开始）</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td align="left">bindpickstart</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">当滚动选择开始时候触发事件</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.1</a></td></tr><tr><td align="left">bindpickend</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">当滚动选择结束时候触发事件</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.1</a></td></tr></tbody></table><p><strong>示例</strong></p><ul><li><strong>wxml代码</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自定义选择器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-picker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        自定义滑动选择器    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置内部选中选项高度 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker-view</span>  <span class="token attr-name">indicator-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日期列 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker-view-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{item.date}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker-view-column</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 时段列 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker-view-column</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{times}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>times1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{item.time}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker-view-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>其中wx:key的作用</strong>：</p><p><strong>官方解释：</strong>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p><p><strong>我的理解：</strong>  在<strong>不使用</strong> wx:key的情况下, 如果 array 内的数据发生改变，则会<strong>重新创建</strong>每个Item对象然后渲染列表（费时费力）在<strong>使用</strong> wx:key的情况下，如果array中的数据发生改变，只是将对应的对象<strong>重新排序</strong>。未发生变化的对象，不会重新创建。</p></blockquote><ul><li><strong>js代码</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自定义选择器</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         list<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> date<span class="token punctuation">:</span><span class="token string">'6月30日'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> date<span class="token punctuation">:</span><span class="token string">'7月01日'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> date<span class="token punctuation">:</span><span class="token string">'7月02日'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>        times<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        times1<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'19:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'19:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'20:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'20:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'21:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'21:30'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>        times2<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'22:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'22:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'23:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'23:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'00:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'00:30'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>        times3<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'01:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'01:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'02:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'02:30'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'03:00'</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>            <span class="token punctuation">{</span> time<span class="token punctuation">:</span><span class="token string">'03:30'</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 日期改变时渲染对应时间</span>    change<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     times<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>times1                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     times<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>times2                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     times<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>times3                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 初始化运行</span>    onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             times<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>times1        <span class="token punctuation">}</span> <span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><ul><li>wxss代码</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 自定义选择器 */</span><span class="token selector"><span class="token class">.custeom-picker</span></span><span class="token punctuation">{</span>   <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">200</span>rpx<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-picker</span> <span class="token class">.title</span></span><span class="token punctuation">{</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#444</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>rpx<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-picker</span> picker-view</span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-picker</span> picker-view <span class="token class">.cell</span></span><span class="token punctuation">{</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-picker</span> picker-view-column</span><span class="token punctuation">{</span>   <span class="token property">border-right</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><strong>运行效果</strong>：选择不同的日期会对应不同的时间选项</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630152714151.png" alt="image-20200630152714151" loading="lazy"></p><h4 id="4-4-8、input输入框"><a href="#4-4-8、input输入框" class="headerlink" title="4.4.8、input输入框"></a>4.4.8、input输入框</h4><blockquote><p>单行输入框，根据不同的type属性值，输入字段拥有很多形式，与HTML不同的是<code>&lt;input/&gt;</code>类型没有按钮类型</p></blockquote><ul><li>value：输入框的初始内容</li><li>type：input的类型；有效值为：text、number、idcard、digit、time、date</li><li>password：是否显示密码类型，默认为false</li><li>placeholder：输入框为空时的占位符</li><li>placeholder-style：指定placeholder的样式</li><li>placeholder-class：指定placeholder的样式类，默认值为imput-placeholder</li><li>disable：是否禁用</li><li>maxlength：最大输入长度，设置为0时不限制最大长度，默认为140</li><li>cursor-spacing：指定光标与键盘的距离，单位px</li><li>auto-focus：自动聚焦，拉起键盘。页面中只能由一个设置该属性</li><li>focus：获取焦点，默认false</li><li>bindinput：当键盘输入时触发事件</li><li>bindfocus：输入框聚焦时触发</li><li>bindblur：输入框失去焦点时触发</li><li>bindconfirm：点击完成按钮时触发</li></ul><p><strong>示例演示</strong></p><ul><li>wxml代码</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>默认样式，自动聚焦<span class="token punctuation">"</span></span> <span class="token attr-name">auto-foucus</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内容中123会被替换为0<span class="token punctuation">"</span></span> <span class="token attr-name">bindinput</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeValue<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入3个以上字符会收起键盘<span class="token punctuation">"</span></span> <span class="token attr-name">bindinput</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hideKeyboard<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>js代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// input输入框</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     changeValue<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 光标位置cursor</span>            pos <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>cursor<span class="token punctuation">,</span>            left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 获取光标前面的内容</span>            left <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 修改后光标的位置也要变化</span>            pos <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span><span class="token punctuation">{</span>             value<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            cursor<span class="token punctuation">:</span>pos        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>    hideKeyboard<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 调用关闭键盘的API</span>            wx<span class="token punctuation">.</span><span class="token function">hideKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><ul><li>wxss代码</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section</span> </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> input</span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>效果展示</strong>：进入时自动选中第一个输入框</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630191150993.png" alt="image-20200630191150993" loading="lazy"></p><h4 id="4-4-9、textarea文本域"><a href="#4-4-9、textarea文本域" class="headerlink" title="4.4.9、textarea文本域"></a>4.4.9、textarea文本域</h4><blockquote><p>多行输入框，但与HTML中的不同，小程序中的是一个自闭合标签，<strong>它的值需要赋值为value属性，而不是被标签包裹</strong>。</p></blockquote><ul><li><p>value：初始内容</p></li><li><p>placeholder：输入框为空时的占位符</p></li><li><p>placeholder-style：指定placeholder的样式</p></li><li><p>placeholder-class：指定placeholder的样式类，默认值为imput-placeholder</p></li><li><p>disable：是否禁用</p></li><li><p>maxlength：最大输入长度，设置为0时不限制最大长度，默认为140</p></li><li><p>auto-focus：自动聚焦，拉起键盘。页面中只能由一个设置该属性</p></li><li><p>cursor-spacing：指定光标与键盘的距离，单位px</p></li><li><p>focus：获取焦点，默认false</p></li><li><p>fixed：如果textarea是一个position：fixed的区域，需要显示指定属性fixed为true，默认false</p></li><li><p>bindinput：当键盘输入时触发事件</p></li><li><p>bindfocus：输入框聚焦时触发</p></li><li><p>bindblur：输入框失去焦点时触发（可以实现Ajax功能）</p></li><li><p>bindconfirm：点击完成按钮时触发</p></li><li><p>bindlinechange：输入框行数变化时调用，首次渲染时也会触发</p></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">bindblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getValue<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入文案<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textarea-holder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     getValue<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 失去焦点触发</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section</span> </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> textarea</span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.textarea-holder</span></span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">65</span>, <span class="token number">72</span>, <span class="token number">158</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>效果</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630200605125.png" alt="image-20200630200605125" loading="lazy"></p><h4 id="4-4-10、button按钮"><a href="#4-4-10、button按钮" class="headerlink" title="4.4.10、button按钮"></a>4.4.10、button按钮</h4><blockquote><p>按钮至少有3种状态：默认点击（default）、建议点击（primary）、谨慎点击（warn）</p></blockquote><ul><li>size：表示按钮的大小；有效值为：default、mini，默认值为default</li><li>type：按钮的样式类型，有效值为primary、default、warn，默认为default</li><li>plain：按钮是否镂空，背景色透明，默认值为false</li><li>diable：是否禁用，默认false</li><li>loading：名称前是否带loading图标，默认为false。通常在表单提交过程中或者按钮点击后等待反馈时，就需要打开loading让用户感知</li><li>form-type：用于<code>&lt;form/&gt;</code>组件，有效值为submit、reset，可以触发表单的事件</li><li>hover-class：指定按钮按下去的样式类。当hover-class=“none”时，没有点击态效果，默认为button-hover</li><li>hover-start-time：按住后多久出现点击态，单位毫秒，默认50</li><li>hover-stay-time：手指松开后点击态保留时间，单位毫秒，默认400</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>默认按钮样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>type="primary"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>type="warn"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">plain</span><span class="token punctuation">></span></span>plain镂空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disable</span><span class="token punctuation">></span></span>disable禁用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">loading</span><span class="token punctuation">></span></span>loading加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 按钮按住会变成红色 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-button-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    按住变红<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 嵌套多媒体的自定义按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../image/灯泡.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 按钮 */</span><span class="token selector">button</span><span class="token punctuation">{</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.my-button-hover</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630202720873.png" alt="image-20200630202720873" loading="lazy"></p><h5 id="去除button的样式"><a href="#去除button的样式" class="headerlink" title="去除button的样式"></a>去除button的样式</h5><ol><li><p>去掉边框</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.user-phone-btn</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>去掉圆角（注意border-radius: 0以下两处都要写）</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.user-phone-btn</span> </span><span class="token punctuation">{</span>   <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.user-phone-btn</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>   <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>去除背景</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.user-phone-btn</span> </span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h4 id="4-4-11、form表单"><a href="#4-4-11、form表单" class="headerlink" title="4.4.11、form表单"></a>4.4.11、form表单</h4><blockquote><p>可以将上面学习的组件合并起来使用</p></blockquote><ul><li>report-submit：是否返回formId，formId用于发送模板消息，默认false</li><li>bindsubmit：携带form中的数据触发的submit事件，与<code>&lt;button/&gt;</code>按钮的form-type属性配合使用</li><li>bindreset：触发重置事件，也是与按钮配合使用</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">bindsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">bindreset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开关 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>swicth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>switch</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开关<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 输入框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入框<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入内容<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{textvalue}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 复选框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>checkbox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>复选框<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>中国<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美国<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>日本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox-group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 单选框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>radio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radio-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>单选框<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radio</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radio</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radio-group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 选择器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>picker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{selectTime}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token attr-name">bindchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeTime<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>时间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                时间：{{selectTime}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 提交 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section</span> </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> label</span><span class="token punctuation">{</span>   <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> <span class="token class">.title</span></span><span class="token punctuation">{</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#43CD80</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.section</span> textarea</span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         selectTime<span class="token punctuation">:</span><span class="token string">'00:00'</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 时间切换</span>    changeTime<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             selectTime<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 点击提交表单</span>    submit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 重置表单</span>    reset<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'已经重置表单'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             selectTime<span class="token punctuation">:</span><span class="token string">'00:00'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200630211225909.png" alt="image-20200630211225909" loading="lazy"></p><h3 id="4-5、导航组件"><a href="#4-5、导航组件" class="headerlink" title="4.5、导航组件"></a>4.5、导航组件</h3><blockquote><p><code>&lt;nacigator/&gt;</code>时小程序中的页面链接，作用和HTML的超链接标签一样，控制页面的跳转</p></blockquote><ul><li><strong>url</strong>：应用内跳转链接，地址为相对地址</li><li><strong>redirect</strong>：跳转行为是否为重定向，<strong>如果为true，则跳转时会关闭当前页面，默认为false</strong></li><li><strong>open-type</strong>：可选值为navigate、redirect、switchTab默认为navigate</li><li><strong>hover-class</strong>：点击时的样式类，为none时没有点击效果</li></ul><p><strong>示例演示</strong></p><ul><li>index.wxml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 导航组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test?name<span class="token punctuation">=</span>lxj&amp;age<span class="token punctuation">=</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    跳转到其他页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- redirect重定向会销毁原页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test?name<span class="token punctuation">=</span>lxj&amp;age<span class="token punctuation">=</span>21<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myhover<span class="token punctuation">"</span></span> <span class="token attr-name">redirect</span><span class="token punctuation">></span></span>    重定向到其他页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test?name<span class="token punctuation">=</span>lxj&amp;age<span class="token punctuation">=</span>22<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myhover<span class="token punctuation">"</span></span> <span class="token attr-name">redirect</span><span class="token punctuation">></span></span>    刷新当前页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><ul><li>index.wxss</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 导航 */</span><span class="token selector"><span class="token class">.myhover</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">175</span>, <span class="token number">230</span>, <span class="token number">161</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">17</span>, <span class="token number">22</span>, <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li>test.wxml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    name:{{query.name}}, age:{{query.time}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>test.js</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         query<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onLoad<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 框架已将参数转化为onLoad参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><ul><li>默认页面</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701173223715.png" alt="image-20200701173223715" loading="lazy"></p><ul><li>使用了重定向，只能返回首页并重新加载</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701173237679.png" alt="image-20200701173237679" loading="lazy"></p><ul><li>返回原页面，无需重新加载</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701173256035.png" alt="image-20200701173256035" loading="lazy"></p><h3 id="4-6、媒体组件"><a href="#4-6、媒体组件" class="headerlink" title="4.6、媒体组件"></a>4.6、媒体组件</h3><blockquote><p>图片、视频、音频等组件</p></blockquote><h4 id="4-6-1、image图片"><a href="#4-6-1、image图片" class="headerlink" title="4.6.1、image图片"></a>4.6.1、image图片</h4><p><strong>属性如下：</strong></p><ul><li><strong>src</strong>：图片资源地址，可以是网络地址</li><li><strong>mode</strong>：图片的裁剪、缩放模式，默认为“scaleToFill”</li><li><strong>binderror</strong>：当错误发生时，发布到App Service的事件名</li><li><strong>bindload</strong>：当图片载入完毕时发布的事件名</li><li><strong>bindtap</strong>：当点击图片时触发</li></ul><blockquote><p><strong>mode属性的13中裁剪模式，4种为缩放模式，9种时裁剪模式</strong></p></blockquote><ol><li><strong>缩放模式：</strong><ul><li>scaleToFill：不保持纵横比缩放图片，使图片的宽高完全拉伸至填满image元素</li><li>aspectFit：保持纵横比缩放图片，使图片的长边能够完全显示出来</li><li>**aspectFill(常用)**：保持纵横比缩放图片，只保证图片的短边能完全显示出来，长边发生截取</li><li>widthFix：宽度不变，高度自动变化</li></ul></li><li><strong>裁剪模式（均不缩放图片）：</strong><ul><li>top：只显示图片的顶部区域</li><li>bottom：只显示图片的底部区域</li><li>center：只显示图片的中间区域</li><li>left：只显示图片的左边区域</li><li>right：只显示图片的右边区域</li><li>top left：只显示图片的左上边区域</li><li>top right：只显示图片的右上边区域</li><li>bottom left：只显示图片的左下边区域</li><li>bottom right：只显示图片的右下边区域</li></ul></li></ol><p><strong>效果对比</strong></p><ul><li>缩放模式</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701174820905.png" alt="image-20200701174820905" loading="lazy"></p><ul><li>裁剪模式</li></ul><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701174902436.png" alt="image-20200701174902436" loading="lazy"></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701174911622.png" alt="image-20200701174911622" loading="lazy"></p><h4 id="4-6-2、audio音频"><a href="#4-6-2、audio音频" class="headerlink" title="4.6.2、audio音频"></a>4.6.2、audio音频</h4><p><strong>基本属性：</strong></p><ul><li><strong>src</strong>：音频资源地址，可以是网络资源</li><li><strong>loop</strong>：是否循环播放，默认为false</li><li><strong>controls</strong>：是否显示默认控件，默认为true</li><li><strong>poster</strong>：默认控件上的音频封面的图片资源地址，如果controls属性值为false则poster无效</li><li><strong>name</strong>：默认控件上的音频名字，如果controls属性值为false则name无效，默认值为“未知音频”</li><li><strong>author</strong>：默认控件上的作者名字，如果controls属性值为false则author无效，默认值为“未知作者”</li><li><strong>bindended</strong>：当播放到末尾时触发ended事件</li><li><strong>binderror</strong>：当发生错误时触发error事件</li><li><strong>bindplay</strong>：当开始/继续播放时触发play事件</li><li><strong>bindpause</strong>：当暂停播放时触发pause事件</li><li><strong>bindtimeupdate</strong>：当播放进度改变时触发timeupdate事件</li></ul><p><strong>binderror错误类型</strong>:</p><ul><li>MEDIA_ERR_ABORTED：获取资源被用户禁止</li><li>MEDIA_ERR_NETWORD：网络错误</li><li>MEDIA_ERR_DECODE：解码错误</li><li>MEDIA_ERR_SRC_NOT_SUPPOERTED：不合适资源</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 音频组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myaudio.poster}}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myaudio.src}}<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myaudio.name}}<span class="token punctuation">"</span></span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{myaudio.author}}<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 音频组件</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         myaudio<span class="token punctuation">:</span><span class="token punctuation">{</span>             src<span class="token punctuation">:</span><span class="token string">'../audio/七里香_周杰伦_128K.mp3'</span><span class="token punctuation">,</span>            poster<span class="token punctuation">:</span><span class="token string">'http://cdnmusic.migu.cn/picture/2019/1108/2207/AS2fc0b9eec0a24d3c9c77ed9ee133ffc4.jpg'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span><span class="token string">'七里香'</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span><span class="token string">'周杰伦'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701183543541.png" alt="image-20200701183543541" loading="lazy"></p><h4 id="4-6-3、video视频"><a href="#4-6-3、video视频" class="headerlink" title="4.6.3、video视频"></a>4.6.3、video视频</h4><blockquote><p>video默认宽高为300px、225px，该组件不能在<code>&lt;scroll-view&gt;</code>中使用</p><p>更多属性参考官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/video.html">https://developers.weixin.qq.com/miniprogram/dev/component/video.html</a></p></blockquote><ul><li>src：资源地址</li><li>controls：是否显示控件</li><li>muted：是否静音</li><li>initial-time：初始播放位置（number类型）</li><li>direction：设置全屏时视频的方向，不指定则根据宽高比自动判断，有效值：0、90、-90，正常竖向、屏幕逆时针90度、屏幕顺时针90度</li><li>show-play-btn：是否显示视频底部控制栏的播放按钮</li><li>show-center-play-btn：是否显示视频中间的播放按钮</li><li>enable-progress-gesture：是否开启控制进度的手势</li><li>poster：封面</li><li>show-mute-btn：是否显示静音按钮</li><li>enable-play-gesture：是否开启播放手势，即双击切换播放/暂停</li><li>enable-auto-rotation：是否开启手机横屏时自动全屏，当系统设置开启自动旋转时生效</li><li>show-screen-lock-button：是否显示锁屏按钮，仅在全屏时显示，锁屏后控制栏的操作</li><li>danmu-list：弹幕列表</li><li>danmu-btn：是否显示弹幕按钮，只能初始化时有效，不能动态变化，默认为false</li><li>enable-danmu：是否展示弹幕，只能初始化时有效，不能动态变化，默认为false</li><li>autoplay：是否自动播放，默认false</li><li>bindplay：当开始/继续播放时触发play事件</li><li>bindpause：当暂停播放时触发pause事件</li><li>bindended：当播放到末尾时触发ended事件</li><li>bindtimeupdate：当播放进度改变时触发timeupdate事件</li><li>objectFit：当视频大小与video容器大小不一致时，视频的表现形式。contain：包含，fill：填充，cover：覆盖；默认为contain</li></ul><p><strong>示例演示</strong></p><ul><li>wxml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 视频组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>         <span class="token attr-name">enable-auto-rotation</span>        <span class="token attr-name">enable-play-gesture</span>         <span class="token attr-name">danmu-btn</span>         <span class="token attr-name">show-center-play-btn</span>         <span class="token attr-name">show-play-btn</span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myVideo<span class="token punctuation">"</span></span>         <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{src}}<span class="token punctuation">"</span></span>         <span class="token attr-name">danmu-list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{danmu}}<span class="token punctuation">"</span></span>         <span class="token attr-name">enable-danmu</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getVideo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本地视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danmu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{danmuText}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setInputValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendDanmu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送弹幕<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><ul><li>wxss</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 视频 */</span><span class="token selector"><span class="token class">.video</span> video</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">380</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.video</span> <span class="token class">.action</span></span><span class="token punctuation">{</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.video</span> <span class="token class">.action</span> <span class="token class">.danmu</span></span><span class="token punctuation">{</span>   <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">210</span>rpx<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.video</span> <span class="token class">.action</span> <span class="token class">.danmu</span> input</span><span class="token punctuation">{</span>   <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>rpx<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.video</span> <span class="token class">.action</span> <span class="token class">.danmu</span> button</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>rpx<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li>js</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         src<span class="token punctuation">:</span><span class="token string">'http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置弹幕</span>        danmu<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>             text<span class="token punctuation">:</span><span class="token string">'第1s出现的弹幕'</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token string">'#f00'</span><span class="token punctuation">,</span>            time<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>             text<span class="token punctuation">:</span><span class="token string">'第3s出现的弹幕'</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token string">'#0f0'</span><span class="token punctuation">,</span>            time<span class="token punctuation">:</span><span class="token number">3</span>        <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>        danmuText<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取video上下文videoContext对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createVideoContext</span><span class="token punctuation">(</span><span class="token string">'myVideo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    getVideo<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从本地或相机中选择视频</span>        wx<span class="token punctuation">.</span><span class="token function">chooseVideo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>               self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                   maxDuration<span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">,</span>                  src<span class="token punctuation">:</span>res<span class="token punctuation">.</span>tempFilePath              <span class="token punctuation">}</span> <span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token punctuation">,</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    setInputValue<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 同步数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             danmuText<span class="token punctuation">:</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    sendDanmu<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 发送弹幕</span>        <span class="token keyword">var</span> danmuText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>danmuText<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">.</span><span class="token function">sendDanmu</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             text<span class="token punctuation">:</span>danmuText<span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token string">'#f00'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送弹幕后清空输入框</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             danmuText<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701201031192.png" alt="image-20200701201031192" loading="lazy"></p><p><strong>注意支持的格式：</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200701201941757.png" alt="image-20200701201941757" loading="lazy"></p><h3 id="4-7、map地图组件"><a href="#4-7、map地图组件" class="headerlink" title="4.7、map地图组件"></a>4.7、map地图组件</h3><blockquote><p>小程序提供了<code>&lt;map/&gt;</code>组件和定位相关的API，地理位置的获取在后续的API中讲解。同样该组件不能在<code>&lt;scroll-view&gt;</code>中使用</p></blockquote><ul><li><p>latitude：中心纬度</p></li><li><p>longitude：中心经度</p></li><li><p>scale：缩放级别，默认为16</p></li><li><p>markers：标记点，用于在地图上显示标记的位置，不能自定义图标和样式，每个标记点属性如下：</p></li><li><p>polyline：路线</p></li></ul><p><strong>markers属性</strong></p><p>标记点用于在地图上显示标记的位置</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">类型</th><th align="left">必填</th><th align="left">备注</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">标记点 id</td><td align="left">number</td><td align="left">否</td><td align="left">marker 点击事件回调会返回此 id。<strong>建议为每个 marker 设置上 number 类型 id，保证更新 marker 时有更好的性能。</strong></td><td align="left"></td></tr><tr><td align="left">latitude</td><td align="left">纬度</td><td align="left">number</td><td align="left">是</td><td align="left">浮点数，范围 -90 ~ 90</td><td align="left"></td></tr><tr><td align="left">longitude</td><td align="left">经度</td><td align="left">number</td><td align="left">是</td><td align="left">浮点数，范围 -180 ~ 180</td><td align="left"></td></tr><tr><td align="left">title</td><td align="left">标注点名</td><td align="left">string</td><td align="left">否</td><td align="left">点击时显示，callout存在时将被忽略</td><td align="left"></td></tr><tr><td align="left">zIndex</td><td align="left">显示层级</td><td align="left">number</td><td align="left">否</td><td align="left"></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></td></tr><tr><td align="left">iconPath</td><td align="left">显示的图标</td><td align="left">string</td><td align="left">是</td><td align="left">项目目录下的图片路径，支持网络路径、本地路径、代码包路径（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a>）</td><td align="left"></td></tr><tr><td align="left">rotate</td><td align="left">旋转角度</td><td align="left">number</td><td align="left">否</td><td align="left">顺时针旋转的角度，范围 0 ~ 360，默认为 0</td><td align="left"></td></tr><tr><td align="left">alpha</td><td align="left">标注的透明度</td><td align="left">number</td><td align="left">否</td><td align="left">默认 1，无透明，范围 0 ~ 1</td><td align="left"></td></tr><tr><td align="left">width</td><td align="left">标注图标宽度</td><td align="left">number/string</td><td align="left">否</td><td align="left">默认为图片实际宽度</td><td align="left"></td></tr><tr><td align="left">height</td><td align="left">标注图标高度</td><td align="left">number/string</td><td align="left">否</td><td align="left">默认为图片实际高度</td><td align="left"></td></tr><tr><td align="left">callout</td><td align="left">自定义标记点上方的气泡窗口</td><td align="left">Object</td><td align="left">否</td><td align="left">支持的属性见下表，可识别换行符。</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">label</td><td align="left">为标记点旁边增加标签</td><td align="left">Object</td><td align="left">否</td><td align="left">支持的属性见下表，可识别换行符。</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">anchor</td><td align="left">经纬度在标注图标的锚点，默认底边中点</td><td align="left">Object</td><td align="left">否</td><td align="left">{x, y}，x 表示横向(0-1)，y 表示竖向(0-1)。{x: .5, y: 1} 表示底边中点</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">aria-label</td><td align="left">无障碍访问，（属性）元素的额外描述</td><td align="left">string</td><td align="left">否</td><td align="left"></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a></td></tr></tbody></table><p><strong>marker 上的气泡 callout</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">类型</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">content</td><td align="left">文本</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">color</td><td align="left">文本颜色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">fontSize</td><td align="left">文字大小</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">borderRadius</td><td align="left">边框圆角</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">borderWidth</td><td align="left">边框宽度</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></td></tr><tr><td align="left">borderColor</td><td align="left">边框颜色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></td></tr><tr><td align="left">bgColor</td><td align="left">背景色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">padding</td><td align="left">文本边缘留白</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">display</td><td align="left">‘BYCLICK’:点击显示; ‘ALWAYS’:常显</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">textAlign</td><td align="left">文本对齐方式。有效值: left, right, center</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">anchorX</td><td align="left">横向偏移量，向右为正数</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td align="left">anchorY</td><td align="left">纵向偏移量，向下为正数</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr></tbody></table><p><strong>marker 上的气泡 label</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">类型</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">content</td><td align="left">文本</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">color</td><td align="left">文本颜色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">fontSize</td><td align="left">文字大小</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">x</td><td align="left">label的坐标（废弃）</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">y</td><td align="left">label的坐标（废弃）</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">anchorX</td><td align="left">label的坐标，原点是 marker 对应的经纬度</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td align="left">anchorY</td><td align="left">label的坐标，原点是 marker 对应的经纬度</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td align="left">borderWidth</td><td align="left">边框宽度</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">borderColor</td><td align="left">边框颜色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">borderRadius</td><td align="left">边框圆角</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">bgColor</td><td align="left">背景色</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">padding</td><td align="left">文本边缘留白</td><td align="left">number</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">textAlign</td><td align="left">文本对齐方式。有效值: left, right, center</td><td align="left">string</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr></tbody></table><p><strong>polyline</strong></p><p>指定一系列坐标点，从数组第一项连线至最后一项</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">类型</th><th align="left">必填</th><th align="left">备注</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">points</td><td align="left">经纬度数组</td><td align="left">array</td><td align="left">是</td><td align="left">[{latitude: 0, longitude: 0}]</td><td align="left"></td></tr><tr><td align="left">color</td><td align="left">线的颜色</td><td align="left">string</td><td align="left">否</td><td align="left">十六进制</td><td align="left"></td></tr><tr><td align="left">width</td><td align="left">线的宽度</td><td align="left">number</td><td align="left">否</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">dottedLine</td><td align="left">是否虚线</td><td align="left">boolean</td><td align="left">否</td><td align="left">默认 false</td><td align="left"></td></tr><tr><td align="left">arrowLine</td><td align="left">带箭头的线</td><td align="left">boolean</td><td align="left">否</td><td align="left">默认 false，开发者工具暂不支持该属性</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">arrowIconPath</td><td align="left">更换箭头图标</td><td align="left">string</td><td align="left">否</td><td align="left">在 arrowLine 为 true 时生效</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td align="left">borderColor</td><td align="left">线的边框颜色</td><td align="left">string</td><td align="left">否</td><td align="left"></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td align="left">borderWidth</td><td align="left">线的厚度</td><td align="left">number</td><td align="left">否</td><td align="left"></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr></tbody></table><p><strong>position</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">类型</th><th align="left">必填</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">距离地图的左边界多远</td><td align="left">number</td><td align="left">否</td><td align="left">默认为0</td></tr><tr><td align="left">top</td><td align="left">距离地图的上边界多远</td><td align="left">number</td><td align="left">否</td><td align="left">默认为0</td></tr><tr><td align="left">width</td><td align="left">控件宽度</td><td align="left">number</td><td align="left">否</td><td align="left">默认为图片宽度</td></tr><tr><td align="left">height</td><td align="left">控件高度</td><td align="left">number</td><td align="left">否</td><td align="left">默认为图片高度</td></tr></tbody></table><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 地图组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span>      <span class="token attr-name">longitude</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{longitude}}<span class="token punctuation">"</span></span>      <span class="token attr-name">latitude</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{latitude}}<span class="token punctuation">"</span></span>      <span class="token attr-name">circles</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{circles}}<span class="token punctuation">"</span></span>      <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14<span class="token punctuation">"</span></span>      <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{controls}}<span class="token punctuation">"</span></span>      <span class="token attr-name">bindcontroltap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controltap<span class="token punctuation">"</span></span>      <span class="token attr-name">markers</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{markers}}<span class="token punctuation">"</span></span>      <span class="token attr-name">bindmarkertap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>markertap<span class="token punctuation">"</span></span>      <span class="token attr-name">polyline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{polyline}}<span class="token punctuation">"</span></span>      <span class="token attr-name">bindregionchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regionchange<span class="token punctuation">"</span></span>      <span class="token attr-name">show-location</span><span class="token style-attr language-css"><span class="token attr-name">      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 地图组件</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         longitude<span class="token punctuation">:</span><span class="token number">104</span><span class="token punctuation">,</span>        latitude<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>        scale<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置标记点</span>        markers<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                 iconPath<span class="token punctuation">:</span><span class="token string">"../image/灯泡.png"</span><span class="token punctuation">,</span>                id<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 纬度</span>                latitude<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 经度</span>                longitude<span class="token punctuation">:</span><span class="token number">104</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 图片宽高</span>                width<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                height<span class="token punctuation">:</span><span class="token number">30</span>            <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>                 iconPath<span class="token punctuation">:</span><span class="token string">"../image/banner3.png"</span><span class="token punctuation">,</span>                id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>                latitude<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                longitude<span class="token punctuation">:</span><span class="token number">104.1</span><span class="token punctuation">,</span>                width<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                height<span class="token punctuation">:</span><span class="token number">30</span>            <span class="token punctuation">}</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置路线</span>        polyline<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 按顺序设置5个点</span>            points<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                     longitude<span class="token punctuation">:</span><span class="token number">104</span><span class="token punctuation">,</span>                    latitude<span class="token punctuation">:</span><span class="token number">30</span>                <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>                     longitude<span class="token punctuation">:</span><span class="token number">104.1</span><span class="token punctuation">,</span>                    latitude<span class="token punctuation">:</span><span class="token number">30</span>                <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>                     longitude<span class="token punctuation">:</span><span class="token number">104.2</span><span class="token punctuation">,</span>                    latitude<span class="token punctuation">:</span><span class="token number">30</span>                <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>                     longitude<span class="token punctuation">:</span><span class="token number">104.3</span><span class="token punctuation">,</span>                    latitude<span class="token punctuation">:</span><span class="token number">30</span>                <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>                     longitude<span class="token punctuation">:</span><span class="token number">104.4</span><span class="token punctuation">,</span>                    latitude<span class="token punctuation">:</span><span class="token number">30</span>                <span class="token punctuation">}</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token string">"#0ff"</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>            arrowLine<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置2个图标</span>        controls<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>             id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>            iconPath<span class="token punctuation">:</span><span class="token string">'../image/banner1.png'</span><span class="token punctuation">,</span>            position<span class="token punctuation">:</span><span class="token punctuation">{</span>                 left<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                top<span class="token punctuation">:</span><span class="token number">250</span><span class="token punctuation">,</span>                width<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                height<span class="token punctuation">:</span><span class="token number">30</span>            <span class="token punctuation">}</span> <span class="token punctuation">,</span>            clickable<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>             id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>            iconPath<span class="token punctuation">:</span><span class="token string">'../image/banner2.png'</span><span class="token punctuation">,</span>            position<span class="token punctuation">:</span><span class="token punctuation">{</span>                 left<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                top<span class="token punctuation">:</span><span class="token number">250</span><span class="token punctuation">,</span>                width<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>                height<span class="token punctuation">:</span><span class="token number">30</span>            <span class="token punctuation">}</span> <span class="token punctuation">,</span>            clickable<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 地图发生变化时触发</span>    <span class="token function">regionchange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// type可以区分是开始拖动还是结束拖动</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 标记点点击触发</span>    <span class="token function">markertap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 根据标记点markerId区分</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>markerId<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 点击controls设置的图标</span>    <span class="token function">controltap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 通过markerId区分按钮</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>controlId<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200703141702437.png" alt="image-20200703141702437" loading="lazy"></p><h3 id="4-8、canvas画布组件"><a href="#4-8、canvas画布组件" class="headerlink" title="4.8、canvas画布组件"></a>4.8、canvas画布组件</h3><blockquote><p><code>&lt;canvas/&gt;</code>用于绘制图形，相当于在页面中放置了一块“画布”，可以在其中进行图形绘制，它仅仅是容器，需要调用相关API来完成实际的绘图任务</p></blockquote><ul><li>canvas-id：canvas组件的唯一标识符</li><li>disable-scroll：当在canvas中移动时，禁止屏幕滚动以及下拉刷新，默认false</li><li>bindtouchstart：手指触摸动作开始</li><li>bindtouchmove：手指触摸后移动</li><li>bindtouchend：手指触摸动作结束</li><li>bindtouchcancel：手指触摸动作被打断，如来点提示、弹窗</li><li>bindlongtaop：手指长按500ms之后触发，触发了长按事件后进行移动不会触发屏幕的滚动</li><li>binderror：当发生错误时触发error事件</li></ul><p><strong>实例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 画布</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取绘图上下文</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置线条样式      </span>        context<span class="token punctuation">.</span><span class="token function">setStrokeStyle</span><span class="token punctuation">(</span><span class="token string">"#00f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制图像</span>        wx<span class="token punctuation">.</span><span class="token function">drawCanvas</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             canvasId<span class="token punctuation">:</span><span class="token string">'myCanvas'</span><span class="token punctuation">,</span>            actions<span class="token punctuation">:</span>context<span class="token punctuation">.</span><span class="token function">getActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asdf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200703143302195.png" alt="image-20200703143302195" loading="lazy"></p><h3 id="4-9、contact客服会话"><a href="#4-9、contact客服会话" class="headerlink" title="4.9、contact客服会话"></a>4.9、contact客服会话</h3><blockquote><p><code>&lt;contact-button/&gt;</code>用于在页面显示一个客服会话按钮，点击之后进入客服会话界面，<strong>需要后台系统配合</strong></p></blockquote><ul><li>size：会话按钮大小，有效值18~27px，默认18</li><li>type：会话按钮的样式类型，有效值为default-dark、default-light，默认为default-dark</li><li>session-form：用户从按钮进入会话时，触发带有参数的事件推送</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 客服会话按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contact-button</span> <span class="token attr-name">session-form</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yoursession<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">120</span>rpx</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contact-button</span><span class="token punctuation">></span></span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200703143940590.png" alt="image-20200703143940590" loading="lazy"></p><p>==关于组件的介绍就到这里了，这些组件能满足大部分开发需求，建立多参考官方文档的组件详细介绍，了解各个组件的功能和特点==</p><h2 id="5、小程序API"><a href="#5、小程序API" class="headerlink" title="5、小程序API"></a>5、小程序API</h2><blockquote><p>本部分讲解小程序提供的API，包括 网络、媒体、文件、数据缓存、位置、设备、界面、开放接口8大类，通过逻辑层 JS 代码进行调用</p></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200703144510489-1594019108709.png" alt="image-20200703144510489" loading="lazy"></p><p><strong>两种调用API的方式</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以wx.on开头</span>wx<span class="token punctuation">.</span><span class="token function">onSocketOpen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket连接已打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不以wx.on开头</span>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 接口调用成功</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用失败</span>    fail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用结束(成功失败都会执行)</span>    complete<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3 id="5-1、网络"><a href="#5-1、网络" class="headerlink" title="5.1、网络"></a>5.1、网络</h3><blockquote><p>每个微信小程序需要事先设置一个通信域名，小程序可以跟指定域名进行网络通。包括不同HTTPS请求（wx.erquest）、WebSocket通信（wx.connectSocket）、上传文件（wx.uploadFile）、和下载文件（wx.downloadFile）。设置通信域名需要登录小程序“后台 ==》 设置 ==》 开发设置”，在服务器配置中添加受信任的域。</p></blockquote><h4 id="5-1-1、发起HTTPS请求"><a href="#5-1-1、发起HTTPS请求" class="headerlink" title="5.1.1、发起HTTPS请求"></a>5.1.1、发起HTTPS请求</h4><blockquote><p>使用wx.request(Object)发起HTTPS请求，默认超时时间和最大超时时间为60秒，小程序只能使用HTTPS请求，同时只能有5个网络请求。</p></blockquote><p><strong>Object参数属性如下</strong>:</p><ul><li><p>url：后台服务器接口地址</p></li><li><p>data：请求的参数</p></li><li><p>header：设置请求头</p><p>header中content-type默认为 ‘application/json’；</p><p>而referer固定为：‘<a href="https://servicewechat.com/%7Bappid%7D/%7Bversion%7D/page-frame.html%E2%80%99%EF%BC%8C%7Bversion%7D%E4%B8%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C0%E8%A1%A8%E7%A4%BA%E5%BC%80%E5%8F%91%E7%89%88">https://servicewechat.com/{appid}/{version}/page-frame.html’，{version}为小程序的版本号，0表示开发版</a></p></li><li><p>method：HTTPS请求方法类型，默认为GET，有效值为：OPTIONS、GET、POST、HEAD、PUT、DELETE、TRACE、CONNECT，均必须大写</p></li><li><p>dataType：数据类型，默认为json</p></li><li><p><strong>success</strong>：收到服务器成功返回的回调函数</p></li><li><p><strong>fail</strong>：接口调用失败的回调函数</p></li><li><p><strong>complete</strong>：接口调用结束的回调函数</p></li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span><span class="token string">'https://www.myserver.com'</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span><span class="token punctuation">{</span>         <span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用成功</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用失败</span>    fail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用结束(成功失败都会执行)</span>    complete<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-1-2、上传和下载"><a href="#5-1-2、上传和下载" class="headerlink" title="5.1.2、上传和下载"></a>5.1.2、上传和下载</h4><h5 id="1、wx-uploadFile"><a href="#1、wx-uploadFile" class="headerlink" title="1、wx.uploadFile"></a>1、wx.uploadFile</h5><blockquote><p>上传文件最大并发限制为10个，超时为60秒</p></blockquote><p>Object参数属性如下：</p><ul><li>url：开发者服务器url</li><li>filePath：要上传文件资源的路径</li><li>name：文件对应的key，可以在服务端通过这个key获取到文件的二进制内容</li><li>header：设置请求头，同上</li><li>formData：HTTP请求中其他额外的请求数据</li><li>success：收到服务器成功返回的回调函数，参数如下<ul><li>data：开发者服务器的返回数据</li><li>statusCode：HTTP状态码</li></ul></li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 调用选中图片的接口</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取临时图片地址</span>        <span class="token keyword">var</span> tempFilePaths <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 需要有自己的服务器</span>            url<span class="token punctuation">:</span><span class="token string">'http://www.myserver.com'</span><span class="token punctuation">,</span>            filtPath<span class="token punctuation">:</span>tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span><span class="token string">'myFile'</span><span class="token punctuation">,</span>            formData<span class="token punctuation">:</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 其他数据</span>                <span class="token string">'otherData'</span><span class="token punctuation">:</span><span class="token string">'value'</span>            <span class="token punctuation">}</span> <span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 服务器返回数据</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、wx-downloadFile"><a href="#2、wx-downloadFile" class="headerlink" title="2、wx.downloadFile"></a>2、wx.downloadFile</h5><blockquote><p>从服务端下载资源到本地，作为临时文件，如需持久保存需要主动调用wx.saveFile进行保存</p></blockquote><ul><li>url：下载资源的url</li><li>header：设置请求头，同上</li><li>success：收到服务器成功返回的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span><span class="token string">'http://myserver.com'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 下载图片资源后读取其信息</span>        wx<span class="token punctuation">.</span><span class="token function">getImageInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             src<span class="token punctuation">:</span>res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-1-3、WebSocket"><a href="#5-1-3、WebSocket" class="headerlink" title="5.1.3、WebSocket"></a>5.1.3、WebSocket</h4><blockquote><p>这为短连接方式实现，客户端和服务器端之间的即时通信技术只能使用轮询，需要客户端不断的发出请求，这种方式既浪费性能又占带宽。</p></blockquote><h5 id="1、wx-connectSocket"><a href="#1、wx-connectSocket" class="headerlink" title="1、wx.connectSocket"></a>1、wx.connectSocket</h5><blockquote><p>一个小程序同时只能有一个WebSocket连接</p></blockquote><ul><li>url：服务器接口地址。必须是WSS协议，且域名必须是后台配置的合法域名</li><li>data：请求的数据</li><li>header：设置请求头，同上</li><li>method：HTTPS请求方法类型，默认为GET，有效值为：OPTIONS、GET、POST、HEAD、PUT、DELETE、TRACE、CONNECT</li><li>success：收到服务器成功返回的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 服务端需要实现socket监听</span>    url<span class="token punctuation">:</span><span class="token string">'wss://www.myserver.com'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>         myData<span class="token punctuation">:</span><span class="token string">'data'</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    header<span class="token punctuation">:</span><span class="token punctuation">{</span>         <span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    method<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-onSocketOpen"><a href="#2、wx-onSocketOpen" class="headerlink" title="2、wx.onSocketOpen"></a>2、wx.onSocketOpen</h5><blockquote><p>监听WebSocket连接打开事件</p></blockquote><p><strong>实例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 创建连接</span>    url<span class="token punctuation">:</span><span class="token string">'wss://www.myserver.com'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>wx<span class="token punctuation">.</span><span class="token function">onSocketOpen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'socket连接已打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-onSocketError"><a href="#3、wx-onSocketError" class="headerlink" title="3、wx.onSocketError"></a>3、wx.onSocketError</h5><blockquote><p>监听WebSocket错误</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onSocketError</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接打开失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4、wx-sendSocketMessage"><a href="#4、wx-sendSocketMessage" class="headerlink" title="4、wx.sendSocketMessage"></a>4、wx.sendSocketMessage</h5><blockquote><p>通过WebSocket连接发送数据</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">sendSocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span>msg<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5、wx-onSocketMessage"><a href="#5、wx-onSocketMessage" class="headerlink" title="5、wx.onSocketMessage"></a>5、wx.onSocketMessage</h5><blockquote><p>监听接收到服务器的消息事件，callback返回参数为data</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onSocketMessage</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到服务器内容：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6、wx-closeSocket"><a href="#6、wx-closeSocket" class="headerlink" title="6、wx.closeSocket"></a>6、wx.closeSocket</h5><blockquote><p>关闭WebSocket连接</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">closeSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="7、wx-conSocketClose"><a href="#7、wx-conSocketClose" class="headerlink" title="7、wx.conSocketClose"></a>7、wx.conSocketClose</h5><blockquote><p>监听WebSocket是否关闭，成功关闭时触发</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">conSocketClose</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接已关闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2、媒体"><a href="#5-2、媒体" class="headerlink" title="5.2、媒体"></a>5.2、媒体</h3><h4 id="5-2-1、图片"><a href="#5-2-1、图片" class="headerlink" title="5.2.1、图片"></a>5.2.1、图片</h4><h5 id="1、wx-chooseImage"><a href="#1、wx-chooseImage" class="headerlink" title="1、wx.chooseImage"></a>1、wx.chooseImage</h5><blockquote><p>从本地相册选择图片或者使用相机拍照，拍照时产生的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需要调用wx.saveFile，这样下次启动时才能访问到。</p></blockquote><ul><li><strong>count</strong>：最多可以选择的图片张数，默认为9</li><li><strong>sizeType</strong>：图片尺寸类型，有效值为original（原图）、compressed（压缩图），默认二者都有</li><li><strong>sourceType</strong>：获取图片的方式，有效值为album（从相册选图）、camera（使用相机），默认二者都有</li><li><strong>success</strong>：成功则返回图片的本地文件路径列表tempFilePaths</li><li><strong>fail</strong>：接口调用失败的回调函数</li><li><strong>complete</strong>：接口调用结束的回调函数</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{src}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chooseImage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 选择图片</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   src<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>  chooseImage<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      wx<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>          sizeType<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'original'</span><span class="token punctuation">,</span> <span class="token string">'compressed'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          sourceType<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">,</span> <span class="token string">'camera'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">)</span><span class="token punctuation">;</span>              self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 src<span class="token punctuation">:</span>res<span class="token punctuation">.</span>tempFilePaths              <span class="token punctuation">}</span> <span class="token punctuation">)</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200703184626631-1594019108710.png" alt="image-20200703184626631" loading="lazy"></p><h5 id="2、wx-previewImage"><a href="#2、wx-previewImage" class="headerlink" title="2、wx.previewImage"></a>2、wx.previewImage</h5><blockquote><p>预览图片，调用后小程序会开启图片浏览界面</p></blockquote><ul><li>current：当前显示图片的链接，必须是urls中存在的链接，不填则默认第一张</li><li>urls：需要预览的图片的链接列表</li><li>success：接口调用成功</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 默认先显示第二张</span>    current<span class="token punctuation">:</span><span class="token string">'png2'</span><span class="token punctuation">,</span>    urls<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'png1'</span><span class="token punctuation">,</span>        <span class="token string">'png2'</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-getImageInfo"><a href="#3、wx-getImageInfo" class="headerlink" title="3、wx.getImageInfo"></a>3、wx.getImageInfo</h5><blockquote><p>获取图片信息</p></blockquote><ul><li>src：图片的路径</li><li>success：接口调用成功的函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">chooseImage<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>             wx<span class="token punctuation">.</span><span class="token function">getImageInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 src<span class="token punctuation">:</span>res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span> </code></pre><h4 id="5-2-2、录音"><a href="#5-2-2、录音" class="headerlink" title="5.2.2、录音"></a>5.2.2、录音</h4><h5 id="1、wx-startRecord"><a href="#1、wx-startRecord" class="headerlink" title="1、wx.startRecord"></a>1、wx.startRecord</h5><blockquote><p>开始录音，主动调用wx.stopRecord，或者录音超过1分钟时自动结束录音。</p></blockquote><ul><li>success：录音成功后调用，返回临时文件路径，res={tempFilePath:’录音文件的临时文件路径’}</li><li>fail：失败的回调函数</li><li>complete：结束的回调函数</li></ul><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">startRecord</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> tempFilePath <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">playVoice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 录音完成后立即播放</span>            filePath<span class="token punctuation">:</span>tempFilePath        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、wx-stopRecord"><a href="#2、wx-stopRecord" class="headerlink" title="2、wx.stopRecord"></a>2、wx.stopRecord</h5><blockquote><p>主动调用停止录音</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 十秒自动停止</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">stopRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span></code></pre><h4 id="5-2-3、音频播放控制"><a href="#5-2-3、音频播放控制" class="headerlink" title="5.2.3、音频播放控制"></a>5.2.3、音频播放控制</h4><h5 id="1、wx-playVoice"><a href="#1、wx-playVoice" class="headerlink" title="1、wx.playVoice"></a>1、wx.playVoice</h5><blockquote><p>开始播放语音，同时只允许一个文件播放</p></blockquote><ul><li>filePath：文件路径</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">playVoice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     filePath<span class="token punctuation">:</span>tempFilePath<span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、wx-pauseVoice"><a href="#2、wx-pauseVoice" class="headerlink" title="2、wx.pauseVoice"></a>2、wx.pauseVoice</h5><blockquote><p>暂停正在播放的语音，再次调用则继续播放。使用wx.stopVoice才可以重头播放</p></blockquote><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 播放五秒后暂停</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">pauseVoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-stopVoice"><a href="#3、wx-stopVoice" class="headerlink" title="3、wx.stopVoice"></a>3、wx.stopVoice</h5><blockquote><p>结束播放语音</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 播放五秒后结束</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">stopVoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-4、音乐播放控制"><a href="#5-2-4、音乐播放控制" class="headerlink" title="5.2.4、音乐播放控制"></a>5.2.4、音乐播放控制</h4><h5 id="1、wx-getBackgroundAudioPlayerState"><a href="#1、wx-getBackgroundAudioPlayerState" class="headerlink" title="1、wx.getBackgroundAudioPlayerState"></a>1、wx.getBackgroundAudioPlayerState</h5><blockquote><p>获取后台音乐播放状态，调用本方法可以获取<code>&lt;audio/&gt;</code>组件等的音乐。</p></blockquote><ul><li>success：成功，参数如下：<ul><li>duration：选定音频的长度</li><li>currentPosition：选定音频播放位置</li><li>status：播放状态</li><li>downloadPercent：音频的下载进度</li><li>dataUrl：歌曲数据链接</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getBackgroundAudioPlayerState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> statusText <span class="token operator">=</span> <span class="token punctuation">{</span>             <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token string">'没有音乐在播放'</span><span class="token punctuation">,</span>            <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token string">'播放中'</span><span class="token punctuation">,</span>            <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token string">'暂停中'</span>        <span class="token punctuation">}</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>statusText<span class="token punctuation">[</span>res<span class="token punctuation">.</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、wx-playBackgroundAudio"><a href="#2、wx-playBackgroundAudio" class="headerlink" title="2、wx.playBackgroundAudio"></a>2、wx.playBackgroundAudio</h5><blockquote><p>播放音乐</p></blockquote><ul><li>dataUrl：音乐链接</li><li>title：音乐标题</li><li>coverImgUrl：封面URL</li><li>success：成功</li><li>fail：失败</li><li>complete：失败</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">playBackgroundAudio</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     dataUrl<span class="token punctuation">:</span><span class="token string">'mp3'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span><span class="token string">'我的音乐'</span><span class="token punctuation">,</span>    coverImgUrl<span class="token punctuation">:</span><span class="token string">'jpg'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始播放音乐了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-pauseBackgroundAudio"><a href="#3、wx-pauseBackgroundAudio" class="headerlink" title="3、wx.pauseBackgroundAudio"></a>3、wx.pauseBackgroundAudio</h5><blockquote><p>暂停播放音乐</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 暂停播放</span>wx<span class="token punctuation">.</span><span class="token function">pauseBackgroundAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4、wx-seekBackgroundAudio"><a href="#4、wx-seekBackgroundAudio" class="headerlink" title="4、wx.seekBackgroundAudio"></a>4、wx.seekBackgroundAudio</h5><blockquote><p>控制音乐播放进度，实现快进、快退和播放位置拖动功能</p></blockquote><ul><li>position：音乐位置</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取播放状态</span>wx<span class="token punctuation">.</span>wx<span class="token punctuation">.</span><span class="token function">getBackgroundAudioPlayerState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> currentPosition <span class="token operator">=</span> res<span class="token punctuation">.</span>currentPosition<span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">seekBackgroundAudio</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             position<span class="token punctuation">:</span> currentPosition <span class="token operator">+</span> <span class="token number">30</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5、wx-stopBackgroundAudio"><a href="#5、wx-stopBackgroundAudio" class="headerlink" title="5、wx.stopBackgroundAudio"></a>5、wx.stopBackgroundAudio</h5><blockquote><p>停止播放音乐</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">stopBackgroundAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6、wx-onBackgroundAudioPlay"><a href="#6、wx-onBackgroundAudioPlay" class="headerlink" title="6、wx.onBackgroundAudioPlay"></a>6、wx.onBackgroundAudioPlay</h5><blockquote><p>监听音乐播放</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onBackgroundAudioPlay</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'音乐播放'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="7、wx-onBackgroundAudioPause"><a href="#7、wx-onBackgroundAudioPause" class="headerlink" title="7、wx.onBackgroundAudioPause"></a>7、wx.onBackgroundAudioPause</h5><blockquote><p>监听音乐暂停</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onBackgroundAudioPause</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'音乐暂停'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="8、wx-onBackgroundAudioStop"><a href="#8、wx-onBackgroundAudioStop" class="headerlink" title="8、wx.onBackgroundAudioStop"></a>8、wx.onBackgroundAudioStop</h5><blockquote><p>监听音乐停止</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onBackgroundAudioStop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'音乐停止'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-2-5、音频组件的控制"><a href="#5-2-5、音频组件的控制" class="headerlink" title="5.2.5、音频组件的控制"></a>5.2.5、音频组件的控制</h4><blockquote><p>wx.creatAudioContext(audioId) 创建并返回audio上下文audioContext对象，通过audioId和组件绑定</p></blockquote><ul><li>setSrc：设置音频地址</li><li>play：播放</li><li>pause：暂停</li><li>seek：跳转到指定位置，单位为s</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 音频控制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-audio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAudio<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poster<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdnmusic.migu.cn/picture/2019/1108/2207/AS2fc0b9eec0a24d3c9c77ed9ee133ffc4.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>actions<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pause<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seek<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳到30秒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 音频控制</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>audioContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createAudioContext</span><span class="token punctuation">(</span><span class="token string">'myAudio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>audioContext<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">'../music/七里香_周杰伦_128K.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  action<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> type <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>type<span class="token punctuation">,</span>        audioContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>audioContext<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 播放</span>        <span class="token keyword">case</span> <span class="token string">'play'</span><span class="token punctuation">:</span>          audioContext<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 暂停</span>        <span class="token keyword">case</span> <span class="token string">'pause'</span><span class="token punctuation">:</span>          audioContext<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 跳转</span>        <span class="token keyword">case</span> <span class="token string">'seek'</span><span class="token punctuation">:</span>          audioContext<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳到30秒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重放</span>        <span class="token keyword">case</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>          audioContext<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.custom-audio</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>rpx<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">60</span>rpx auto<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-audio</span> <span class="token class">.poster</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.custom-audio</span> <span class="token class">.actions</span> view</span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-gradient</span><span class="token punctuation">(</span>linear, <span class="token number">0%</span> <span class="token number">0%</span> <span class="token number">0%</span> <span class="token number">100%</span>, <span class="token function">from</span><span class="token punctuation">(</span><span class="token hexcode">#fff</span><span class="token punctuation">)</span>, <span class="token function">to</span><span class="token punctuation">(</span><span class="token hexcode">#eee</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704144025535.png" alt="image-20200704144025535" loading="lazy"></p><h4 id="5-2-6、视频"><a href="#5-2-6、视频" class="headerlink" title="5.2.6、视频"></a>5.2.6、视频</h4><blockquote><p>wx.chooseVideo拍摄视频或从手机相册选取视频，返回视频的临时文件路径。</p></blockquote><ul><li><p>sourceType：获取视频方式，album从相册中选视频，camera使用相机拍摄，默认两者都有</p></li><li><p>maxDuration：拍摄视频最长拍摄时间，单位秒，最长支持60秒</p></li><li><p>camera：拍摄适配的方式用前置或后置视像头，默认为前后都有；有效值为back后、front前</p></li><li><p>success：成功，参数如下：</p><ul><li>tempFilePath：选定临时文件路径</li><li>duration：选定视频的时间长度</li><li>size：选定视频的数据量大小</li><li>height：选定视频的高</li><li>width：宽</li></ul></li><li><p>fail：失败</p></li><li><p>complete：结束</p></li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">chooseVideo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     sourceType<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">,</span> <span class="token string">'camera'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    camera<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'front'</span><span class="token punctuation">,</span> <span class="token string">'back'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-7、视频组件控制"><a href="#5-2-7、视频组件控制" class="headerlink" title="5.2.7、视频组件控制"></a>5.2.7、视频组件控制</h4><blockquote><p>wx.createVideoContext(videoId)获取上下文</p></blockquote><ul><li>play：播放</li><li>pause：暂停</li><li>seek：跳转，单位为s</li><li>sendDanmu：发送弹幕，danmu有两个属性text，color</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 视频控制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey<span class="token punctuation">=</span>30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid<span class="token punctuation">=</span>1023&amp;hy<span class="token punctuation">=</span>SH&amp;fileparam<span class="token punctuation">=</span>302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myVideo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pause<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>restart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到开头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendDanmu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送弹幕<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 视频控制</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createVideoContext</span><span class="token punctuation">(</span><span class="token string">'myVideo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  play<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  pause<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  restart<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  sendDanmu<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>videoContext<span class="token punctuation">.</span><span class="token function">sendDanmu</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           text<span class="token punctuation">:</span><span class="token string">'弹幕'</span><span class="token punctuation">,</span>          color<span class="token punctuation">:</span><span class="token string">'#faf'</span>      <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong>：可以通过按钮实现相应控制</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704145556940.png" alt="image-20200704145556940" loading="lazy"></p><h3 id="5-3、文件"><a href="#5-3、文件" class="headerlink" title="5.3、文件"></a>5.3、文件</h3><blockquote><p>从网络下载、拍照、录音、录视频时，都是存在临时文件中，需要持久化保存需要调用文件处理API5.</p></blockquote><h4 id="5-3-1、wx-saveFile"><a href="#5-3-1、wx-saveFile" class="headerlink" title="5.3.1、wx.saveFile"></a>5.3.1、wx.saveFile</h4><blockquote><p>保存文件到本地，本地文件存储大小限制为10MB</p></blockquote><ul><li>tempFilePath：需要保存文件的临时路径</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">saveFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 保存已获取的临时文件</span>    tempFilePath<span class="token punctuation">:</span>tempFilePath<span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 持久地址路径</span>        <span class="token keyword">var</span> saveFilePath <span class="token operator">=</span> res<span class="token punctuation">.</span>savedFilePath<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件已保存'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-3-2、wx-getSavedFileList"><a href="#5-3-2、wx-getSavedFileList" class="headerlink" title="5.3.2、wx.getSavedFileList"></a>5.3.2、wx.getSavedFileList</h4><blockquote><p>获取本地已保存文件列表</p></blockquote><ul><li>success：成功，参数如下：<ul><li>errMsg：接口调用结果</li><li>fileList：文件列表，属性包括：<ul><li>createTime：文件保存的时间戳，从1970/01/01 08:00:00到当前的秒数</li><li>size：文件的大小，单位为B</li></ul></li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getSavedFileList</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>fileList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'个文件，路径为：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>fileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-3-3、wx-getSaveFileInfo"><a href="#5-3-3、wx-getSaveFileInfo" class="headerlink" title="5.3.3、wx.getSaveFileInfo"></a>5.3.3、wx.getSaveFileInfo</h4><blockquote><p>获取本地文件的文件信息</p></blockquote><ul><li>filePath：文件路径</li><li>success：成功，参数如下：<ul><li>errMsg：接口调用结果</li><li>size：文件大小，单位B</li><li>createTime：文件保存时的时间戳</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getSaveFileInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     filePath<span class="token punctuation">:</span>file<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件大小为'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-3-4、wx-removeSavedFile"><a href="#5-3-4、wx-removeSavedFile" class="headerlink" title="5.3.4、wx.removeSavedFile"></a>5.3.4、wx.removeSavedFile</h4><blockquote><p>删除本地存储文件</p></blockquote><ul><li>filePath：文件路径</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">removeSavedFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     filePath<span class="token punctuation">:</span>file<span class="token punctuation">.</span>filePath<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-3-5、wx-openDocument"><a href="#5-3-5、wx-openDocument" class="headerlink" title="5.3.5、wx.openDocument"></a>5.3.5、wx.openDocument</h4><blockquote><p>在新页面打开文档，支持的格式有：doc、docx、xls、xlsx、ppt、pptx、pdf</p></blockquote><ul><li>filePath：文件路径</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用下载文件接口</span>wx<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span><span class="token string">'http://www.myserver.com/my.docx'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> filePath <span class="token operator">=</span> res<span class="token punctuation">.</span>filePath<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下载文档后在新页面中预览</span>        wx<span class="token punctuation">.</span><span class="token function">openDocument</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             filePath<span class="token punctuation">:</span>filePath        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-4、数据缓存"><a href="#5-4、数据缓存" class="headerlink" title="5.4、数据缓存"></a>5.4、数据缓存</h3><blockquote><p>每个小程序都可以有自己的本地缓存，local Storage是永久存储的，本地缓存最大为10MB，数据操作分为同步和异步两种</p></blockquote><h4 id="5-4-1、保存数据"><a href="#5-4-1、保存数据" class="headerlink" title="5.4.1、保存数据"></a>5.4.1、保存数据</h4><h5 id="1、wx-setStorage"><a href="#1、wx-setStorage" class="headerlink" title="1、wx.setStorage"></a>1、wx.setStorage</h5><blockquote><p>将数据存在本地缓存指定的key中，会覆盖掉原来该key对应的内容，这是一个异步接口</p></blockquote><ul><li>key：本地缓存中的指定的key</li><li>data：需要存储的内容</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     key<span class="token punctuation">:</span><span class="token string">'myKey'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token string">'myValue'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-setStorageSync"><a href="#2、wx-setStorageSync" class="headerlink" title="2、wx.setStorageSync"></a>2、wx.setStorageSync</h5><blockquote><p>将数据缓存到本地中，这是同步接口</p></blockquote><ul><li>key：本地缓存中指定的key</li><li>data：需要存储的内容</li></ul><p><strong>实例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'myKey'</span><span class="token punctuation">,</span> <span class="token string">'myValue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-4-2、获取数据"><a href="#5-4-2、获取数据" class="headerlink" title="5.4.2、获取数据"></a>5.4.2、获取数据</h4><h5 id="1、wx-getStorage"><a href="#1、wx-getStorage" class="headerlink" title="1、wx.getStorage"></a>1、wx.getStorage</h5><blockquote><p>从本地缓存中异步获取指定key对应的内容</p></blockquote><ul><li>key：本地缓存中指定的key</li><li>success：接口调用的回调函数</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     key<span class="token punctuation">:</span><span class="token string">'myKey'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 打印出myKey对应的内容</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、wx-getStorageSync"><a href="#2、wx-getStorageSync" class="headerlink" title="2、wx.getStorageSync"></a>2、wx.getStorageSync</h5><blockquote><p>从本地缓存中同步获取指定key的对应内容</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'myKey'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-4-3、获取本地数据信息"><a href="#5-4-3、获取本地数据信息" class="headerlink" title="5.4.3、获取本地数据信息"></a>5.4.3、获取本地数据信息</h4><h5 id="1、wx-getStorageInfo"><a href="#1、wx-getStorageInfo" class="headerlink" title="1、wx.getStorageInfo"></a>1、wx.getStorageInfo</h5><blockquote><p>异步获取当前storage的相关信息</p></blockquote><ul><li>success：成功，参数如下：<ul><li>keys：当前storage中所有的key</li><li>curretSize：当前占用的空间大小，单位kb</li><li>limitSize：限制的空间大小，单位kb</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getStorageInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> p<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token keyword">in</span> res<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-getStorageInfoSync"><a href="#2、wx-getStorageInfoSync" class="headerlink" title="2、wx.getStorageInfoSync"></a>2、wx.getStorageInfoSync</h5><blockquote><p>同步获取当前storage的相关信息</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p<span class="token punctuation">,</span>    info <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getStorageInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token keyword">in</span> info<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h4 id="5-4-4、删除数据"><a href="#5-4-4、删除数据" class="headerlink" title="5.4.4、删除数据"></a>5.4.4、删除数据</h4><h5 id="1、wx-removeStorage"><a href="#1、wx-removeStorage" class="headerlink" title="1、wx.removeStorage"></a>1、wx.removeStorage</h5><blockquote><p>根据key值异步删除本地数据</p></blockquote><ul><li>key：本地缓存中指定的key</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     key<span class="token punctuation">:</span><span class="token string">'myKey'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-removeStorageSync"><a href="#2、wx-removeStorageSync" class="headerlink" title="2、wx.removeStorageSync"></a>2、wx.removeStorageSync</h5><blockquote><p>根据key值同步删除本地数据</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token string">'myKey'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-4-5、清空数据"><a href="#5-4-5、清空数据" class="headerlink" title="5.4.5、清空数据"></a>5.4.5、清空数据</h4><h5 id="1、wx-clearStorage"><a href="#1、wx-clearStorage" class="headerlink" title="1、wx.clearStorage"></a>1、wx.clearStorage</h5><blockquote><p>异步清理本地缓存</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">clearStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不会阻塞下面代码的运行</span></code></pre><h5 id="2、wx-clearStorageSync"><a href="#2、wx-clearStorageSync" class="headerlink" title="2、wx.clearStorageSync"></a>2、wx.clearStorageSync</h5><blockquote><p>同步清理本地数据缓存</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">clearStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会阻塞下面代码的运行</span></code></pre><h3 id="5-5、位置"><a href="#5-5、位置" class="headerlink" title="5.5、位置"></a>5.5、位置</h3><h4 id="5-5-1、获取位置"><a href="#5-5-1、获取位置" class="headerlink" title="5.5.1、获取位置"></a>5.5.1、获取位置</h4><blockquote><p>wx.getLocation用于获取当前的地理位置、速度，需要用户开启定位功能</p></blockquote><ul><li>type：默认为wgs84返回的GPS坐标，而gcj02返回的可用于wx.openLocation的坐标</li><li>success：成功，参数如下：<ul><li>latitude：纬度，有效值-90~90</li><li>longitude：经度，有效值-180~180</li><li>speed：速度</li><li>accuracy：位置的精确度</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     type<span class="token punctuation">:</span><span class="token string">'wgs84'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-5-2、选择位置"><a href="#5-5-2、选择位置" class="headerlink" title="5.5.2、选择位置"></a>5.5.2、选择位置</h4><blockquote><p>wx.chooseLocation用于打开地图选择位置，用户选中后返回选中的信息</p></blockquote><ul><li><p>success：成功，参数如下：</p><ul><li>name：位置名称</li><li>address：详细地址</li><li>latitude：纬度，有效值-90~90</li><li>longitude：经度，有效值-180~180</li><li>cancel：用户取消调用</li></ul></li><li><p>fail：失败</p></li><li><p>complete：结束</p></li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">chooseLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-5-3、查看位置"><a href="#5-5-3、查看位置" class="headerlink" title="5.5.3、查看位置"></a>5.5.3、查看位置</h4><blockquote><p>wx.openLocation用于在微信内置地图查看位置</p></blockquote><ul><li>latitude：纬度，有效值-90~90</li><li>longitude：经度，有效值-180~180</li><li>scale：缩放比例，有效值为1~28，默认28</li><li>name：位置名称</li><li>address：详细地址</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 返回可用于wx.openLocation的经纬度</span>    type<span class="token punctuation">:</span><span class="token string">'gcj02'</span><span class="token punctuation">;</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>            wx<span class="token punctuation">.</span><span class="token function">openLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             latitude<span class="token punctuation">:</span>res<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span>            longitude<span class="token punctuation">:</span>res<span class="token punctuation">.</span>longitude        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-5-4、地图组件控制"><a href="#5-5-4、地图组件控制" class="headerlink" title="5.5.4、地图组件控制"></a>5.5.4、地图组件控制</h4><blockquote><p>wx.createMapContext用于创建并返回map上下文mapContext对象</p></blockquote><ul><li>getCenterLocation：获取当前地图中心的经纬度，返回的是gcj02坐标系，属性如下：<ul><li>moveToLocation：将地图中心移动到当前定位点，需要配置map组件的show-location使用</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 地图控制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span> <span class="token attr-name">show-location</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mymap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getCenterLocation<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移动位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>mapContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createMapContext</span><span class="token punctuation">(</span><span class="token string">'myMap'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    action<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> type <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>type<span class="token punctuation">,</span>            mapContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapContext<span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 获取当前地图中心纬度</span>            <span class="token keyword">case</span> <span class="token string">'getCenterLocation'</span><span class="token punctuation">:</span>                mapContext<span class="token punctuation">.</span><span class="token function">getCenterLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>longitude <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                 <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定位到当前位置</span>            <span class="token keyword">case</span> <span class="token string">'location'</span><span class="token punctuation">:</span>                mapContext<span class="token punctuation">.</span><span class="token function">moveToLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mymap</span></span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704213141439.png" alt="image-20200704213141439" loading="lazy"></p><h3 id="5-6、设备"><a href="#5-6、设备" class="headerlink" title="5.6、设备"></a>5.6、设备</h3><h4 id="5-6-1、系统信息"><a href="#5-6-1、系统信息" class="headerlink" title="5.6.1、系统信息"></a>5.6.1、系统信息</h4><h5 id="1、wx-getSystemInfo"><a href="#1、wx-getSystemInfo" class="headerlink" title="1、wx.getSystemInfo"></a>1、wx.getSystemInfo</h5><blockquote><p>异步获取系统信息</p></blockquote><ul><li><p>success：成功，参数如下：</p><ul><li>model：手机型号</li><li>pixelRatio：设备像素比</li><li>windowWidth：窗口宽度</li><li>windowHeight：窗口高度</li><li>language：微信设置的语言</li><li>version：微信版本号</li><li>system：操作系统版本</li><li>platform：客户端平台</li></ul></li><li><p>fail：失败</p></li><li><p>complete：结束</p></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 手机信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>手机型号：{{model}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>像素比：{{pixelRatio}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>微信版本号：{{version}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>操作系统：{{system}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>客户端平台：{{platform}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 手机信息</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         model<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        pixelRatio<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        version<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        system<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        platform<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">getSystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>                 self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     model<span class="token punctuation">:</span>info<span class="token punctuation">.</span>model<span class="token punctuation">,</span>                    pixelRatio<span class="token punctuation">:</span>info<span class="token punctuation">.</span>pixelRatio<span class="token punctuation">,</span>                    version<span class="token punctuation">:</span>info<span class="token punctuation">.</span>version<span class="token punctuation">,</span>                    system<span class="token punctuation">:</span>info<span class="token punctuation">.</span>system<span class="token punctuation">,</span>                    platform<span class="token punctuation">:</span>info<span class="token punctuation">.</span>platform                <span class="token punctuation">}</span> <span class="token punctuation">)</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704222358697.png" alt="image-20200704222358697" loading="lazy"></p><h5 id="2、wx-getSystemInfoSync"><a href="#2、wx-getSystemInfoSync" class="headerlink" title="2、wx.getSystemInfoSync"></a>2、wx.getSystemInfoSync</h5><blockquote><p>同步获取系统信息</p></blockquote><pre class=" language-js"><code class="language-js">vat info <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-6-2、网络状态"><a href="#5-6-2、网络状态" class="headerlink" title="5.6.2、网络状态"></a>5.6.2、网络状态</h4><blockquote><p>wx.getNetworkType用于获取网络类型</p></blockquote><ul><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getNetworkType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>networkType<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-6-3、重力感应"><a href="#5-6-3、重力感应" class="headerlink" title="5.6.3、重力感应"></a>5.6.3、重力感应</h4><blockquote><p>wx.onAccelerometerChange监听重力感应数据，频率：5次/秒</p></blockquote><ul><li>x：x轴</li><li>y：y轴</li><li>z：z轴</li></ul><p>横竖屏的判断方法：<a href="https://www.cnblogs.com/dianzan/p/9668488.html">https://www.cnblogs.com/dianzan/p/9668488.html</a></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704214600627.png" alt="image-20200704214600627" loading="lazy"></p><p><strong>示例代码</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{x}},{{y}},{{z}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">onAccelerometerChange</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>             self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 x<span class="token punctuation">:</span>res<span class="token punctuation">.</span>x<span class="token punctuation">,</span>                y<span class="token punctuation">:</span>res<span class="token punctuation">.</span>y<span class="token punctuation">,</span>                z<span class="token punctuation">:</span>res<span class="token punctuation">.</span>z            <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704215021695.png" alt="image-20200704215021695" loading="lazy"></p><h4 id="5-6-4、罗盘"><a href="#5-6-4、罗盘" class="headerlink" title="5.6.4、罗盘"></a>5.6.4、罗盘</h4><blockquote><p>wx.onCompassChange用于监听罗盘数据，频率：5次/秒，调用罗盘需要开启定位功能</p><p>callback参数的属性有direction：前面向的方向度数，正北方为0，范围为0~360，-1代表没有开启定位功能</p></blockquote><p><strong>实例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">onCompressChange</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-6-5、拨打电话"><a href="#5-6-5、拨打电话" class="headerlink" title="5.6.5、拨打电话"></a>5.6.5、拨打电话</h4><blockquote><p>wx.makePhoneCall用于调用手机拨打电话功能</p></blockquote><ul><li>phoneNumber：需要拨打的电话号码</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">makePhoneCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     phoneNumber<span class="token punctuation">:</span><span class="token string">'1111111'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong>：在真手机中使用的时候则直接跳转到拨号界面</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200704215911845.png" alt="image-20200704215911845" loading="lazy"></p><h4 id="5-6-6、扫码"><a href="#5-6-6、扫码" class="headerlink" title="5.6.6、扫码"></a>5.6.6、扫码</h4><blockquote><p>wx.scanCode(Object)调起客户端扫码界面，扫码成功后返回对应结果</p></blockquote><ul><li><p>success：成功，参数如下：</p><ul><li>result：扫码的内容</li><li>scanType：所扫码的类型</li><li>charSet：所扫码的字符集</li><li>path：当所扫的码为当前小程序的合法二维码时，会返回此字段，内容为二维码携带的path</li></ul></li><li><p>fail：失败</p></li><li><p>complete：结束</p></li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自动调用起微信扫码功能</span>wx<span class="token punctuation">.</span><span class="token function">scanCode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 打印扫码内容</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3 id="5-7、界面"><a href="#5-7、界面" class="headerlink" title="5.7、界面"></a>5.7、界面</h3><h4 id="5-7-1、交互反馈"><a href="#5-7-1、交互反馈" class="headerlink" title="5.7.1、交互反馈"></a>5.7.1、交互反馈</h4><h5 id="1、wx-showToast"><a href="#1、wx-showToast" class="headerlink" title="1、wx.showToast"></a>1、wx.showToast</h5><blockquote><p>显示消息提示框</p></blockquote><ul><li>title：提示内容</li><li>icon：图片，只支持“ success ”、“ loading ”</li><li>duration：提示的延迟时间，到了指定时间自动关闭，单位为毫秒，默认1500，最大为10000</li><li>mask：是否显示透明蒙层，防止误触穿透，默认为false</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showToat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     title<span class="token punctuation">:</span><span class="token string">'操作成功'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span><span class="token string">'success'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-hideToast"><a href="#2、wx-hideToast" class="headerlink" title="2、wx.hideToast"></a>2、wx.hideToast</h5><blockquote><p>隐藏消息提示框</p></blockquote><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     title<span class="token punctuation">:</span><span class="token string">'请稍等...'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span><span class="token string">'loading'</span><span class="token punctuation">,</span>    duration<span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 关闭toast</span>    wx<span class="token punctuation">.</span><span class="token function">hideToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-showModal"><a href="#3、wx-showModal" class="headerlink" title="3、wx.showModal"></a>3、wx.showModal</h5><blockquote><p>显示模态弹窗</p></blockquote><ul><li>title：提示的标题</li><li>content：提示的内容</li><li>showCancel：是否显示取消按钮，默认为true</li><li>cancelText：取消按钮的文字，默认为“取消”，最多为4个字符</li><li>cancelColor：取消按钮的文字颜色，默认为“#000000”</li><li>confirmText：确定按钮的文字，默认为“确定”，最多为4个字符</li><li>confirmColor：确定按钮的文字颜色，默认为“#3CC51F”</li><li>success：成功，表示用户点击确定按钮</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     title<span class="token punctuation">:</span><span class="token string">'标题'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span><span class="token string">'内容'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 用户点击取消按钮，不做处理</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 可以继续流程</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户点击确定'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="4、wx-showActionSheet"><a href="#4、wx-showActionSheet" class="headerlink" title="4、wx.showActionSheet"></a>4、wx.showActionSheet</h5><blockquote><p>显示操作菜单</p></blockquote><ul><li>itemList：按钮的文字数组，数组长度最大为6个</li><li>itemColor：按钮的文字颜色，默认为“ #000000 ”</li><li>success：成功，表示用户点击确定按钮<ul><li>cancel：用户是否取消选择</li><li>tapIndex：用户点击的按钮，从上到下的顺序，从0开始</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">showActionSheet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     itemList<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'缺货'</span><span class="token punctuation">,</span>        <span class="token string">'配送时间选错'</span><span class="token punctuation">,</span>        <span class="token string">'不想买了'</span><span class="token punctuation">,</span>        <span class="token string">'其他'</span>    <span class="token punctuation">]</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>cancle<span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tapIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-7-2、设置导航条"><a href="#5-7-2、设置导航条" class="headerlink" title="5.7.2、设置导航条"></a>5.7.2、设置导航条</h4><h5 id="1、wx-setNavigationBarTitle"><a href="#1、wx-setNavigationBarTitle" class="headerlink" title="1、wx.setNavigationBarTitle"></a>1、wx.setNavigationBarTitle</h5><blockquote><p>动态设置当前页面的标题</p></blockquote><ul><li>title：页面的标题</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">setNavigationBarTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     title<span class="token punctuation">:</span><span class="token string">'新页面'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-showNavigationBarLoading"><a href="#2、wx-showNavigationBarLoading" class="headerlink" title="2、wx.showNavigationBarLoading"></a>2、wx.showNavigationBarLoading</h5><blockquote><p>在当前页面显示导航条加载动画</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onShow<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         wx<span class="token punctuation">.</span><span class="token function">showNavigationBarLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-hideNavigationBarLoading"><a href="#3、wx-hideNavigationBarLoading" class="headerlink" title="3、wx.hideNavigationBarLoading"></a>3、wx.hideNavigationBarLoading</h5><blockquote><p>隐藏导航条加载动画</p></blockquote><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onLaunch<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         wx<span class="token punctuation">.</span><span class="token function">hideNavigationBarLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-7-3、导航"><a href="#5-7-3、导航" class="headerlink" title="5.7.3、导航"></a>5.7.3、导航</h4><h5 id="1、wx-navigateTo"><a href="#1、wx-navigateTo" class="headerlink" title="1、wx.navigateTo"></a>1、wx.navigateTo</h5><blockquote><p>保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面，最多页面路径为5层</p></blockquote><ul><li>url：需要跳转的应用内页面的路径，可带参数</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onLoad<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、wx-redirectTo"><a href="#2、wx-redirectTo" class="headerlink" title="2、wx.redirectTo"></a>2、wx.redirectTo</h5><blockquote><p>关闭当前页面，跳转到应用内的某个页面，可带参数</p></blockquote><ul><li>url：页面路径</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、wx-switchTab"><a href="#3、wx-switchTab" class="headerlink" title="3、wx.switchTab"></a>3、wx.switchTab</h5><blockquote><p>跳转到tabBar页面，并关闭其他所有非tabBar页面</p></blockquote><ul><li>url：需要跳转的tabBar页面的路径，不能带参数</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-json"><code class="language-json">// app.json配置tabBar<span class="token punctuation">{</span>     <span class="token property">"tabBar"</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token property">"list"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>             <span class="token property">"pagePath"</span><span class="token operator">:</span><span class="token string">"home"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"首页"</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>             <span class="token property">"pathPath"</span><span class="token operator">:</span><span class="token string">"other"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"其他页面"</span>        <span class="token punctuation">}</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 必须是已注册的tab</span>    url<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4、wx-navigateBack"><a href="#4、wx-navigateBack" class="headerlink" title="4、wx.navigateBack"></a>4、wx.navigateBack</h5><blockquote><p>关闭当前页面，返回上一页面或多级页面。可通过getCurrenPages()获取当前的页面栈，以决定返回几层。</p></blockquote><ul><li>delta：表示返回的页面数，如果大于现有页面则返回到首页，默认为1</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 向前返回3级</span>wx<span class="token punctuation">.</span><span class="token function">navigateBack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     delta<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-7-4、动画"><a href="#5-7-4、动画" class="headerlink" title="5.7.4、动画"></a>5.7.4、动画</h4><blockquote><p>wx.createAnimation用于创建一个动画示例animation</p></blockquote><ul><li><strong>duration</strong>：动画持续时间，单位为ms，默认为400</li><li><strong>timeingFunction</strong>：定义动画的效果，默认值” linear“，有效值为”linear“、”ease“、”ease-in“、”ease-in-out“、”ease-out“、”step-start“、”step-end“</li><li><strong>delay</strong>：动画延迟时间</li><li><strong>transformOrigin</strong>：设置transform-origin，默认为”50%50%0“</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> animation <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 以左上角为中心点</span>    transformOrgin<span class="token punctuation">:</span><span class="token string">'0 0'</span><span class="token punctuation">,</span>    duration<span class="token punctuation">:</span><span class="token number">20000</span><span class="token punctuation">,</span>    timingFunction<span class="token punctuation">:</span><span class="token string">'ease-in'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="1、动画描述"><a href="#1、动画描述" class="headerlink" title="1、动画描述"></a>1、动画描述</h5><blockquote><p>创建实例后我们需要调用实例动画方法来描述动画，这些方法调用后会返回自身，支持链式调用的写法，动画的描述方法按类型可分为样式、旋转、缩放、偏移、倾斜、矩阵变形</p></blockquote><h6 id="（1）样式"><a href="#（1）样式" class="headerlink" title="（1）样式"></a>（1）样式</h6><ul><li>opacity：设置透明度，参数如下：<ul><li>value：透明度，范围0~1</li></ul></li><li>backgroundColor：设置背景颜色，参数如下<ul><li>color：颜色值</li></ul></li><li>width：设置宽度，参数如下：<ul><li>length：长度值</li></ul></li><li>hright：设置高度<ul><li>top：设置top属性</li><li>length：长度值</li></ul></li><li>left：设置left属性<ul><li>length：长度值</li></ul></li><li>bottom：设置底部属性<ul><li>length：长度值</li></ul></li><li>right：设置右边属性<ul><li>length：长度值</li></ul></li></ul><h6 id="（2）旋转"><a href="#（2）旋转" class="headerlink" title="（2）旋转"></a>（2）旋转</h6><ul><li>rotate(deg)：从原定顺时针旋转一个deg角度<ul><li>deg：旋转角度，范围-180~180</li></ul></li><li>rotatex(deg)：在X轴旋转一个deg角度</li><li>rotatey(deg)：在y轴旋转一个deg角度</li><li>rotatez(deg)：在z轴旋转一个deg角度</li><li>rotate3d(x, y, z, deg)：旋转的简写方法<ul><li>x：在x轴的旋转角度，范围-180~180</li><li>y：在y轴的旋转角度，范围-180~180</li><li>z：在z轴的旋转角度，范围-180~180</li><li>deg：从原定顺时针旋转一个deg角度，范围-180~180</li></ul></li></ul><h6 id="（3）缩放"><a href="#（3）缩放" class="headerlink" title="（3）缩放"></a>（3）缩放</h6><ul><li>scale(sx, sy)：同时设置在X轴、Y轴的缩放<ul><li>sx：只有这一个参数时，表示在X轴、Y轴同时缩放sx倍数；当有个参数时，只表示在X轴的缩放</li><li>sy：Y轴的缩放，可不写</li></ul></li><li>scaleX(sx)：设置X轴的缩放</li><li>scaleX(sy)：设置y轴的缩放</li><li>scaleX(sz)：设置z轴的缩放</li><li>scaleX(sx, sy, sz)：同时控制X、Y、Z轴的缩放</li></ul><h6 id="（4）偏移"><a href="#（4）偏移" class="headerlink" title="（4）偏移"></a>（4）偏移</h6><ul><li>translate(tx, ty)：表示在X、Y轴偏移量<ul><li>tx：只有这一个参数时，表示在X轴、Y轴同时偏移tx，单位px；当有个参数时，只表示在X轴的偏移</li><li>ty：在Y轴的偏移，单位px</li></ul></li><li>translateX(tx)：表示在X轴的偏移量<ul><li>tx：在X轴的偏移，单位px</li></ul></li><li>translateY(ty)：表示在y轴的偏移量</li><li>translateZ(tz)：表示在z轴的偏移量</li><li>translate3d(tx, ty, tz)：表示在X，Y，Z轴的偏移量</li></ul><h6 id="（5）倾斜"><a href="#（5）倾斜" class="headerlink" title="（5）倾斜"></a>（5）倾斜</h6><ul><li>skew(ax,ay)：表示在X、y轴倾斜</li><li>skewX(ax)：表示X轴的倾斜</li><li>skewY(ay)：表示Y轴的倾斜</li></ul><h6 id="（6）矩阵变形"><a href="#（6）矩阵变形" class="headerlink" title="（6）矩阵变形"></a>（6）矩阵变形</h6><ul><li>matrix(a, b, c, d, tx, ty)：定义矩阵变形，基于X轴和Y轴坐标重新定位元素位置</li><li>matrix3d()：定义矩阵变形，基于X轴、Y轴、Z轴重新定位元素位置</li></ul><h5 id="2、动画队列"><a href="#2、动画队列" class="headerlink" title="2、动画队列"></a>2、动画队列</h5><blockquote><p>调用动画操作方法后<strong>要调用step()来表示一组动画完成</strong>，可以在一组动画调用任意多个动画方法，一组动画中的所有动画会同时开始，一组动画完成后才会进行下一组动画。</p></blockquote><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 动画 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">animation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{animaData}}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">         <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>         <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rotateAndMove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旋转并移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rotateThenMove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旋转后移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 动画</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span>         animaData<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 旋转并移动</span>    rotateAndMove<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> anim <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 持续时间</span>            duration<span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 动画效果</span>            timingFunction<span class="token punctuation">:</span><span class="token string">'ease'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 偏移、旋转，调用step()来表示一组动画完成</span>        anim<span class="token punctuation">.</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token string">'720'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             animaData<span class="token punctuation">:</span>anim<span class="token punctuation">.</span><span class="token keyword">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 旋转后移动</span>    rotateThenMove<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> anim <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             timingFunction<span class="token punctuation">:</span><span class="token string">'ease'</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分步执行3个动画，通过step切割，duration为持续时间</span>        anim<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token string">'720'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">{</span> duration<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">{</span> duration<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">{</span> duration<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             animaData<span class="token punctuation">:</span>anim<span class="token punctuation">.</span><span class="token keyword">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705110700322.png" alt="image-20200705110700322" loading="lazy"></p><h4 id="5-7-5、绘图"><a href="#5-7-5、绘图" class="headerlink" title="5.7.5、绘图"></a>5.7.5、绘图</h4><blockquote><p>在组件中提到过的<code>&lt;canvas/&gt;</code>组件，画图必须通过本部分的API实现，绘图可分为3部分：</p><ol><li>创建执行上下文</li><li>通过执行上下文进制绘制描述</li><li>调用绘图API，将绘制描述道<code>&lt;canvas/&gt;</code></li></ol></blockquote><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 绘图</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建上下文</span>        <span class="token keyword">var</span> canvasContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置绘制描述</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘图</span>        canvasContext<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705111513242.png" alt="image-20200705111513242" loading="lazy"></p><h5 id="1、基础API"><a href="#1、基础API" class="headerlink" title="1、基础API"></a>1、基础API</h5><h6 id="（1）wx-createCanvasContext-canvasId"><a href="#（1）wx-createCanvasContext-canvasId" class="headerlink" title="（1）wx.createCanvasContext(canvasId)"></a>（1）wx.createCanvasContext(canvasId)</h6><blockquote><p>绘图上下文对象，与组件的id进行绑定</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="（2）wx-canvasToTempFilePath"><a href="#（2）wx-canvasToTempFilePath" class="headerlink" title="（2）wx.canvasToTempFilePath"></a>（2）wx.canvasToTempFilePath</h6><blockquote><p>将当前画布内容导出生成图片，并返回文件路径</p></blockquote><ul><li>canvasId：画布标识，指定导出哪个画布</li><li>success：接口调用成功，返回参数：<ul><li>tempFilePath：导出图片的文件路径</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>实例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">canvasToTempFilePath</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     canvasId<span class="token punctuation">:</span><span class="token string">'myCanvas'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 打印出图片路径</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="2、canvasContext对象方法"><a href="#2、canvasContext对象方法" class="headerlink" title="2、canvasContext对象方法"></a>2、canvasContext对象方法</h5><blockquote><p>上下文对象包含的方法有10类：样式、渐变、线条样式、矩阵、路径、变形、文字、图片、混合、其他</p></blockquote><h6 id="（1）样式-1"><a href="#（1）样式-1" class="headerlink" title="（1）样式"></a>（1）样式</h6><blockquote><p>样式设置会全局作用，如果没有覆盖，则会沿用之前的样式设置</p></blockquote><ul><li>setFillStyle(color)：设置填充颜色，没有设置默认为black</li><li>setStrokeStyle(color)：设置描边颜色</li><li>setShadow(offsetX, offsetY, blur, color)：设置阴影：<ul><li>offsetX：阴影相对于形状在水平方向的偏移</li><li>offsetY：阴影相对于形状在竖直方向的偏移</li><li>blur：阴影的模糊级别，数值越大越模糊</li><li>color：阴影的颜色</li></ul></li></ul><p><strong>实例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 绘图2</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> canvasContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 填充方形</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制方框</span>        <span class="token comment" spellcheck="true">// 设置描边颜色</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setStrokeStyle</span><span class="token punctuation">(</span><span class="token string">'#faf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 画一个矩形，默认为黑色</span>        canvasContext<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制带阴影方形，前两个参数为偏移量，第三个表示模糊程度</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setShadow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'#0ff'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里填充的方形颜色受到第一句代码影响，也为蓝色</span>        canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705113906849.png" alt="image-20200705113906849" loading="lazy"></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705114103557.png" alt="image-20200705114103557" loading="lazy"></p><h6 id="（2）渐变"><a href="#（2）渐变" class="headerlink" title="（2）渐变"></a>（2）渐变</h6><blockquote><p>用于创建渐变对象</p></blockquote><ul><li><p><strong>createLinearGradient</strong>(x0, y0, x1, y1)：创建一个线性渐变，方形渐变图</p><ul><li>x0：起点的x坐标</li><li>y0：起点的y坐标</li><li>x1：终点的x坐标</li><li>y1：终点的y坐标</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// addColorStop第一个参数范围0~1</span>linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>createCircularGradient</strong>(x, y, r)：创建一个圆形的渐变，起点在圆心，终点在圆环</p><ul><li>x：圆心的x坐标</li><li>y：圆心的y坐标</li><li>r：圆的半径</li></ul></li><li><p><strong>addColorStop</strong>(stop, color)：创建一个颜色渐变点</p><ul><li>stop：表示渐变点在起点和终点中的位置，<strong>取值范围0~1</strong></li><li>color：渐变点的颜色</li></ul></li></ul><p><strong>使用完渐变之后，需要进行填充显示</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 填充方形</span>canvasContext<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span>linearGradient<span class="token punctuation">)</span><span class="token punctuation">;</span>canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 渐变</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> canvasContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            linearGradient<span class="token punctuation">,</span>             circularGradient<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需要根据图形对渐变坐标进行换算</span>        linearGradient <span class="token operator">=</span> canvasContext<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建渐变时，至少创建2个渐变点，开始与结束</span>        linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span>        linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.33</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>        linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.66</span><span class="token punctuation">,</span> <span class="token string">'cyan'</span><span class="token punctuation">)</span>        linearGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 填充方形</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span>linearGradient<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建圆形渐变</span>        circularGradient <span class="token operator">=</span> canvasContext<span class="token punctuation">.</span><span class="token function">createCircularGradient</span><span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建多个渐变点</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.16</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.33</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.66</span><span class="token punctuation">,</span> <span class="token string">'cyan'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.83</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span>        circularGradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 填充方形</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span>circularGradient<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制图形</span>        canvasContext<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705120458646.png" alt="image-20200705120458646" loading="lazy"></p><h6 id="（3）线条样式"><a href="#（3）线条样式" class="headerlink" title="（3）线条样式"></a>（3）线条样式</h6><blockquote><p>和样式设置一样，线条样式设置会作用全局</p></blockquote><ul><li>setLineWidth(lineWidth)：设置线条的宽度，默认为1px</li><li>setLineCap(lineCap)：设置线条结束端点样式，默认结束端点样式为square，参数如下：<ul><li>square：端点样式为正方形，不会截取线条宽度</li><li>butt：端点样式为正方形，会截取线条宽度</li><li>round：端点样式为圆形，不会截取线条宽度</li></ul></li><li>setLineJoin(lineJoin)：设置线条的交点样式，默认交点样式为miter。参数取值有：<ul><li>bevel：斜角</li><li>round：圆角</li><li>miter：尖角</li></ul></li><li>setMiterLimit：设置最大斜接长度，指在两条线交汇处内角和外角之间的距离，当setLineJoin为miter时才有效。</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">700</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 线条样式</span><span class="token keyword">var</span> _fn<span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> canvasContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线宽度</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 端点样式为正方形，不会截取线条宽度</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineCap</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 端点样式为正方形，但会截取线条宽度</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineCap</span><span class="token punctuation">(</span><span class="token string">'butt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 端点样式为圆形，不会截取线条宽度</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineCap</span><span class="token punctuation">(</span><span class="token string">'round'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 恢复为默认线条边界</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineCap</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交叉处为斜角</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineJoin</span><span class="token punctuation">(</span><span class="token string">'bevel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交叉处为圆角</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineJoin</span><span class="token punctuation">(</span><span class="token string">'round'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交叉处为尖角</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineJoin</span><span class="token punctuation">(</span><span class="token string">'miter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置交叉处为尖角</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setLineJoin</span><span class="token punctuation">(</span><span class="token string">'miter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setMiterLimit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setMiterLimit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">setMiterLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawAngle</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>_fn <span class="token operator">=</span> <span class="token punctuation">{</span>     drawLine<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 开始画图</span>        canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置起点</span>        canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置终点</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 画出当前路径边框</span>        canvasContext<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    drawAngle<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> beginPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>         canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>beginPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">,</span> beginPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705212223839.png" alt="image-20200705212223839" loading="lazy"></p><h6 id="（4）矩形"><a href="#（4）矩形" class="headerlink" title="（4）矩形"></a>（4）矩形</h6><ul><li><strong>rect</strong>(x, y, width, height)：创建一个矩形，创建后需要调用fill()或stroke()方法将矩形真正画到组件中，参数如下：<ul><li>x：矩形路径左上角的x坐标</li><li>y：矩形路径左上角的y坐标</li><li>width：矩形路径的宽度</li><li>height：矩形路径的高度</li></ul></li><li><strong>fillRect</strong>(x, y, width, height)：填充一个矩形，需要使用setFillStyle()设置颜色，默认黑色<ul><li>x：矩形路径左上角的x坐标</li><li>y：矩形路径左上角的y坐标</li><li>width：矩形路径的宽度</li><li>height：矩形路径的高度</li></ul></li><li><strong>stokeRect</strong>(x, y, width, height)：画一个非填充的矩形，绘制前需要调用setFillStroke()设置线条颜色，默认黑色</li><li><strong>clearRect</strong>(x, y, width, height)：清除画布上在该矩形区域的内容，清楚会直接显示出<code>&lt;canvas/&gt;</code>背景色</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">700</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 矩形</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> ctx <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置填充颜色</span>        ctx<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setStrokeStyle</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制线框矩形</span>        ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制填充矩形</span>        ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入true，表示接着上次继续绘制</span>        <span class="token comment" spellcheck="true">// 绘制填充矩形</span>        ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制线框矩形</span>        ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清除矩形区域</span>        ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705214103051.png" alt="image-20200705214103051" loading="lazy"></p><h6 id="（5）路径"><a href="#（5）路径" class="headerlink" title="（5）路径"></a>（5）路径</h6><blockquote><p>路径绘制并不会在画布上绘制形状，而是创建一个线条路径，可以被stroke()绘制线条，也可以被fill()填充区域，绘制路径需要调用beginPath()方法，结束需要调用closePath()方法。</p></blockquote><ul><li>beginPath：开始创建一个路径</li><li>closePath：关闭一个路径</li><li>fill：对当前路径中的内容进行填充</li><li>stroke：画出当前路径的边框，默认为黑色</li><li>moveTo(x, y)：把路径移动到画布中的指定点</li><li>lineTo(x, y)：添加一个新点，并画一条从画布中的点到当前点</li><li>arc(x, y, z, sAngle, eAngle, counterclockwise)：添加一个弧形路径到当前路径，顺时针绘制<ul><li>x：圆的x坐标</li><li>y：圆的y坐标</li><li>z：圆的z坐标</li><li>sAngle：起始弧度，以pai为单位，可以自己进行转换 startAngle*Math.PI/180</li><li>eAngle：终止弧度</li><li>counterclockwise：可选。指定弧度的方向时顺时针还是逆时针，默认为false顺时针</li></ul></li><li>quadraticCurveTo(cpx, cpy, x, y)：创建二次方贝塞尔曲线<ul><li>cpx：贝塞尔控制点x坐标</li><li>cpy：贝塞尔控制点y坐标</li><li>x：结束点的x坐标</li><li>y：结束点的y坐标</li></ul></li><li>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)：创建三次反贝塞尔曲线<ul><li>cp1x：第一个贝塞尔控制点的x坐标</li><li>cp1y：第一个贝塞尔控制点的y坐标</li><li>cp2x：第二个贝塞尔控制点的x坐标</li><li>cp2y：第二个贝塞尔控制点的y坐标</li><li>x：结束点的x坐标</li><li>y：结束点的y坐标</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">700</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 路径</span><span class="token keyword">var</span> _fn<span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> ctx <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制三角形线条</span>        _fn<span class="token punctuation">.</span><span class="token function">drawTrianglePath</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制扇形</span>        _fn<span class="token punctuation">.</span><span class="token function">drawSectorPath</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'#faa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制二次贝塞尔曲线</span>        ctx<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _fn<span class="token punctuation">.</span><span class="token function">drawQuaDraticCurve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setStrokeStyle</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制三次贝塞尔曲线</span>        _fn<span class="token punctuation">.</span><span class="token function">drawBezierCurve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setStrokeStyle</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>_fn <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 绘制三角形</span>    drawTrianglePath<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> beginPos<span class="token punctuation">)</span><span class="token punctuation">{</span>         canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始路径</span>        canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制3条边</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭路径</span>        canvasContext<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 绘制扇形</span>    drawSectorPath<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> beginPos<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> endAgel<span class="token punctuation">)</span><span class="token punctuation">{</span>         canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始路径</span>        canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制边线</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> radius<span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制弧线</span>        canvasContext<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> startAngle<span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">,</span> endAgel<span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制边线</span>        canvasContext<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beginPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束路径</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 绘制二次贝塞尔曲线路径</span>    drawQuaDraticCurve<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> startpoint<span class="token punctuation">,</span> controlPoint<span class="token punctuation">,</span> endPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>         canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>startpoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> startpoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span>controlPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> controlPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> endPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> endPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里不需要关闭路径，否则首尾相连</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 绘制三次贝塞尔曲线路径</span>    drawBezierCurve<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>canvasContext<span class="token punctuation">,</span> startpoint<span class="token punctuation">,</span> controlPoint1<span class="token punctuation">,</span> controlPoint2<span class="token punctuation">,</span> endPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>         canvasContext<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>startpoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> startpoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvasContext<span class="token punctuation">.</span><span class="token function">bezierCurveTo</span><span class="token punctuation">(</span>controlPoint1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> controlPoint1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> controlPoint2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> controlPoint2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> endPoint<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> endPoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同样不需要关闭</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705221724004.png" alt="image-20200705221724004" loading="lazy"></p><h6 id="（6）变形"><a href="#（6）变形" class="headerlink" title="（6）变形"></a>（6）变形</h6><blockquote><p>变形方法会整体影响之后绘图方法的坐标体系</p></blockquote><ul><li><p><strong>scale</strong>(scaleWidth, scaleHeight)：在调用scale方法后，之后创建的路径其横纵坐标都会被缩放，<strong>多此调用sacle，倍数会相乘</strong>，参数如下：</p></li><li><p>scaleWidth：横坐标缩放的倍数（1 = 100%，0.5 = 50%，2 = 200%）</p></li><li><p>scaleHeight：纵坐标缩放的倍数</p></li><li><p><strong>rotate</strong>(rotate)：以原点为中心顺时针旋转（degrees*Math.PI/180），原点可以使用translate方法修改。</p></li><li><p><strong>translate</strong>(x, y)：对当前坐标的原点（0，0）进行变换，默认的坐标系原点为页面左上角</p><ul><li>x：水平坐标平移量</li><li>y：竖直坐标平移量</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>坐标放大2倍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rotate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旋转30度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>translate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>原点坐标x、y均加10px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drawReact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绘制正方形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 变形</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     canvasContext<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>    onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>canvasContext <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    translate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>canvasContext<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    rotate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>canvasContext<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    scale<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>canvasContext<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    drawReact<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canvasContext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 恢复绘制条件，并弹栈</span>        context<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         context<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基于上次图形继续绘制</span>        context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200705230755077.png" alt="image-20200705230755077" loading="lazy"></p><h6 id="（7）文字"><a href="#（7）文字" class="headerlink" title="（7）文字"></a>（7）文字</h6><blockquote><p>将文字输出到画布中，字体颜色能通过setFillStyle()方法修改，其方法包括fillText(text, x, y)：在画布上绘制被填充的文本</p></blockquote><ul><li>text：在画布上输出的文本</li><li>x：绘制文本的左上角x坐标位置</li><li>y：绘制文本的左上角y坐标位置</li><li>setFontSize(fontSize)：设置字体的字号</li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 文字</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'English'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置字体大小</span>        context<span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 改变字体颜色</span>        context<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706113238659.png" alt="image-20200706113238659" loading="lazy"></p><h6 id="（8）图片"><a href="#（8）图片" class="headerlink" title="（8）图片"></a>（8）图片</h6><blockquote><p>在画布上绘制图片</p></blockquote><ul><li>drawimage(imageResource, x, y, width, height)：绘制图片<ul><li>imageResource：图片资源路径</li><li>x：图像左上角的x坐标</li><li>y：图像左上角的y坐标</li><li>width：图像宽度</li><li>height：图像高度</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 图片</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>            <span class="token string">'../image/灯泡.png'</span><span class="token punctuation">,</span>            <span class="token number">70</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token number">131</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706114013094.png" alt="image-20200706114013094" loading="lazy"></p><h6 id="（9）混合"><a href="#（9）混合" class="headerlink" title="（9）混合"></a>（9）混合</h6><blockquote><p>设置全局画笔透明度</p></blockquote><ul><li>setGlobalAlpha(alpha)：设置透明度<ul><li>alpha：透明度，范围0~1；0表示全透明，1表示全不透明</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 混合</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置透明度</span>        context<span class="token punctuation">.</span><span class="token function">setGlobalAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706114819034.png" alt="image-20200706114819034" loading="lazy"></p><h6 id="（10）其他"><a href="#（10）其他" class="headerlink" title="（10）其他"></a>（10）其他</h6><blockquote><p>其他的一些绘图方法</p></blockquote><ul><li><strong>save</strong>()：保存当前的绘图上下文，每次保存类似将当前设置进行压栈，仅用于保存当前绘图上下文状态，而不是用于保存当前的操作步骤</li><li><strong>restore</strong>()：恢复之前保存的绘图上下文</li><li>**draw(reserve)**：将之前在绘图上下文中的描述滑倒canvas组件中<ul><li>reserve：为flase时，则在本次绘制之前清空画布再继续绘制；为true时，则保留当前内容继续绘制</li></ul></li></ul><p><strong>示例演示</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 其他</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onReady<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存上下文</span>        context<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 恢复到之前红色设置</span>        context<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><strong>效果展示</strong>：依然保留了red的设置</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706115941449.png" alt="image-20200706115941449" loading="lazy"></p><h4 id="5-6-7、下拉刷新"><a href="#5-6-7、下拉刷新" class="headerlink" title="5.6.7、下拉刷新"></a>5.6.7、下拉刷新</h4><blockquote><p>下拉刷新包括以下API</p></blockquote><ul><li>onPullDownRefresh(callback)<ul><li>监听下拉刷新事件需要在Page中定义onPull-DownRefresh处理函数。</li><li>需要在app.json配置中开启window配置enablePullDownRefresh选项。</li></ul></li><li>wx.stopPullDownRefresh()：停止当前页面下拉刷新</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 监听当前页面下拉刷新</span>    onPullDownRefresh<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 停止当前页面下拉刷新</span>        wx<span class="token punctuation">.</span><span class="token function">stopPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3 id="5-8、开放接口"><a href="#5-8、开放接口" class="headerlink" title="5.8、开放接口"></a>5.8、开放接口</h3><h4 id="5-8-1、登录"><a href="#5-8-1、登录" class="headerlink" title="5.8.1、登录"></a>5.8.1、登录</h4><blockquote><p>登录分2步骤：</p><ol><li>获取登录凭证</li><li>用登陆凭证获取用户登录态信息</li></ol></blockquote><h5 id="1、wx-login-Object"><a href="#1、wx-login-Object" class="headerlink" title="1、wx.login(Object)"></a>1、wx.login(Object)</h5><blockquote><p>调用接口获取登录凭证（code）进而换取用户登录态信息，包括用户唯一表示（openid）及本次登录的会话密钥（session_key），用户数据的加解密通信需要依赖会话密钥完成。</p></blockquote><ul><li>success：成功的回调函数，参数如下:<ul><li>errMsg：调用结果</li><li>code：用户允许登陆后，回调内容回带上code（有效期五分钟），需要将code发送到开发者服务器后台，使用code换取session_key API，将code换成openid和session_key。</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 这里建议调用后台接口进行登录转换、保存工作</span>        wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             url<span class="token punctuation">:</span><span class="token string">'https://myserver.com/login'</span><span class="token punctuation">,</span>            data<span class="token punctuation">{</span>                    code<span class="token punctuation">:</span>res<span class="token punctuation">.</span>code            <span class="token punctuation">}</span> <span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>loginInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登陆成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、获取用户信息"><a href="#2、获取用户信息" class="headerlink" title="2、获取用户信息"></a>2、获取用户信息</h5><blockquote><p>code换取session_key，调用wx.login()获取code后我们需要在5分钟内用code换取session_key、openid等用户信息，为此官方暴露了一个HTTP接口，可通过wx.request()调用接口，获取信息，但session_key是对用户数据进行加密签名的密钥。</p><p>为了自身应用安全，尽量使用后台服务器调用这个接口，保存登录信息，返回给小程序前台，接口地址如下：</p><pre class=" language-text"><code class="language-text">https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code</code></pre></blockquote><p><strong>请求参数</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">小程序 appId</td></tr><tr><td align="left">secret</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">小程序 appSecret</td></tr><tr><td align="left">js_code</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">登录时获取的 code</td></tr><tr><td align="left">grant_type</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">授权类型，此处只需填写 authorization_code</td></tr></tbody></table><p><strong>接口返回参数</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">openid</td><td align="left">string</td><td align="left">用户唯一标识</td></tr><tr><td align="left">session_key</td><td align="left">string</td><td align="left">会话密钥</td></tr><tr><td align="left">unionid</td><td align="left">string</td><td align="left">用户在开放平台的唯一标识符，在满足 UnionID 下发条件的情况下会返回，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html">UnionID 机制说明</a>。</td></tr><tr><td align="left">errcode</td><td align="left">number</td><td align="left">错误码</td></tr><tr><td align="left">errmsg</td><td align="left">string</td><td align="left">错误信息</td></tr><tr><td align="left">js_code</td><td align="left">string</td><td align="left">调用wx.login()登录时获取的code</td></tr><tr><td align="left">grant_type</td><td align="left">string</td><td align="left">填写为“authorization_code”</td></tr></tbody></table><p><strong>errcode 的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">系统繁忙，此时请开发者稍候再试</td></tr><tr><td align="left">0</td><td align="left">请求成功</td></tr><tr><td align="left">40029</td><td align="left">code 无效</td></tr><tr><td align="left">45011</td><td align="left">频率限制，每个用户每分钟100次</td></tr></tbody></table><p><strong>返回值示例代码</strong></p><pre class=" language-json"><code class="language-json">// 正常返回的JSON数据包<span class="token punctuation">{</span>     <span class="token property">"openid"</span><span class="token operator">:</span><span class="token string">"OPENID"</span><span class="token punctuation">,</span>    <span class="token property">"session_key"</span><span class="token operator">:</span><span class="token string">"SESSIONKEY"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span><span class="token number">2592000</span><span class="token punctuation">}</span> // 错误时返回JSON数据包（示例为Code无效）<span class="token punctuation">{</span>     <span class="token property">"errcode"</span><span class="token operator">:</span><span class="token number">40029</span><span class="token punctuation">,</span>    <span class="token property">"errmsg"</span><span class="token operator">:</span><span class="token string">"invalid code"</span><span class="token punctuation">}</span> </code></pre><h5 id="3、登录态维护"><a href="#3、登录态维护" class="headerlink" title="3、登录态维护"></a>3、登录态维护</h5><blockquote><p>开发中，每个项目应该利用后台自己维护登录态，不能直接把session_key、openid等字段作为用户的标识或者session的表示，具体使用可参考后面案例。</p></blockquote><h5 id="4、wx-checkSession"><a href="#4、wx-checkSession" class="headerlink" title="4、wx.checkSession"></a>4、wx.checkSession</h5><blockquote><p>检查登录态是否过期</p></blockquote><ul><li>success：接口调用成功的回调函数，登录态未过期</li><li>fail：失败，登录态过期</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">checkSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 登录态未过期</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    fail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 登录态过期</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-8-2、用户信息"><a href="#5-8-2、用户信息" class="headerlink" title="5.8.2、用户信息"></a>5.8.2、用户信息</h4><blockquote><p>获取用户信息</p></blockquote><ul><li>wx.getUserInfo(Object)<ul><li>success：接口成功，参数属性如下：<ul><li>userInfo：用户信息对象，不包含openid等敏感信息</li><li>rawData：用于计算签名</li><li>signature：使用sha1（rawData+sessionkey）得到的字符串，用于校验用户信息</li><li>encryptedData：包括敏感数据在内的完整用户信息的加密数据</li><li>iv：加密算法的初始向量</li></ul></li><li>fail：失败</li><li>complete：结束</li></ul></li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 打印出用户信息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>对encryptedData解密后可得到完整的用户信息，如接口 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">wx.getUserInfo</a> 敏感数据当中的 watermark：<img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706132510031.png" alt="image-20200706132510031" loading="lazy"></p><h5 id="加密数据解密算法"><a href="#加密数据解密算法" class="headerlink" title="加密数据解密算法"></a>加密数据解密算法</h5><p>接口如果涉及敏感数据（如<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">wx.getUserInfo</a>当中的 openId 和 unionId），接口的明文内容将不包含这些敏感数据。开发者如需要获取敏感数据，需要对接口返回的<strong>加密数据(encryptedData)</strong> 进行对称解密。 解密算法如下：</p><ol><li>对称解密使用的算法为 AES-128-CBC，数据采用PKCS#7填充。</li><li>对称解密的目标密文为 Base64_Decode(encryptedData)。</li><li>对称解密秘钥 aeskey = Base64_Decode(session_key), aeskey 是16字节。</li><li>对称解密算法初始向量 为Base64_Decode(iv)，其中iv由数据接口返回。</li></ol><p>微信官方提供了多种编程语言的示例代码（（<a href="https://res.wx.qq.com/wxdoc/dist/assets/media/aes-sample.eae1f364.zip">点击下载</a>）。每种语言类型的接口名字均一致。调用方式可以参照示例。</p><p>另外，为了应用能校验数据的有效性，会在敏感数据加上数据水印( watermark )</p><p><strong>watermark参数说明：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">String</td><td align="left">敏感数据归属 appId，开发者可校验此参数与自身 appId 是否一致</td></tr><tr><td align="left">timestamp</td><td align="left">Int</td><td align="left">敏感数据获取的时间戳, 开发者可以用于数据时效性校验</td></tr></tbody></table><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"openId"</span><span class="token operator">:</span> <span class="token string">"OPENID"</span><span class="token punctuation">,</span>    <span class="token property">"nickName"</span><span class="token operator">:</span> <span class="token string">"NICKNAME"</span><span class="token punctuation">,</span>    <span class="token property">"gender"</span><span class="token operator">:</span> GENDER<span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"CITY"</span><span class="token punctuation">,</span>    <span class="token property">"province"</span><span class="token operator">:</span> <span class="token string">"PROVINCE"</span><span class="token punctuation">,</span>    <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"COUNTRY"</span><span class="token punctuation">,</span>    <span class="token property">"avatarUrl"</span><span class="token operator">:</span> <span class="token string">"AVATARURL"</span><span class="token punctuation">,</span>    <span class="token property">"unionId"</span><span class="token operator">:</span> <span class="token string">"UNIONID"</span><span class="token punctuation">,</span>    <span class="token property">"watermark"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>         <span class="token property">"appid"</span><span class="token operator">:</span><span class="token string">"APPID"</span><span class="token punctuation">,</span>        <span class="token property">"timestamp"</span><span class="token operator">:</span>TIMESTAMP    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h4 id="5-8-3、微信支付"><a href="#5-8-3、微信支付" class="headerlink" title="5.8.3、微信支付"></a>5.8.3、微信支付</h4><blockquote><p>用于发起微信支付</p></blockquote><p><strong>wx.requesetPayment(Object):</strong></p><ul><li>timestamp：时间戳，从1970年1月1日00:00:00到现在的秒数</li><li>nonceStr：随机字符串，长度为32个字符以下</li><li>package：统一下单接口返回的prepay_id参数值，提交格式如：prepay_id = *</li><li>signType：签名算法</li><li>paySign：签名</li><li>success：成功</li><li>fail：失败</li><li>complete：结束</li></ul><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">requestPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token string">'timeStamp'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'nonceStr'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-8-4、模板信息（已废弃）"><a href="#5-8-4、模板信息（已废弃）" class="headerlink" title="5.8.4、模板信息（已废弃）"></a>5.8.4、模板信息（已废弃）</h4><blockquote><p>类似微信支付后推送的支付信息，在小程序中我们也能使用模板给用户推送信息</p></blockquote><h5 id="1、调用模板消息接口"><a href="#1、调用模板消息接口" class="headerlink" title="1、调用模板消息接口"></a>1、调用模板消息接口</h5><blockquote><p>发送模板信息需要通过POST方式调用微信后台接口，可以时前台调用也可以后台，接口地址：</p><pre class=" language-text"><code class="language-text">https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</code></pre></blockquote><p><strong>请求参数</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">接口调用凭证</a></td></tr><tr><td align="left">touser</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">接收者（用户）的 openid</td></tr><tr><td align="left">template_id</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">所需下发的模板消息的id</td></tr><tr><td align="left">page</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例index?foo=bar）。该字段不填则模板无跳转。</td></tr><tr><td align="left">form_id</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">表单提交场景下，为 submit 事件带上的 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">formId</a>；支付场景下，为本次支付的 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/payment/wx.requestPayment.html">prepay_id</a></td></tr><tr><td align="left">data</td><td align="left">Object</td><td align="left"></td><td align="left">否</td><td align="left">模板内容，不填则下发空模板。具体格式请参考示例。</td></tr><tr><td align="left">emphasis_keyword</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">模板需要放大的关键词，不填则默认无放大</td></tr></tbody></table><p><strong>请求示例</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"touser"</span><span class="token operator">:</span> <span class="token string">"OPENID"</span><span class="token punctuation">,</span>  <span class="token property">"template_id"</span><span class="token operator">:</span> <span class="token string">"TEMPLATE_ID"</span><span class="token punctuation">,</span>  <span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span>  <span class="token property">"form_id"</span><span class="token operator">:</span> <span class="token string">"FORMID"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"keyword1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"339208499"</span>      <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token property">"keyword2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2020年07月06日 12:30"</span><span class="token punctuation">,</span>          <span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"#faf"</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">,</span>  <span class="token property">"emphasis_keyword"</span><span class="token operator">:</span> <span class="token string">"keyword1.DATA"</span><span class="token punctuation">}</span> </code></pre><p><strong>返回示例</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"errcode"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property">"errmsg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">}</span> </code></pre><p><strong>errcode 的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">40037</td><td align="left">template_id不正确</td></tr><tr><td align="left">41028</td><td align="left">form_id不正确，或者过期</td></tr><tr><td align="left">41029</td><td align="left">form_id已被使用</td></tr><tr><td align="left">41030</td><td align="left">page不正确</td></tr><tr><td align="left">45009</td><td align="left">接口调用超过限额（目前默认每个帐号日调用限额为100万）</td></tr></tbody></table><h4 id="5-8-5、订阅信息"><a href="#5-8-5、订阅信息" class="headerlink" title="5.8.5、订阅信息"></a>5.8.5、订阅信息</h4><blockquote><p>用于代替模板信息</p><p>消息能力是小程序能力中的重要组成，为开发者提供了订阅消息能力，以便实现服务的闭环和更优的体验。</p><ul><li>订阅消息推送位置：服务通知</li><li>订阅消息下发条件：用户自主订阅</li><li>订阅消息卡片跳转能力：点击查看详情可跳转至该小程序的页面</li></ul></blockquote><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/request-subscribe-message.3851318e.jpg" alt="img" loading="lazy"></p><p><strong>使用说明</strong></p><h5 id="1、获取模板ID"><a href="#1、获取模板ID" class="headerlink" title="1、获取模板ID"></a>1、获取模板ID</h5><p>在微信公众平台手动配置获取模板 ID：登录 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a> 获取模板，如果没有合适的模板，可以申请添加新模板，审核通过后可使用。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706135458629.png" alt="image-20200706135458629" loading="lazy"></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706135735495.png" alt="image-20200706135735495" loading="lazy"></p><p><strong>复制ID</strong></p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706135841297.png" alt="image-20200706135841297" loading="lazy"></p><h5 id="2、获取下发权限"><a href="#2、获取下发权限" class="headerlink" title="2、获取下发权限"></a>2、获取下发权限</h5><blockquote><p>详见小程序端消息订阅接口 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">wx.requestSubscribeMessage</a></p></blockquote><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">tmplIds</td><td align="left">Array</td><td align="left"></td><td align="left">是</td><td align="left">需要订阅的消息模板的id的集合，一次调用最多可订阅3条消息（注意：iOS客户端7.0.6版本、Android客户端7.0.7版本之后的一次性订阅/长期订阅才支持多个模板消息，iOS客户端7.0.5版本、Android客户端7.0.6版本之前的一次订阅只支持一个模板消息）消息模板id在[微信公众平台(mp.weixin.qq.com)-功能-订阅消息]中配置</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class=" language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">requestSubscribeMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     tmplIds<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    success <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h5 id="3、调用接口下发订阅消息"><a href="#3、调用接口下发订阅消息" class="headerlink" title="3、调用接口下发订阅消息"></a>3、调用接口下发订阅消息</h5><blockquote><p>详见服务端消息发送接口 <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/subscribe-message/subscribeMessage.send.html">subscribeMessage.send</a></p></blockquote><p>使用HTTPS 调用，请求地址：</p><pre class=" language-text"><code class="language-text">https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token=ACCESS_TOKEN</code></pre><p><strong>请求参数</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">接口调用凭证</a></td></tr><tr><td align="left">touser</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">接收者（用户）的 openid</td></tr><tr><td align="left">template_id</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">所需下发的订阅模板id</td></tr><tr><td align="left">page</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">点击模板卡片后的跳转页面，仅限本小程序内的页面。支持带参数,（示例index?foo=bar）。该字段不填则模板无跳转。</td></tr><tr><td align="left">data</td><td align="left">Object</td><td align="left"></td><td align="left">是</td><td align="left">模板内容，格式形如 { “key1”: { “value”: any }, “key2”: { “value”: any } }</td></tr><tr><td align="left">miniprogram_state</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">跳转小程序类型：developer为开发版；trial为体验版；formal为正式版；默认为正式版</td></tr><tr><td align="left">lang</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">进入小程序查看”的语言类型，支持zh_CN(简体中文)、en_US(英文)、zh_HK(繁体中文)、zh_TW(繁体中文)，默认为zh_CN</td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">errcode</td><td align="left">number</td><td align="left">错误码</td></tr><tr><td align="left">errmsg</td><td align="left">string</td><td align="left">错误信息</td></tr></tbody></table><p><strong>接口限制</strong></p><p>次数限制：开通支付能力的是3kw/日，没开通的是1kw/日。</p><p><strong>示例代码</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>     <span class="token property">"touser"</span><span class="token operator">:</span> <span class="token string">"OPENID"</span><span class="token punctuation">,</span>    <span class="token property">"template_id"</span><span class="token operator">:</span> <span class="token string">"TEMPLATE_ID"</span><span class="token punctuation">,</span>    <span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span>    <span class="token property">"miniprogram_state"</span><span class="token operator">:</span><span class="token string">"developer"</span><span class="token punctuation">,</span>    <span class="token property">"lang"</span><span class="token operator">:</span><span class="token string">"zh_CN"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"number01"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"339208499"</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span>        <span class="token property">"date01"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2015年01月05日"</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span>        <span class="token property">"site01"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"TIT创意园"</span>        <span class="token punctuation">}</span>  <span class="token punctuation">,</span>        <span class="token property">"site02"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"广州市新港中路397号"</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h4 id="5-8-6、客服消息"><a href="#5-8-6、客服消息" class="headerlink" title="5.8.6、客服消息"></a>5.8.6、客服消息</h4><blockquote><p>通过点击<code>&lt;cantact-button/&gt;</code>组件进入客服会话系统，用户发送的消息回以POST方式传递给开发者填写的URL</p></blockquote><h5 id="1、接入指引"><a href="#1、接入指引" class="headerlink" title="1、接入指引"></a>1、接入指引</h5><blockquote><p>接入微信小程序消息服务需要2步：</p><ol><li>填写服务器配置</li><li>开发者服务器接受请求并返回指定信息，验证服务器地址有效性</li></ol><p>参考官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/server-ability/message-push.html">https://developers.weixin.qq.com/miniprogram/dev/framework/server-ability/message-push.html</a></p></blockquote><h6 id="（1）填写服务器配置"><a href="#（1）填写服务器配置" class="headerlink" title="（1）填写服务器配置"></a>（1）填写服务器配置</h6><p>登录<a href="https://mp.weixin.qq.com/">小程序后台</a>后，在「开发」-「开发设置」-「消息推送」中，管理员扫码启用消息服务，填写服务器地址（URL）、令牌（Token） 和 消息加密密钥（EncodingAESKey）等信息。</p><ul><li>URL: 开发者用来接收微信消息和事件的接口 URL。开发者所填写的URL 必须以 http:// 或 https:// 开头，分别支持 80 端口和 443 端口。</li><li>Token: 可由开发者可以任意填写，用作生成签名（该 Token 会和接口 URL 中包含的 Token 进行比对，从而验证安全性）。</li><li>EncodingAESKey: 由开发者手动填写或随机生成，将用作消息体加解密密钥。</li></ul><p>同时，开发者可选择消息加解密方式：明文模式（默认）、兼容模式和安全模式。可以选择消息数据格式：XML 格式（默认）或 JSON 格式。</p><p><img src="/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20200706141338222.png" alt="image-20200706141338222" loading="lazy"></p><p>模式的选择与服务器配置在提交后都会立即生效，请开发者谨慎填写及选择。切换加密方式和数据格式需要提前配置好相关代码，详情请参考 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318479&token=&lang=zh_CN">消息加解密说明</a></p><h6 id="（2）验证服务器地址有效性"><a href="#（2）验证服务器地址有效性" class="headerlink" title="（2）验证服务器地址有效性"></a>（2）验证服务器地址有效性</h6><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带参数如下表所示：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">signature</td><td align="left">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td></tr><tr><td align="left">timestamp</td><td align="left">时间戳</td></tr><tr><td align="left">nonce</td><td align="left">随机数</td></tr><tr><td align="left">echostr</td><td align="left">随机字符串</td></tr></tbody></table><p>开发者通过检验 signature 对请求进行校验（下面有校验方式）。若确认此次 GET 请求来自微信服务器，请原样返回 echostr 参数内容，则接入生效，成为开发者成功，否则接入失败。加密/校验流程如下：</p><ol><li>将token、timestamp、nonce三个参数进行字典序排序</li><li>将三个参数字符串拼接成一个字符串进行sha1加密</li><li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li></ol><p>验证URL有效性成功后即接入生效，成为开发者。</p><p>检验signature的PHP示例代码：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">checkSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token variable">$signature</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"signature"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$timestamp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"timestamp"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$nonce</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"nonce"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token constant">TOKEN</span><span class="token punctuation">;</span>    <span class="token variable">$tmpArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token variable">$timestamp</span><span class="token punctuation">,</span> <span class="token variable">$nonce</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$tmpArr</span><span class="token punctuation">,</span> <span class="token constant">SORT_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tmpStr</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span> <span class="token variable">$tmpArr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tmpStr</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span> <span class="token variable">$tmpStr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$tmpStr</span> <span class="token operator">==</span> <span class="token variable">$signature</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h5 id="2、接收消息和时间"><a href="#2、接收消息和时间" class="headerlink" title="2、接收消息和时间"></a>2、接收消息和时间</h5><blockquote><p>微信服务器在将用户的消息发给开发者服务器地址后，微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。如果在调试中，发现用户无法收到响应的消息，可以检查是否消息处理超时。关于重试的消息排重，有 msgid 的消息推荐使用 msgid 排重。事件类型消息推荐使用 FromUserName + CreateTime 排重。</p></blockquote><p>服务器收到请求必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试，否则，将出现严重的错误提示。详见下面说明：</p><ol><li>直接回复success（推荐方式）</li><li>直接回复空串（指字节长度为0的空字符串，而不是结构体中content字段的内容为空）</li><li>若接口文档有指定返回内容，应按文档说明返回</li></ol><p>对于客服消息，一旦遇到以下情况，微信会在小程序会话中向用户下发系统提示“该小程序客服暂时无法提供服务，请稍后再试”：</p><ol><li>开发者在5秒内未回复任何内容</li><li>开发者回复了异常数据</li></ol><p>接收的消息按类型可分为3类：进入会话事件、文本消息、图片消息。</p><h4 id="5-8-7、分享"><a href="#5-8-7、分享" class="headerlink" title="5.8.7、分享"></a>5.8.7、分享</h4><blockquote><p>小程序分享页面需要在Page中定义onShareAppMessage函数，设置该页面分享信息。只有定义了此事件函数，右上角才会显示”分享“按钮。</p></blockquote><ul><li>title：分享标题，默认为小程序名称</li><li>desc：分享描述，默认为当前小程序名称</li><li>path：分享路径，必须是以 ” / “开头且在app.json中已注册的路径，默认为当前页面path</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     onShareAppMessage<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">{</span>             title<span class="token punctuation">:</span><span class="token string">'自定义分享标题'</span><span class="token punctuation">,</span>            desc<span class="token punctuation">:</span><span class="token string">'自定义分享描述'</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span><span class="token string">'/path/home?tab=cart'</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h4 id="5-8-8、获取二维码"><a href="#5-8-8、获取二维码" class="headerlink" title="5.8.8、获取二维码"></a>5.8.8、获取二维码</h4><blockquote><p>wxacode.createQRCode获取小程序二维码，适用于需要的码数量较少的业务场景。<strong>通过该接口生成的小程序码，永久有效，有数量限制</strong>，详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html">获取二维码</a>。</p></blockquote><p><strong>请求地址</strong></p><pre class=" language-text"><code class="language-text">https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=ACCESS_TOKEN</code></pre><p><strong>请求参数</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">接口调用凭证</a></td></tr><tr><td align="left">path</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">扫码进入的小程序页面路径，最大长度 128 字节，不能为空；对于小游戏，可以只传入 query 部分，来实现传参效果，如：传入 “?foo=bar”，即可在 <code>wx.getLaunchOptionsSync</code> 接口中的 query 参数获取到 <code>{ foo:&quot;bar&quot;} </code>。</td></tr><tr><td align="left">width</td><td align="left">number</td><td align="left">430</td><td align="left">否</td><td align="left">二维码的宽度，单位 px。最小 280px，最大 1280px</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"path"</span><span class="token operator">:</span><span class="token string">"page/index/index"</span><span class="token punctuation">,</span> <span class="token property">"width"</span><span class="token operator">:</span><span class="token number">430</span><span class="token punctuation">}</span> </code></pre><h3 id="5-9、动态修改标题"><a href="#5-9、动态修改标题" class="headerlink" title="5.9、动态修改标题"></a>5.9、动态修改标题</h3><pre class=" language-js"><code class="language-js">quwei<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">setNavigationBarTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         title<span class="token punctuation">:</span> <span class="token string">'趣味表情'</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2020/08/08/MyBatisPlus/"/>
      <url>/2020/08/08/MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h2><h2 id="1、MyBatisPlus概述"><a href="#1、MyBatisPlus概述" class="headerlink" title="1、MyBatisPlus概述"></a>1、MyBatisPlus概述</h2><p>官方网址：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p><p><img src="/2020/08/08/MyBatisPlus/relationship-with-mybatis.png" alt="img" loading="lazy"></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，<strong>在 MyBatis 的基础上只做增强不做改变</strong>，为简化开发、提高效率而生。可以节省大量的代码和时间。</p><blockquote><p>特性：</p></blockquote><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作，BaseMapper</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求，以后简单的CRUD操作就不用自己编写了。</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用，自动生成代码</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><p>地址：<a href="https://mp.baomidou.com/guide/quick-start.html#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">https://mp.baomidou.com/guide/quick-start.html#快速开始</a></p><p>使用第三方组件：</p><ol><li>导入对应的依赖</li><li>研究依赖如何配置</li><li>代码如何编写</li><li>提高扩展技术能力</li></ol><blockquote><p>步骤</p></blockquote><ol><li><p>创建数据库<code>mybatis_plus</code></p><p><img src="/2020/08/08/MyBatisPlus/image-20200806210255914.png" alt="image-20200806210255914" loading="lazy"></p></li><li><p>创建<code>user</code>表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 真实开发中，还需要version（乐观锁），deleted（逻辑删除）、gmt_create、gmt_modified</span></code></pre></li><li><p>增加表中的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写项目，创建一个<code>mybaitis_plus</code>的springboot项目，导入web模板</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806211019216.png" alt="image-20200806211019216" loading="lazy"></p></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span><span class="token comment" spellcheck="true">&lt;!-- 是自己开发的，并非官方的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 先不使用最新版的，新版省略了一些东西 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>说明：我们使用mybatis-plus可以节省我们大量的代码，尽量不要同时导入mybatis和mybatis-plus会出现版本问题</p></li><li><p>编写配置文件，<strong>注意不同版本的mysql配置，选择下面一个即可</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># mysql 5 驱动不同com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mybatis://localhost:3306/mybatis_plus?useSSL=false&amp;userUnicode=true%characterEncoding=UTF-8</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># mysql 8 驱动不同com.mysql.cj.jdbc.Driver可以兼容低版本，需要增加时区 serverTimezone=CMT</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><p>传统方式：pojo-dao(连接mybatis，配置mapper.xml文件)-service-controller</p><p><strong>使用Mybatis-plus之后：pojo-mapper接口-使用</strong></p></li><li><p>在IDEA中连接数据库</p></li><li><p>创建实体类<code>User</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>创建<code>UserMapper</code>接口，继承基本的类<code>BaseMapper&lt;T&gt;</code>，至此所有的CRUD操作都已经编写完成了，不需要像以前一样配置一大堆文件了，加上注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span> <span class="token comment" spellcheck="true">// 代表这是一个持久层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在主启动类上增加扫描注解，让我们的mapper接口生效<code>@MapperScan(&quot;com.xj.mapper&quot;)</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扫描mapper文件夹</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xj.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MybatisPlusApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybaitisPlusApplicationTests</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 查询全部用户，selectList的参数wrapper是条件构造器，这里暂时不用为null</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用语法糖遍历</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200806215232165.png" alt="image-20200806215232165" loading="lazy"></p><p>发现我们没有编写mapper.xml却有这么多的实现方法</p></li><li><p>测试成功，查询出全部的信息</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806220343092.png" alt="image-20200806220343092" loading="lazy"></p></li></ol><h2 id="3、配置日志"><a href="#3、配置日志" class="headerlink" title="3、配置日志"></a>3、配置日志</h2><p>我们所有的sql现在是不可见的，希望看到它是怎么执行的，所以需要配置日志</p><ol><li><p>编写配置日志</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置日志，使用默认的即可</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre></li><li><p>重新运行测试类</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806221215006.png" alt="image-20200806221215006" loading="lazy"></p><p>配置完毕日志之后，后面的学习就需要注意这个自动生成的SQL</p></li></ol><h2 id="4、CRUD扩展"><a href="#4、CRUD扩展" class="headerlink" title="4、CRUD扩展"></a>4、CRUD扩展</h2><h3 id="4-1、Insert插入"><a href="#4-1、Insert插入" class="headerlink" title="4.1、Insert插入"></a>4.1、Insert插入</h3><ol><li><p>编写测试类进行插入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 受影响的行数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 发现会自动帮我们生成id</span><span class="token punctuation">}</span> </code></pre></li><li><p>结果：我们没有设置id，但id却自动生成了（如果id为0的话需要注意将实体类中的id类型设置为<code>Long</code>）</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806222831871.png" alt="image-20200806222831871" loading="lazy"></p></li></ol><blockquote><p>数据库插入的id默认值为：全局唯一的id</p></blockquote><h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><p>分布式系统唯一id生成：uuid、自增id、<strong>雪花算法</strong>、Redise</p><p><strong>雪花算法：</strong>（Twitter的SnowFlake）</p><ul><li>SnowFlake是Twitter开源的分布式ID生成算法，结果是一个Long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5bit是数据中心，5bit是机器ID），12bit是毫秒的流水号（意味着每个节点在每毫秒可以产生4096个ID），最后还有一个符号位，永远是0。可以保证全球唯一！</li></ul><p><img src="/2020/08/08/MyBatisPlus/13382703-b64e38457ddd13e2.webp" alt="img" loading="lazy"></p><blockquote><p>设置生成策略</p></blockquote><ol><li><p>在实体类中增加注解修改</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 默认的全局唯一ID</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>Type还有如下类型</p><pre class=" language-java"><code class="language-java"><span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 主键自增</span><span class="token function">NONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 不使用</span><span class="token function">INPUT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 手动输入</span><span class="token function">ID_WORKER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 默认的全局id</span><span class="token function">UUID</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 全局位以id uuid</span><span class="token function">ID_WORKER_STR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ID_WORKER的字符串表示法</span></code></pre></li></ol><blockquote><p>主键自增</p></blockquote><p>我们需要配置主键自增：</p><ol><li><p>实体类上增加注解<code>@TableId(type = IdType.AUTO)</code></p></li><li><p>数据库字段一定要自增！不然会报错（报错也可能是因为下图修改之后没保存）</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806224732470.png" alt="image-20200806224732470" loading="lazy"></p></li><li><p>启动测试类，进行插入数据</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806225252664.png" alt="image-20200806225252664" loading="lazy"></p><p>id在原有的基础上实现加1</p></li></ol><blockquote><p>手动输入注解</p></blockquote><p>使用之后需要手动设置id</p><ol><li><p>修改注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试，需要设置id的值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 受影响的行数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 发现会自动帮我们生成id</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200806225705560.png" alt="image-20200806225705560" loading="lazy"></p></li></ol><h3 id="4-2、Update更新"><a href="#4-2、Update更新" class="headerlink" title="4.2、Update更新"></a>4.2、Update更新</h3><ol><li><p>编写测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200806230411493.png" alt="image-20200806230411493" loading="lazy"></p></li><li><p>增加修改的属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>会根据id修改其他的配置信息</p><p><img src="/2020/08/08/MyBatisPlus/image-20200806230554862.png" alt="image-20200806230554862" loading="lazy"></p></li></ol><h3 id="4-3、自动填充"><a href="#4-3、自动填充" class="headerlink" title="4.3、自动填充"></a>4.3、自动填充</h3><p>创建时间、修改时间！这些的操作都是自动化完成的，我们不希望手动更新！</p><p>阿里巴巴开发手册：所有的数据库表：gmt_create、gmt_modified（创建时间和修改时间）几乎所有的表都要配置上，而且需要自动化！</p><blockquote><p>方式一：数据库级别(工作中不允许修改数据库)</p></blockquote><ol><li><p>在表中新增字段 <code>create_time</code>，<code>update_time</code>，并设置<code>update_time</code>根据时间戳更新，且默认值为<code>CURRENT_TIMESTAMP</code></p><p><img src="/2020/08/08/MyBatisPlus/image-20200808112432188.png" alt="image-20200808112432188" loading="lazy"></p></li><li><p>再次测试插入方法，我们需要先把<strong>实体类同步</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre></li><li><p>运行插入数据之后，运行更新数据的程序，查看数据库</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808112555237.png" alt="image-20200808112555237" loading="lazy"></p></li></ol><blockquote><p>方式二：代码级别</p></blockquote><ol><li><p>删除数据库的默认值</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808113744165.png" alt="image-20200808113744165" loading="lazy"></p></li><li><p>在实体类的属性上添加注解填充</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 插入时填充</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 插入和更新时填充</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>注解有如下类型可选</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> FieldFill <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * 默认不处理     */</span>    DEFAULT<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 插入填充字段     */</span>    INSERT<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 更新填充字段     */</span>    UPDATE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 插入和更新填充字段     */</span>    INSERT_UPDATE<span class="token punctuation">}</span> </code></pre></li><li><p>创建<code>handler</code>目录，并创建处理类<code>MyMetaObjectHandler</code>实现<code>MetaObjectHandler</code></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>         log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String fieldName, Object fieldVal, MetaObject metaObject</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>         log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>执行插入数据</p></li><li><p>执行更新数据</p></li><li><p>查看数据库，测试成功</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808120020327.png" alt="image-20200808120020327" loading="lazy"></p></li></ol><h3 id="4-4、乐观锁"><a href="#4-4、乐观锁" class="headerlink" title="4.4、乐观锁"></a>4.4、乐观锁</h3><blockquote><p>在面试过程中，经常会被问到乐观锁，悲观锁！</p></blockquote><ul><li>乐观锁：总是认为不会出现问题，无论干什么都不去加锁！如果出现问题，再次更新值测试！</li><li>悲观锁：总是认为总是会出现问题，无论干什么都会加锁！再去操作！</li></ul><p><strong>乐观锁实现方式：</strong></p><ol><li>取出记录时，获取当前 version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ol><pre class=" language-sql"><code class="language-sql">乐观锁：<span class="token number">1</span>、先查询，获得版本号 version <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- A</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">"kuangshen"</span><span class="token punctuation">,</span> version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- B 线程抢先完成，这个时候 version = 2，会导致 A 修改失败！</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">"kuangshen"</span><span class="token punctuation">,</span> version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">1</span></code></pre><blockquote><p>测试一下MP的乐观锁插件</p></blockquote><ol><li><p>给数据库中增加version字段</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808121920916.png" alt="image-20200808121920916" loading="lazy"></p></li><li><p>我们实体类加对应的字段</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span> <span class="token comment" spellcheck="true">//乐观锁Version注解</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre></li><li><p>注册组件，创建config目录，创建<code>MyBatisPlusConfig</code>配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扫描mapper文件夹，可以把主启动类上的这个注解放这里</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xj.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 注册乐观锁插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>重新插入一条数据</p></li><li><p>测试一下成功的，这个肯定可以修改成功数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试乐观锁成功！</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1、查询用户信息</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>9L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、修改用户信息</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、执行更新操作</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808122932014.png" alt="image-20200808122932014" loading="lazy"></p></li><li><p>测试多线程冲突的，因为都获取了相同的version，所以在第二次提交的时候version条件就会不符合，所以提交失败，故结果为<code>晓江3</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试乐观锁失败！多线程下</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLocker2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 线程 1</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟另外一个线程执行了插队操作</span>    User user2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋锁来多次尝试提交！</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果没有乐观锁就会覆盖插队线程的值！</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808123036647.png" alt="image-20200808123036647" loading="lazy"></p></li></ol><h3 id="4-5、查询操作"><a href="#4-5、查询操作" class="headerlink" title="4.5、查询操作"></a>4.5、查询操作</h3><ol><li><p>根据单个id查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>根据批量id查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试批量查询！</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByBatchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>使用map进行自定义查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 按条件查询之一使用map操作</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义要查询</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808140047329.png" alt="image-20200808140047329" loading="lazy"></p></li></ol><h3 id="4-6、分页查询"><a href="#4-6、分页查询" class="headerlink" title="4.6、分页查询"></a>4.6、分页查询</h3><ol><li>原始的 limit 进行分页</li><li>pageHelper 第三方插件</li><li>MP 其实也内置了分页插件！</li></ol><blockquote><p>使用步骤</p></blockquote><ol><li><p>在<code>MyBatisPlusConfig</code>配置类中配置拦截器组件即可</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页插件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>直接使用Page对象即可</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试分页查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 参数一：当前页</span>    <span class="token comment" spellcheck="true">// 参数二：页面大小</span>    <span class="token comment" spellcheck="true">// 使用了分页插件之后，所有的分页操作也变得简单的！</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808141119644.png" alt="image-20200808141119644" loading="lazy"></p></li><li><p>使用<code>page.getRecords()</code>获取查询的数据，除此之外还有以下属性可以查询</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808141216742.png" alt="image-20200808141216742" loading="lazy"></p></li></ol><h3 id="4-7、普通删除"><a href="#4-7、普通删除" class="headerlink" title="4.7、普通删除"></a>4.7、普通删除</h3><ol><li><p>通过id删除一个</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>通过id批量删除</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过id批量删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span>2L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>自定义删除</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过map删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="4-8、逻辑删除"><a href="#4-8、逻辑删除" class="headerlink" title="4.8、逻辑删除"></a>4.8、逻辑删除</h3><blockquote><p>物理删除：从数据库中直接移除</p><p>逻辑删除：在数据库中没有被移除，而是通过一个变量来让他失效！deleted = 0 =&gt; deleted = 1</p></blockquote><p>管理员可以查看被删除的记录！防止数据丢失，类似回收站</p><blockquote><p>使用步骤</p></blockquote><ol><li><p>在数据库中增加一个deleted字段</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808142455822.png" alt="image-20200808142455822" loading="lazy"></p></li><li><p>实体类中增加属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span> <span class="token comment" spellcheck="true">//逻辑删除</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre></li><li><p>在配置类中增加配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 逻辑删除组件！</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在配置类中配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置逻辑删除</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre></li><li><p>测试删除</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeletedById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808142959004.png" alt="image-20200808142959004" loading="lazy"></p><p>而且1号用户依然存在，只是deleted属性变为1，所以将会查询不到</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808143222431.png" alt="image-20200808143222431" loading="lazy"></p></li></ol><h2 id="5、性能分析插件"><a href="#5、性能分析插件" class="headerlink" title="5、性能分析插件"></a>5、性能分析插件</h2><p>我们在平时的开发中，会遇到一些慢sql。测试！ druid,,,,,<br>作用：性能分析拦截器，用于输出每条 SQL 语句及其执行时间<br>MP也提供性能分析插件，如果超过这个时间就停止运行！</p><blockquote><p>使用方法</p></blockquote><ol><li><p>导入插件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * SQL执行效率插件     */</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 dev test 环境开启，保证我们的效率</span><span class="token keyword">public</span> PerformanceInterceptor <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     PerformanceInterceptor performanceInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setMaxTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ms设置sql执行的最大时间，如果超过了则不执行</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否格式化代码</span>    <span class="token keyword">return</span> performanceInterceptor<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在SpringBoot中配置环境为dev或者 test 环境！</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置工作环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre></li><li><p>测试使用，运行之前的查询代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询全部用户，selectList的参数wrapper是条件构造器，这里暂时不用为null</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用语法糖遍历</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/08/MyBatisPlus/image-20200808144804289.png" alt="image-20200808144804289" loading="lazy"></p></li></ol><p>使用性能分析插件，可以方便找出慢sql，帮助我们提高效率！</p><h2 id="6、条件构造器"><a href="#6、条件构造器" class="headerlink" title="6、条件构造器"></a>6、条件构造器</h2><p>十分重要：Wrapper<br>我们写一些复杂的sql就可以使用它来替代！</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808150343664.png" alt="image-20200808150343664" loading="lazy"></p><ol><li><p>查询不为空isNotNull，且大于某一个值的数据ge</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper        <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 和我们刚才学习的map对比一下</span><span class="token punctuation">}</span> </code></pre></li><li><p>查询指定的数据eq</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询名字</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"晓江1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查询一个数据，出现多个结果使用List或者 Map</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>查询范围内的between</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询年龄在 20 ~ 30 岁之间的用户</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 区间</span>    Integer count <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查询结果数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>模糊查询notLike，likeRight左边以什么开头的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模糊查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询年龄在 20 ~ 30 岁之间的用户</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 左和右 t%</span>    wrapper        <span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>自定义查询sql，使用inSql</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// id 在子查询中查出来</span>    wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"select id from user where id&lt;3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectObjs</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>进行排序</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试六</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过id进行排序</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><p>其余的可以参考官网进行测试：<a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper">https://mp.baomidou.com/guide/wrapper.html#abstractwrapper</a></p><h2 id="7、代码生成器"><a href="#7、代码生成器" class="headerlink" title="7、代码生成器"></a>7、代码生成器</h2><p>dao、pojo、service、controller都给我自己去编写完成！<br>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、<br>Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><blockquote><p>测试：在test目录下创建MyCode</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代码自动生成器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCode</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 需要构建一个 代码自动生成器 对象</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置策略</span>        <span class="token comment" spellcheck="true">// 1、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath<span class="token operator">+</span><span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"LXJ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 是否打开文件夹</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去Service的I前缀</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id主键策略</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间格式</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否生成Swagger2</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、设置数据源</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/kuangstudy?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、包的配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"blog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.xj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实体类</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置要映射的表名,可以多个</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"ks_blog"</span><span class="token punctuation">,</span><span class="token string">"ks_blog_category"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动lombok；</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启逻辑删除</span>        <span class="token comment" spellcheck="true">// 自动填充配置</span>        TableFill gmtCreate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill gmtModified <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 乐观锁</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//localhost:8080/hello_id_2</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><blockquote><p>测试使用</p></blockquote><ol><li><p>新创建SpringBoot项目<code>mycode</code>，添加web模板支持</p></li><li><p>导入相应的Maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--自动生成代码velocity-engine-core--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span><span class="token comment" spellcheck="true">&lt;!-- 是自己开发的，并非官方的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 先不使用最新版的，新版省略了一些东西 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加并修改<code>代码生成</code>程序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代码自动生成器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCode</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 需要构建一个 代码自动生成器 对象</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置策略</span>        <span class="token comment" spellcheck="true">// 1、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath<span class="token operator">+</span><span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"LXJ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 是否打开文件夹</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去Service的I前缀</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id主键策略</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间格式</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否生成Swagger2</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、设置数据源</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/kuangstudy?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、包的配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"blog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.xj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实体类</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置要映射的表名,可以多个</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"ks_blog"</span><span class="token punctuation">,</span><span class="token string">"ks_blog_category"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动lombok；</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启逻辑删除</span>        <span class="token comment" spellcheck="true">// 自动填充配置</span>        TableFill gmtCreate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill gmtModified <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 乐观锁</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//localhost:8080/hello_id_2</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>运行并查看效果</p><p>运行前：</p></li></ol><p><img src="/2020/08/08/MyBatisPlus/image-20200808160051482.png" alt="image-20200808160051482" loading="lazy"></p><p>​    运行后：</p><p><img src="/2020/08/08/MyBatisPlus/image-20200808160610662.png" alt="image-20200808160610662" loading="lazy"></p><p>当然，自动生成之后还是需要自己进行手动编写配置文件连接数据库的。</p>]]></content>
      
      
      <categories>
          
          <category> 持久层框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电实验</title>
      <link href="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/"/>
      <url>/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="数电课程实验"><a href="#数电课程实验" class="headerlink" title="数电课程实验"></a>数电课程实验</h3><blockquote><p>该电路可分为红绿灯控制和倒计时控制两部分</p></blockquote><h3 id="1、了解74LS190"><a href="#1、了解74LS190" class="headerlink" title="1、了解74LS190"></a>1、了解74LS190</h3><h4 id="引脚及功能"><a href="#引脚及功能" class="headerlink" title="引脚及功能"></a>引脚及功能</h4><p>在protues8.6中的元件</p><p>​    <img src="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/image-20200615171927507.png" alt="image-20200615171927507" loading="lazy"></p><p>​    <strong>74LS90：</strong></p><ul><li>D0-D3为输入端</li><li>Q0-Q3为输出端</li><li>CLK为时钟输入端，上升沿有效</li><li>E为使能端</li><li>D/U为减/加计数方式控制端，接高电平为倒计时</li><li>PL端是置数端，异步</li><li>TC端是每进位或借位一次就输出一次高电平</li><li>RCO在借位或进位后输出一次低电平。</li></ul><h3 id="2、红绿灯控制"><a href="#2、红绿灯控制" class="headerlink" title="2、红绿灯控制"></a>2、红绿灯控制</h3><p>此处的74LS190使能端接地，使其能够正常工作，D/U也接地，为正计数。</p><p>绿红黄灯工作状态：分3个状态信号: <strong>T0、T1和T2,编码分别为01、10、11</strong>,由Q1Q0表示。</p><p>红绿灯循环：使输入端固定为0001，即默认开始为绿灯亮起，并将Q2通过非门连接到PL置数端，当到Q2为高电平时，PL为低电平，所以输出端将会被置数为0001回到绿灯状态，从而达到三进制循环，使绿黄红灯轮流点亮。</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/image-20200615173954389.png" alt="image-20200615173954389" loading="lazy"></p><h3 id="3、倒计时控制"><a href="#3、倒计时控制" class="headerlink" title="3、倒计时控制"></a>3、倒计时控制</h3><p>八秒倒计时的原理：</p><p>​    <strong>将D/U接高电平，进行倒计数</strong>，同时让输入端的<strong>D3接高电平</strong>，即输入为1000（十进制的八），</p><p>当数码管倒数完之后，TC会向上借位变为高电平，经过非门之后在PL产生低电平置数，所以数码管会变为当前预置的值（也就是当前输入端的值）。</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/image-20200615180420932.png" alt="image-20200615180420932" loading="lazy"></p><p>二十秒倒计时的原理：</p><p>​    在高位片的输出端的D1接上高电平，而地位片不使用置数（默认为10进制），将低位片的借位端RCO连接到高位片的时钟信号端（在借位的时候产生低电位，而后又恢复到高电位，对高位片产生一个上升的脉冲），从而达到十位计时的效果。</p><p>​    并且将高位片的置数端通过与非门连接高低位片的TC端，从而保证当所有数值计完之后才重新置数。</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/image-20200615183747542.png" alt="image-20200615183747542" loading="lazy"></p><h3 id="4、整合电路"><a href="#4、整合电路" class="headerlink" title="4、整合电路"></a>4、整合电路</h3><p>​    电路图进行如下连接如下，将高位片的置数端（也就是完成计时）接入到控制片的时钟输入端以及低位片的置数端，实现计时完成之后换灯，同时对下个灯的时长进行预置。</p><p>​    而对输入端则通过门电路进行设置，该电路开启的时候控制片直接输出01，即点亮绿灯，此时的预置数位低片的0101即黄灯的亮灯时间为5秒。而当黄灯亮起的时候，高位片变为0001，低位片为0101，此时设置红灯为15秒。当红灯亮起时，高位片为0010，低位片为0000，即设置绿灯为20秒…如此进行循环。</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C/image-20200615185118501.png" alt="image-20200615185118501" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 光电课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课内 </tag>
            
            <tag> 电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli</title>
      <link href="/2020/08/02/Vue-cli/"/>
      <url>/2020/08/02/Vue-cli/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><p><img src="/2020/08/02/Vue-cli/image-20200802232728073.png" alt="image-20200802232728073" loading="lazy"></p><h2 id="1、什么是-axios？"><a href="#1、什么是-axios？" class="headerlink" title="1、什么是 axios？"></a>1、什么是 axios？</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h3 id="1-1、特性"><a href="#1-1、特性" class="headerlink" title="1.1、特性"></a>1.1、特性</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="1-2、安装"><a href="#1-2、安装" class="headerlink" title="1.2、安装"></a>1.2、安装</h3><p>使用 npm:</p><pre><code>npm install --save axios vue-axios</code></pre><p>使用 bower:</p><pre><code>$ bower install axios</code></pre><p>使用 cdn:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3、使用"><a href="#1-3、使用" class="headerlink" title="1.3、使用"></a>1.3、使用</h3><ol><li><p>在<code>index.js</code>引用Axios</p><pre class=" language-cmd"><code class="language-cmd">import axios from 'axios'import VueAxios from 'vue-axios'Vue.use(VueAxios, axios);</code></pre></li><li><p>在需要的模板中增加<code>axios</code>方法，一般使用箭头函数获取数值</p><p><code>response =&gt;{ } </code>相当于<code>function(response){ } </code></p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>     getData<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"/static/mock/data.json"</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre></li></ol><h2 id="2、Node-js的安装"><a href="#2、Node-js的安装" class="headerlink" title="2、Node.js的安装"></a>2、Node.js的安装</h2><ol><li><p>Node.js:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="/2020/08/02/Vue-cli/image-20200717142611420.png" alt="image-20200717142611420" loading="lazy"></p></li><li><p>下载之后一直点下一步就可以了</p></li><li><p>确定安装成功</p><ul><li>cmd下输入<code>node -v</code>，查看是否打印出版本号即可</li><li>cmd下输入<code>npm -v</code>，查看是否打印出版本号即可</li></ul></li><li><p>安装Node.js 淘宝镜加速器（cnpm）</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># -g 就是全局安装</span>npm install cnpm <span class="token operator">-</span>g</code></pre><p><img src="/2020/08/02/Vue-cli/image-20200717144212869.png" alt="image-20200717144212869" loading="lazy"></p></li></ol><p>安装的位置：<code>C:\Users\Administrator\AppData\Roaming\npm</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717144321864.png" alt="image-20200717144321864" loading="lazy"></p><p>安装vue-cli</p><pre class=" language-php"><code class="language-php">cnpm install vue<span class="token operator">-</span>cli <span class="token operator">-</span>g<span class="token shell-comment comment"># 测试是否安装成功</span><span class="token shell-comment comment">#查看可以基于哪些模板创建 vue应用程序，通常我们选择webpack</span>vue list</code></pre><p><img src="/2020/08/02/Vue-cli/image-20200717144821697.png" alt="image-20200717144821697" loading="lazy"></p><p><img src="/2020/08/02/Vue-cli/image-20200717144959937.png" alt="image-20200717144959937" loading="lazy"></p><h2 id="3、第一个vue-cli应用程序"><a href="#3、第一个vue-cli应用程序" class="headerlink" title="3、第一个vue-cli应用程序"></a>3、第一个vue-cli应用程序</h2><h3 id="3-1、安装vue-cli"><a href="#3-1、安装vue-cli" class="headerlink" title="3.1、安装vue-cli"></a>3.1、安装vue-cli</h3><ol><li><p>创建一个空文件夹</p><pre class=" language-js"><code class="language-js">D<span class="token punctuation">:</span>\project\vue<span class="token operator">-</span>study</code></pre></li><li><p>创建一个基于webpack模板的vue应用程序</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># 这里的 myvue 是项目名，可以根据自己的需求起名</span>vue init webpack myvue</code></pre><p>然后一直选择no</p><p><img src="/2020/08/02/Vue-cli/image-20200717145749576.png" alt="image-20200717145749576" loading="lazy"></p><p>参数说明：</p><p><img src="/2020/08/02/Vue-cli/image-20200717145904269.png" alt="image-20200717145904269" loading="lazy"></p></li><li><p>完成之后会在文件夹下面产生如下文件</p><p><img src="/2020/08/02/Vue-cli/image-20200717145839310.png" alt="image-20200717145839310" loading="lazy"></p></li><li><p>初始化并运行</p><pre class=" language-php"><code class="language-php">cd myvue <span class="token shell-comment comment">#进入项目路径</span>npm install    <span class="token shell-comment comment">#安装环境</span>npm run dev <span class="token shell-comment comment">#启动项目</span></code></pre><p>进行安装环境</p><p><img src="/2020/08/02/Vue-cli/image-20200717150510909.png" alt="image-20200717150510909" loading="lazy"></p><p>修复错误</p><p><img src="/2020/08/02/Vue-cli/image-20200717150438522.png" alt="image-20200717150438522" loading="lazy"></p><p>安装完成之后，发现目录下多了<code>node_modules</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717150656213.png" alt="image-20200717150656213" loading="lazy"></p><p>启动项目输入<code>npm run dev </code></p><p><img src="/2020/08/02/Vue-cli/image-20200717150832619.png" alt="image-20200717150832619" loading="lazy"></p><p>在浏览器输入<code>http://localhost:8080/</code>访问正常即可（类似Tomcat）</p><p><img src="/2020/08/02/Vue-cli/image-20200717150929982.png" alt="image-20200717150929982" loading="lazy"></p></li><li><p>停止项目运行</p><p>在命令窗口 <code>ctrl + c</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717151138814.png" alt="image-20200717151138814" loading="lazy"></p></li></ol><h3 id="3-2、在IDEA中的使用"><a href="#3-2、在IDEA中的使用" class="headerlink" title="3.2、在IDEA中的使用"></a>3.2、在IDEA中的使用</h3><ol><li><p>使用IDEA打开项目</p><p><img src="/2020/08/02/Vue-cli/image-20200717151323939.png" alt="image-20200717151323939" loading="lazy"></p></li><li><p>安装Vue插件（也可以直接在设置中安装）</p><p><img src="/2020/08/02/Vue-cli/image-20200717151459535.png" alt="image-20200717151459535" loading="lazy"></p><p>安装完成之后需要进行重启</p><p><img src="/2020/08/02/Vue-cli/image-20200717151554279.png" alt="image-20200717151554279" loading="lazy"></p></li><li><p>现在可以正常访问Vue项目了</p><p><img src="/2020/08/02/Vue-cli/image-20200717151700809.png" alt="image-20200717151700809" loading="lazy"></p></li><li><p>在IDEA中启动Vue项目</p><p>单击下方<code>Terminal</code>命令窗口，输入指令<code>npm run dev</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717151850048.png" alt="image-20200717151850048" loading="lazy"></p><p>(由于在安装Vue的时候我没有使用管理员模式，所以在这里就可以启动成功了，不需要以管理员身份打开)</p><p>如果不能正常运行说明全限不够，需要设置以管理员身份运行，修改IDEA的默认打开方式</p><p><img src="/2020/08/02/Vue-cli/image-20200717152135444.png" alt="image-20200717152135444" loading="lazy"></p></li></ol><h3 id="3-3、修改原有的Vue项目代码"><a href="#3-3、修改原有的Vue项目代码" class="headerlink" title="3.3、修改原有的Vue项目代码"></a>3.3、修改原有的Vue项目代码</h3><ol><li><p>修改原有的Vue项目代码</p><p><img src="/2020/08/02/Vue-cli/image-20200717152421978.png" alt="image-20200717152421978" loading="lazy"></p><p>查看效果</p><p><img src="/2020/08/02/Vue-cli/image-20200717152314950.png" alt="image-20200717152314950" loading="lazy"></p></li><li><p>修改路径端口，在<code>confi</code>文件夹下的<code>index.js</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717152808087.png" alt="image-20200717152808087" loading="lazy"></p></li><li><p>主页面</p><p><img src="/2020/08/02/Vue-cli/image-20200717153042441.png" alt="image-20200717153042441" loading="lazy"></p></li></ol><h2 id="4、Vue：Webpack学习"><a href="#4、Vue：Webpack学习" class="headerlink" title="4、Vue：Webpack学习"></a>4、Vue：Webpack学习</h2><blockquote><p>在开发的时候，需要将IDEA的<code>JavaScript</code>设置为ES6</p></blockquote><h3 id="4-1、ES6简介"><a href="#4-1、ES6简介" class="headerlink" title="4.1、ES6简介"></a>4.1、ES6简介</h3><p>EcmaScript6标准增加了JavaScript语言层面的模块体系定义。ES6模块的设计思想，是尽量静态化，使编译时就能确定模块的依赖关系，以及输入和输出的变量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"jquery"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> module <span class="token string">"localModule"</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre><p><strong><code>&#39;use strict&#39;</code>使用严格检查，增加了对代码的规范</strong></p><h3 id="4-2、安装Webpack"><a href="#4-2、安装Webpack" class="headerlink" title="4.2、安装Webpack"></a>4.2、安装Webpack</h3><blockquote><p>一款模块加载器兼打包工具，能将各种资源，如JS、JSX、ES6、SASS、LESS、图片等都作为模块来处理和使用，解决兼容问题</p></blockquote><p>安装：</p><pre class=" language-php"><code class="language-php">npm install webpack <span class="token operator">-</span>gnpm install webpack<span class="token operator">-</span>cli <span class="token operator">-</span>g</code></pre><p>测试安装成功：</p><ul><li><p><code>webpack -v</code></p></li><li><p><code>webpack-cli -v</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717160209173.png" alt="image-20200717160209173" loading="lazy"></p></li></ul><p><img src="/2020/08/02/Vue-cli/image-20200717154705130.png" alt="image-20200717154705130" loading="lazy"></p><h3 id="4-3、使用webpack"><a href="#4-3、使用webpack" class="headerlink" title="4.3、使用webpack"></a>4.3、使用webpack</h3><ol><li><p>创建项目</p><p>新建文件夹，然后用IDEA打开</p><p><img src="/2020/08/02/Vue-cli/image-20200717160049268.png" alt="image-20200717160049268" loading="lazy"></p><p><img src="/2020/08/02/Vue-cli/image-20200717160329234.png" alt="image-20200717160329234" loading="lazy"></p></li><li><p>创建一个名为modules的目录，用于放置JS模块等资源文件</p><p><img src="/2020/08/02/Vue-cli/image-20200717160442769.png" alt="image-20200717160442769" loading="lazy"></p></li><li><p>在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 暴露一个方法：sayHi</span>exports<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;div>Hello WebPack&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在modules下创建一个名为 main.js 的入口文件，用于打包时设置entry属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// require 导入一个模块，就可以调用这个模块中的方法</span><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hello<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>导入之后就可以使用hello.js中暴露的方法</p><p><img src="/2020/08/02/Vue-cli/image-20200717160857459.png" alt="image-20200717160857459" loading="lazy"></p></li><li><p>在项目目录下创建webpack.config.js 配置文件，使用webpack 命令打包</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 程序入口</span>    entry<span class="token punctuation">:</span> <span class="token string">"./modules/main.js"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输入到哪</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 标准写法</span>        filename<span class="token punctuation">:</span> <span class="token string">"./js/bundle.js"</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动打包，在IDEA的命令窗口输入<code>webpack</code></p><p>然后就报错了（因为之前代码中的module和output拼写错误）</p><p><img src="/2020/08/02/Vue-cli/image-20200717161537252.png" alt="image-20200717161537252" loading="lazy"></p><p>修改之后</p><p><img src="/2020/08/02/Vue-cli/image-20200717161759407.png" alt="image-20200717161759407" loading="lazy"></p></li><li><p>打包之后多出了一个<code>dist</code>文件夹，将代码进行压缩成一个js</p><p><img src="/2020/08/02/Vue-cli/image-20200717161909583.png" alt="image-20200717161909583" loading="lazy"></p></li><li><p>新建index.html，进行测试</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;script src = "dist/js/bundle.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开页面测试</p><p><img src="/2020/08/02/Vue-cli/image-20200717162207521.png" alt="image-20200717162207521" loading="lazy"></p><p><img src="/2020/08/02/Vue-cli/image-20200717162151806.png" alt="image-20200717162151806" loading="lazy"></p><p>因此之后的html代码只需要导入即可（模块化开发）</p></li><li><p>可以使用<code>webpack --watch</code>进行监听变化</p><p><img src="/2020/08/02/Vue-cli/image-20200717162538741.png" alt="image-20200717162538741" loading="lazy"></p></li><li><p>停止Vue，<code>ctrl + c</code>，然后输入<code>y</code>回车</p><p><img src="/2020/08/02/Vue-cli/image-20200717162619452.png" alt="image-20200717162619452" loading="lazy"></p></li></ol><h2 id="5、Vue：vue-router路由"><a href="#5、Vue：vue-router路由" class="headerlink" title="5、Vue：vue-router路由"></a>5、Vue：vue-router路由</h2><p>​    Vue Router是<a href="http://vuejs.org/">Vue.js</a>的官方路由器。它与Vue.js核心深度集成，使使用Vue.js轻松构建单页应用程序变得轻而易举。功能包括：</p><ul><li>嵌套路线/视图映射</li><li>模块化，基于组件的路由器配置</li><li>路由参数，查询，通配符</li><li>查看由Vue.js过渡系统提供动力的过渡效果</li><li>细粒度的导航控制</li><li>与自动活动CSS类的链接</li><li>HTML5历史记录模式或哈希模式，在IE9中具有自动备用</li><li>可自定义的滚动行为</li></ul><h3 id="5-1、安装vue-router插件"><a href="#5-1、安装vue-router插件" class="headerlink" title="5.1、安装vue-router插件"></a>5.1、安装vue-router插件</h3><pre class=" language-php"><code class="language-php">npm install vue<span class="token operator">-</span>router <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><ol><li><p>打开一开始创建的<code>myvue</code>项目</p></li><li><p>清理项目</p><p>删除<code>src</code>下的文件，只保留<code>App.vue</code>和<code>main.js</code></p></li><li><p>删除之后的文件</p><p><code>App.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Avenir'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2c3e50</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><code>main.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  App <span class="token punctuation">}</span> <span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li><li><p>安装插件<code>npm install vue-router --save-dev</code></p><p>必须在当前项目下安装（这里在IDEA中安装，相当于导入jar包）</p><p><img src="/2020/08/02/Vue-cli/image-20200717164300882.png" alt="image-20200717164300882" loading="lazy"></p><p>遇到问题就进行修复</p><p><img src="/2020/08/02/Vue-cli/image-20200717164413463.png" alt="image-20200717164413463" loading="lazy"></p></li><li><p>安装之后进行导入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">// 显示声明使用VueRouter</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>进行启动测试<code>npm run dev</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717164917393.png" alt="image-20200717164917393" loading="lazy"></p></li><li><p>修改App.vue文件后保存，页面数据会自动刷新（热刷新）</p><p><img src="/2020/08/02/Vue-cli/image-20200717165158997.png" alt="image-20200717165158997" loading="lazy"></p></li></ol><h3 id="5-2、路由测试"><a href="#5-2、路由测试" class="headerlink" title="5.2、路由测试"></a>5.2、路由测试</h3><ol><li><p>新建<code>content.vue</code>文件和<code>main.vue</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>内容页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>         name<span class="token punctuation">:</span> <span class="token string">"Content"</span>    <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>安装路由，在src目录下创建一个<code>router</code>，专门存放路由<code>index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment" spellcheck="true">//导入刚才定义的组件</span><span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">"../components/Content"</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../components/Main"</span><span class="token comment" spellcheck="true">// 显示使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置导出路由</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 路由路径，相当于@RequestMapping注解</span>      path<span class="token punctuation">:</span> <span class="token string">'/content'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 路由名称</span>      name<span class="token punctuation">:</span> <span class="token string">'Content'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 跳转到的组件</span>      component<span class="token punctuation">:</span> Content    <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 路由路径，相当于@RequestMapping注解</span>      path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 路由名称</span>      name<span class="token punctuation">:</span> <span class="token string">'Main'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 跳转到的组件</span>      component<span class="token punctuation">:</span> Main    <span class="token punctuation">}</span> <span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li><li><p>在<code>main.js</code>中配置路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">// 导入上面配置的路由路径</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 显示声明使用VueRouter</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置路由</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  App <span class="token punctuation">}</span> <span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li><li><p>在App.vue中使用路由</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Vue-Router<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动测试<code>npm run dev</code></p><p><img src="/2020/08/02/Vue-cli/image-20200717174517665.png" alt="image-20200717174517665" loading="lazy"></p></li></ol><p>==注意：index中的配置属性名不要写错，<code>routes</code>不是<code>router</code>上次写错显示不出组件内容==</p><p>小结：</p><ol><li><p>在<code>components</code>中创建组件</p></li><li><p>在<code>router</code>中的<code>index.js</code>导入组件，配置组件</p></li><li><p>在<code>App.vue</code>中使用使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre></li></ol><p><img src="/2020/08/02/Vue-cli/image-20200717174733613.png" alt="image-20200717174733613" loading="lazy"></p><h2 id="6、Vue：快速上手"><a href="#6、Vue：快速上手" class="headerlink" title="6、Vue：快速上手"></a>6、Vue：快速上手</h2><blockquote><p>结合ElementUI：<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a></p></blockquote><p><img src="/2020/08/02/Vue-cli/image-20200717180035314.png" alt="image-20200717180035314" loading="lazy"></p><h3 id="6-1、创建工程"><a href="#6-1、创建工程" class="headerlink" title="6.1、创建工程"></a>6.1、创建工程</h3><ol><li><p>打开命令窗口，切换到项目工作路径，在目录前面加上<code>cmd</code>空格、回车（但这是管理员模式）</p><p><img src="/2020/08/02/Vue-cli/image-20200717181014170.png" alt="image-20200717181014170" loading="lazy"></p></li><li><p>创建一个名为hello-vue的工程 <code>vue init webpack hello-vue</code>，文件不需要手动创建</p><p>这时候选择第一个</p><p><img src="/2020/08/02/Vue-cli/image-20200717181503696.png" alt="image-20200717181503696" loading="lazy"></p><p>然后一直no</p><p><img src="/2020/08/02/Vue-cli/image-20200717181533944.png" alt="image-20200717181533944" loading="lazy"></p></li><li><p>安装依赖，我们需要安装<code>vue-router</code>、<code>element-ui</code>、<code>sass-loader</code>和<code>node-sass</code>四个插件</p><pre class=" language-cmd"><code class="language-cmd"># 进入工程目录cd hello-vue# 安装vue-routernpm install vue-router --save-dev# 安装element-uinpm i element-ui -S# 安装依赖npm install# 安装SASS加载器cnpm install sass-loader node-sass --save-dev# 启动测试npm run dev</code></pre><p>按照上面顺序进行安装即可，如出现错误就进行修复</p><p><img src="/2020/08/02/Vue-cli/image-20200717182135818.png" alt="image-20200717182135818" loading="lazy"></p><p>启动成功之后就可以了</p></li><li><p>Npm命令的解释：</p><p><img src="/2020/08/02/Vue-cli/image-20200717181849773.png" alt="image-20200717181849773" loading="lazy"></p></li></ol><h3 id="6-2、使用IDEA打开项目"><a href="#6-2、使用IDEA打开项目" class="headerlink" title="6.2、使用IDEA打开项目"></a>6.2、使用IDEA打开项目</h3><blockquote><p>因为我们已经安装好了element-ui，所以可以直接使用element-ui网站上的案例代码：<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a></p></blockquote><ol><li><p>打开项目</p></li><li><p>清理项目，静态资源存放在static目录下</p><p><img src="/2020/08/02/Vue-cli/image-20200717183018065.png" alt="image-20200717183018065" loading="lazy"></p></li><li><p>创建文件夹<code>router</code>，<code>views</code></p></li><li><p>在<code>views</code>目录下创建<code>Login.vue</code>将前端代码写在<code>&lt;template&gt;</code>中，而在<code>&lt;script&gt;</code>中需要添加<code>name</code>属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">justify-content</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">status-icon</span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.pass<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkPass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.checkPass<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resetForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">"Login"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> checkAge <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'年龄不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入数字值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'必须年满18岁'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">;</span>      <span class="token keyword">var</span> validatePass <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>checkPass <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span><span class="token function">validateField</span><span class="token punctuation">(</span><span class="token string">'checkPass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token punctuation">;</span>      <span class="token keyword">var</span> validatePass2 <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请再次输入密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'两次输入密码不一致!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>         ruleForm<span class="token punctuation">:</span> <span class="token punctuation">{</span>           pass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          checkPass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>           pass<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>  validator<span class="token punctuation">:</span> validatePass<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>           <span class="token punctuation">]</span><span class="token punctuation">,</span>          checkPass<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>  validator<span class="token punctuation">:</span> validatePass2<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>           <span class="token punctuation">]</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>  validator<span class="token punctuation">:</span> checkAge<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>           <span class="token punctuation">]</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token function">submitForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 设置跳转</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'submit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error submit!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token function">resetForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>在路由目录下创建<code>index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment" spellcheck="true">// 导入组件</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token comment" spellcheck="true">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>       path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>       path<span class="token punctuation">:</span> <span class="token string">'/Main'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Main    <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>配置main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示的使用</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置ElementUI</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre></li><li><p>修改App.vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动Vue <code>npm run dev</code></p><p>如果报错需要修改sass的版本，改为7.3.1(在<code>package.json</code>中修改)，修改之后需要在进行<code>npm install</code>安装</p></li><li><p>测试</p><p><img src="/2020/08/02/Vue-cli/image-20200717191440642.png" alt="image-20200717191440642" loading="lazy"></p><p><img src="/2020/08/02/Vue-cli/image-20200717191457263.png" alt="image-20200717191457263" loading="lazy"></p></li></ol><p><strong>提交成功之后进行跳转：</strong>使用<code>this.$router.push(&quot;/main&quot;);</code>获取路由器并跳转</p><h3 id="6-3、嵌套路由children"><a href="#6-3、嵌套路由children" class="headerlink" title="6.3、嵌套路由children:[]"></a>6.3、嵌套路由<code>children:[]</code></h3><p>真正的应用程序用户界面通常由嵌套在多个级别的组件组成。URL的段对应于嵌套组件的某种结构也是很常见的，例如：</p><p><img src="/2020/08/02/Vue-cli/image-20200718194321074.png" alt="image-20200718194321074" loading="lazy"></p><ol><li><p>打开<code>hello-vue</code>项目，在<code>views</code>中创建一个<code>user</code>文件夹</p></li><li><p>在<code>user</code>下创建<code>List.vue</code>和<code>Profile.vue</code>，写上<code>个人列表</code>和<code>个人信息</code>即可</p></li><li><p>然后在<code>index.js</code>中导入路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment" spellcheck="true">// 导入组件</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token comment" spellcheck="true">//导入新路由</span><span class="token keyword">import</span> userList <span class="token keyword">from</span> <span class="token string">"../views/user/List"</span><span class="token keyword">import</span> userProfile <span class="token keyword">from</span> <span class="token string">"../views/user/Profile"</span><span class="token comment" spellcheck="true">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     routes<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>             path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Login        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span>             path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Main<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 在首页下面嵌套路由</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token comment" spellcheck="true">// 路径依然为/user/userList，但是会在main的基础上显示</span>                <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/userList'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> userList<span class="token punctuation">}</span> <span class="token punctuation">,</span>                <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/userProfile'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> userProfile<span class="token punctuation">}</span>             <span class="token punctuation">]</span>        <span class="token punctuation">}</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改<code>main.vue</code>，增加侧边栏（导入模板需要加在<code>&lt;div&gt;</code>标签中）</p><ul><li><p>在侧边栏中添加按钮<code>&lt;router-link to=&quot;/user/userList&quot;&gt;用户列表&lt;/router-link&gt;</code></p></li><li><p>设置显示内容的位置</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span></code></pre></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">238</span>, <span class="token number">241</span>, <span class="token number">246</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>3<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>导航一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分组一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/userList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/userProfile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>导航二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分组一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>分组2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2-4-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-setting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>导航三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分组一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>分组2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3-4-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-setting<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">15</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-menu</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-item</span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-item</span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-item</span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-menu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>卢晓江<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>         tableData<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.el-header</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#B3C0D1</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.el-aside</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>效果展示：</p><p>点击标签就会在指定位置显示内容，这就是路由的作用</p><p><img src="/2020/08/02/Vue-cli/image-20200718201518640.png" alt="image-20200718201518640" loading="lazy"></p></li></ol><h3 id="6-4、接收参数"><a href="#6-4、接收参数" class="headerlink" title="6.4、接收参数"></a>6.4、接收参数</h3><blockquote><p>在链接中增加参数，并修改路由和显示页面</p></blockquote><h4 id="1、方法一"><a href="#1、方法一" class="headerlink" title="1、方法一"></a>1、方法一</h4><ol><li><p>在路由链接添加参数对象（<code>to</code>需要进行绑定）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{  name: <span class="token punctuation">'</span>userList<span class="token punctuation">'</span>, params: { id: 1}  } <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改<code>index.js</code>页面，修改对应路径</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>     path<span class="token punctuation">:</span> <span class="token string">'/user/userList/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'userList'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> userList<span class="token punctuation">}</span> </code></pre></li><li><p>在模块页面进行获取显示（需要在标签中获取，不然报错）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        { { $route.params.id} }     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue-cli/image-20200718213248627.png" alt="image-20200718213248627" loading="lazy"></p></li></ol><h4 id="2、方法二"><a href="#2、方法二" class="headerlink" title="2、方法二"></a>2、方法二</h4><ol><li><p>第一步还是一样不需要修改</p></li><li><p>修改<code>index.js</code>页面，修改对应路径和<code>props</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>     path<span class="token punctuation">:</span> <span class="token string">'/user/userList/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'userList'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> userList<span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> </code></pre></li><li><p>在模块页面进行获取显示（需要在标签中获取，不然报错），使用<code>props</code>获取参数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    { { id} }   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>         props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"userList"</span>    <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>效果相同</p></li></ol><h3 id="6-5、登录和去除‘-’"><a href="#6-5、登录和去除‘-’" class="headerlink" title="6.5、登录和去除‘#’"></a>6.5、登录和去除‘#’</h3><h4 id="1、登录"><a href="#1、登录" class="headerlink" title="1、登录"></a>1、登录</h4><ol><li>在<code>login</code>页面跳转的时候增加参数</li><li>在<code>index.js</code>中修改路径</li><li>在<code>main.vue</code>中接收显示参数</li></ol><h4 id="2、去除"><a href="#2、去除" class="headerlink" title="2、去除#"></a>2、去除#</h4><ol><li>在<code>index.js</code>页面中设置<code>mode: &#39;history&#39;</code></li></ol><h3 id="6-6、路由模式与404"><a href="#6-6、路由模式与404" class="headerlink" title="6.6、路由模式与404"></a>6.6、路由模式与404</h3><h4 id="1、路由模式有两种"><a href="#1、路由模式有两种" class="headerlink" title="1、路由模式有两种"></a>1、路由模式有两种</h4><ul><li>hash：路径带 # 符号，如：<a href="http://localhost/#/login">http://localhost/#/login</a></li><li>history：路径不带# 符号，如：<a href="http://localhost/login">http://localhost/login</a></li></ul><p>修改路由配置，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2、处理404"><a href="#2、处理404" class="headerlink" title="2、处理404"></a>2、处理404</h4><ol><li><p>在<code>views</code>中创建一个<code>NotFound.vue</code>页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>404，未找到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>         name<span class="token punctuation">:</span> <span class="token string">"NotFound"</span>    <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>导入路由，设置路径为 <code>*</code></p><p><img src="/2020/08/02/Vue-cli/image-20200719130154253.png" alt="image-20200719130154253" loading="lazy"></p></li></ol><h4 id="3、路由钩子"><a href="#3、路由钩子" class="headerlink" title="3、路由钩子"></a>3、路由钩子</h4><ul><li><p>beforeRouteEnter：在进入路由前执行</p></li><li><p>beforeRouteLeave：在离开路由前执行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"userList"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// :()=>{ }  相当于 :function(){ } </span>    beforeRouteEnter<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入路由前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 放行</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    beforeRouteLeave<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"离开路由前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  放行</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><p>离开路由的时候才显示<code>beforeRouteLeave</code>的内容</p><p><img src="/2020/08/02/Vue-cli/image-20200719130916389.png" alt="image-20200719130916389" loading="lazy"></p><p><strong>参数说明：</strong></p><ul><li>to：路由将要跳转的路径信息</li><li>from：路径跳转前的路径信息</li><li>next：路由的控制参数<ul><li>next()：跳入下一个页面</li><li>next(‘/path’)：改变路由的跳转方向，使其跳到另一个路由</li><li>next(false)：返回原来的页面</li><li>next((vm)=&gt;{})：仅在beforeRouteEnter中可用，vn使组件的实例</li></ul></li></ul><h4 id="4、在钩子函数中使用异步请求"><a href="#4、在钩子函数中使用异步请求" class="headerlink" title="4、在钩子函数中使用异步请求"></a>4、在钩子函数中使用异步请求</h4><ol><li><p>安装Axios</p><pre class=" language-cmd"><code class="language-cmd">npm install --save axios vue-axios</code></pre></li><li><p>在<code>index.js</code>引用Axios</p><pre class=" language-cmd"><code class="language-cmd">import axios from 'axios'import VueAxios from 'vue-axios'Vue.use(VueAxios, axios);</code></pre></li><li><p>在<code>static</code>目录下创建一个<code>mock</code>文件夹，并创建一个<code>data.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"卢晓江"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"潮州"</span><span class="token punctuation">}</span> </code></pre><p>只有放在<code>static</code>目录下才可以找到</p><p><img src="/2020/08/02/Vue-cli/image-20200719132453779.png" alt="image-20200719132453779" loading="lazy"></p></li><li><p>在<code>List.vue</code>中使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"userList"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>       getData<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 与下面的作用一样         this.axios.get("/static/mock/data.json").then(function (response) {           console.log(response);          this.data.user = response;        } )*/</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span><span class="token string">"/static/mock/data.json"</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// :()=>{ }  相当于 :function(){ } </span>    beforeRouteEnter<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入路由前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 放行</span>      <span class="token function">next</span><span class="token punctuation">(</span>vm <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行getData方法</span>        vm<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    beforeRouteLeave<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"离开路由前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  放行</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>获取成功</p><p><img src="/2020/08/02/Vue-cli/image-20200719132546418.png" alt="image-20200719132546418" loading="lazy"></p></li></ol><h3 id="6-7、获取Axios异步请求的数据"><a href="#6-7、获取Axios异步请求的数据" class="headerlink" title="6.7、获取Axios异步请求的数据"></a>6.7、获取Axios异步请求的数据</h3><ol><li><p>在<code>List.vue</code>中设置<code>data()</code>函数</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">{</span>         user<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 属性名称必须与json中的一直，但不需要全写</span>            name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre></li><li><p>修改<code>axios</code>方法</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>     getData<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"/static/mock/data.json"</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span></code></pre><p>设置值的时候必须使用箭头函数<code>response =&gt;{ this.user = response.data} )</code>，</p><p><strong>不然会报错</strong>：因为在我们加载对象的时候，用的是异步模式，即使promise立刻被处理返回，但是浏览器在开始加载对象的时候，这个对象还是没有定义，所以也就读不到属性</p><p><img src="/2020/08/02/Vue-cli/image-20200719135538340.png" alt="image-20200719135538340" loading="lazy"></p></li><li><p>最后就可以展示属性值了</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        { { id} }         { { user.name} }     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue-cli/image-20200719135631063.png" alt="image-20200719135631063" loading="lazy"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2020/08/02/Vue/"/>
      <url>/2020/08/02/Vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、Vue介绍"><a href="#1、Vue介绍" class="headerlink" title="1、Vue介绍"></a>1、Vue介绍</h2><h3 id="1-1、Vue-js-是什么"><a href="#1-1、Vue-js-是什么" class="headerlink" title="1.1、Vue.js 是什么"></a>1.1、Vue.js 是什么</h3><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p><img src="/2020/08/02/Vue/image-20200715183808192.png" alt="image-20200715183808192" loading="lazy"></p><p>尝试 Vue.js 最简单的方法是使用 <a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-hello-world">Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以<a href="https://github.com/vuejs/vuejs.org/blob/master/src/v2/examples/vue-20-hello-world/index.html">创建一个 <code>.html</code> 文件</a>，然后通过如下方式引入 Vue：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>或者：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><a href="https://cn.vuejs.org/guide/installation.html">安装教程</a>给出了更多安装 Vue 的方式。请注意我们<strong>不推荐</strong>新手直接使用 <code>vue-cli</code>，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p><h3 id="1-2、声明式渲染"><a href="#1-2、声明式渲染" class="headerlink" title="1.2、声明式渲染"></a>1.2、声明式渲染</h3><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{ message }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 <code>app.message</code> 的值，你将看到上例相应地更新，并且不会刷新页面。</p><p>注意我们不再和 HTML 直接交互了。一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 <code>#app</code>) 然后对其进行完全控制。那个 HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部。</p><p><img src="/2020/08/02/Vue/image-20200715205311603.png" alt="image-20200715205311603" loading="lazy"></p><h3 id="1-3、v-bind指令"><a href="#1-3、v-bind指令" class="headerlink" title="1.3、v-bind指令"></a>1.3、v-bind指令</h3><p>除了文本插值，我们还可以像这样来绑定元素 attribute：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    鼠标悬停几秒钟查看此处动态绑定的提示信息！  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app-2'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token string">'页面加载于 '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200715211257498.png" alt="image-20200715211257498" loading="lazy"></p><p>指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = &#39;新消息&#39;</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><h3 id="1-4、条件与循环"><a href="#1-4、条件与循环" class="headerlink" title="1.4、条件与循环"></a>1.4、条件与循环</h3><ol><li><p>v-if条件</p><p>控制切换一个元素是否显示也相当简单：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         el<span class="token punctuation">:</span> <span class="token string">'#app-3'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>             seen<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>继续在控制台输入 <code>app3.seen = false</code>，你会发现之前显示的消息消失了。</p></li><li><p>v-for循环</p><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{ todo.text }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app-4'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            todos<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 JavaScript'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 Vue'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'整个牛项目'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在控制台里，输入 <code>app4.todos.push({  text: &#39;新项目&#39; } )</code>，你会发现列表最后添加了一个新项目。</p></li></ol><h3 id="1-5、处理用户输入"><a href="#1-5、处理用户输入" class="headerlink" title="1.5、处理用户输入"></a>1.5、处理用户输入</h3><h4 id="1、事件监听器-v-on-click"><a href="#1、事件监听器-v-on-click" class="headerlink" title="1、事件监听器 v-on:click"></a>1、事件监听器 <code>v-on:click</code></h4><p>通过它调用在 Vue 实例中定义的方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反转消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app-5'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">'Hello Vue.js!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            reverseMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</p><h4 id="2、双向绑定v-model"><a href="#2、双向绑定v-model" class="headerlink" title="2、双向绑定v-model"></a>2、双向绑定<code>v-model</code></h4><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app-6'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200715213304498.png" alt="image-20200715213304498" loading="lazy"></p><h3 id="1-6、组件化应用构建"><a href="#1-6、组件化应用构建" class="headerlink" title="1.6、组件化应用构建"></a>1.6、组件化应用构建</h3><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p><p><img src="/2020/08/02/Vue/image-20200715213438782.png" alt="image-20200715213438782" loading="lazy"></p><h4 id="1、注册组件"><a href="#1、注册组件" class="headerlink" title="1、注册组件"></a>1、注册组件</h4><p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义名为 todo-item 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   template<span class="token punctuation">:</span> <span class="token string">'&lt;li>这是个待办项&lt;/li>'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>现在你可以用它构建另一个组件模板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 创建一个 todo-item 组件的实例 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <a href="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">props</a>：</p><h4 id="2、接收数据"><a href="#2、接收数据" class="headerlink" title="2、接收数据"></a>2、接收数据</h4><p>==props用来接收数据==</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// todo-item 组件现在接受一个</span>  <span class="token comment" spellcheck="true">// "prop"，类似于一个自定义 attribute。</span>  <span class="token comment" spellcheck="true">// 这个 prop 名为 todo。</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{ todo.text }}&lt;/li>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--      现在我们为每个 todo-item 提供 todo 对象      todo 对象是变量，即其内容可以是动态的。      我们也需要为每个组件提供一个“key”，稍后再      作详细解释。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in groceryList<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{ todo.text }}&lt;/li>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> app7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app-7'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        groceryList<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'蔬菜'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'奶酪'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'蛋糕'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200715214641773.png" alt="image-20200715214641773" loading="lazy"></p><p>尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过 prop 接口与父单元进行了良好的解耦。我们现在可以进一步改进 `` 组件，提供更为复杂的模板和逻辑，而不会影响到父单元。</p><p>在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。在<a href="https://cn.vuejs.org/v2/guide/components.html">后续教程</a>中我们将详述组件，不过这里有一个 (假想的) 例子，以展示使用了组件的应用模板是什么样的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-sidebar</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-sidebar</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-content</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>使得html代码成为真正的视图层，实现复用</p></blockquote><h3 id="1-7、与自定义元素的关系"><a href="#1-7、与自定义元素的关系" class="headerlink" title="1.7、与自定义元素的关系"></a>1.7、与自定义元素的关系</h3><p> Vue 组件非常类似于<strong>自定义元素</strong>——它是 <a href="https://www.w3.org/wiki/WebComponents/">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Slot API</a> 与 <code>is</code> attribute。但是，还是有几个关键差别：</p><ol><li>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</li><li>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ol><p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，<a href="https://custom-elements-everywhere.com/#vue">依然有很好的互操作性</a>。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p><h2 id="2、Vue实例"><a href="#2、Vue实例" class="headerlink" title="2、Vue实例"></a>2、Vue实例</h2><h3 id="2-1、创建一个-Vue-实例"><a href="#2-1、创建一个-Vue-实例" class="headerlink" title="2.1、创建一个 Vue 实例"></a>2.1、创建一个 Vue 实例</h3><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的，需要先导入Vue：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 选项</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>虽然没有完全遵循 <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code>vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p><p>当创建一个 Vue 实例时，你可以传入一个<strong>选项对象</strong>。这篇教程主要描    述的就是如何使用这些选项来创建你想要的行为。作为参考，你也可以在 <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">API 文档</a>中浏览完整的选项列表。</p><h3 id="2-2、数据与方法"><a href="#2-2、数据与方法" class="headerlink" title="2.2、数据与方法"></a>2.2、数据与方法</h3><p>当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的 property 加入到 Vue 的<strong>响应式系统</strong>中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 我们的数据对象</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 该对象被加入到一个 Vue 实例中</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span> data<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获得这个实例上的 property</span><span class="token comment" spellcheck="true">// 返回源数据中对应的字段</span>vm<span class="token punctuation">.</span>a <span class="token operator">==</span> data<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// 设置 property 也会影响到原始数据</span>vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>data<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// => 2</span><span class="token comment" spellcheck="true">// ……反之亦然</span>data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>vm<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// => 3</span></code></pre><p>当这些数据改变时，视图会进行重渲染。</p><p>值得注意的是只有当实例被创建时就<strong>已经存在</strong>于 <code>data</code> 中的 property 才是<strong>响应式</strong>的。也就是说如果你添加一个新的 property，比如：</p><pre class=" language-js"><code class="language-js">vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'hi'</span></code></pre><p><strong>那么对 <code>b</code> 的改动将不会触发任何视图的更新</strong>。</p><p>如果你知道你会在晚些时候需要一个 property，但是一开始它为空或不存在，那么你仅需要<strong>设置一些初始值</strong>。比如：</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   newTodoText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  visitCount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  hideCompletedTodos<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span> </code></pre><h4 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h4><p>这里唯一的例外是使用 <code>Object.freeze()</code>，这会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> obj<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的 <span class="token template-string"><span class="token string">`foo`</span></span> 不会更新！ <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"foo = 'baz'"</span><span class="token operator">></span>Change it<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>除了数据 property，Vue 实例还暴露了一些有用的实例 property 与方法。它们都有前缀 <code>$</code>，以便与用户定义的 property 区分开来。例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> data<span class="token punctuation">}</span> <span class="token punctuation">)</span>vm<span class="token punctuation">.</span>$data <span class="token operator">===</span> data <span class="token comment" spellcheck="true">// => true</span>vm<span class="token punctuation">.</span>$el <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// $watch 是一个实例方法</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 这个回调将在 `vm.a` 改变后调用</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>以后你可以在 <a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property">API 参考</a>中查阅到完整的实例 property 和方法的列表。</p><p>==vm.$watch监听属性的改变==</p><h3 id="2-3、实例生命周期钩子"><a href="#2-3、实例生命周期钩子" class="headerlink" title="2.3、实例生命周期钩子"></a>2.3、实例生命周期钩子</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><h4 id="1、created-钩子"><a href="#1、created-钩子" class="headerlink" title="1、created 钩子"></a>1、<a href="https://cn.vuejs.org/v2/api/#created"><code>created</code></a> 钩子</h4><p> <a href="https://cn.vuejs.org/v2/api/#created"><code>created</code></a> 钩子可以用来在一个实例被创建之后执行代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// => "a is: 1"</span></code></pre><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如：</p><ul><li><p><a href="https://cn.vuejs.org/v2/api/#mounted"><code>mounted</code></a>：实例被挂载后调用</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#updated"><code>updated</code></a>：数据更改导致</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#destroyed"><code>destroyed</code></a>：实例销毁后调用</p></li></ul><p>生命周期钩子的 <code>this</code> 上下文指向调用它的 Vue 实例。</p><blockquote><p>不要在选项 property 或回调上使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>，比如 <code>created: () =&gt; console.log(this.a)</code> 或 <code>vm.$watch(&#39;a&#39;, newValue =&gt; this.myMethod())</code>。</p><p>因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 <code>Uncaught TypeError: Cannot read property of undefined</code> 或 <code>Uncaught TypeError: this.myMethod is not a function</code> 之类的错误。</p></blockquote><h4 id="2、生命周期图示"><a href="#2、生命周期图示" class="headerlink" title="2、生命周期图示"></a>2、生命周期图示</h4><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高</p><p><img src="/2020/08/02/Vue/lifecycle.png" alt="img" loading="lazy"></p><h2 id="3、模板语法"><a href="#3、模板语法" class="headerlink" title="3、模板语法"></a>3、模板语法</h2><h3 id="3-1、插值"><a href="#3-1、插值" class="headerlink" title="3.1、插值"></a>3.1、插值</h3><h4 id="1、文本"><a href="#1、文本" class="headerlink" title="1、文本"></a>1、文本</h4><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> property 的值。无论何时，绑定的数据对象上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p><p>通过使用 <a href="https://cn.vuejs.org/v2/api/#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>这个将不会改变: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h4 id="2、输出为HTML"><a href="#2、输出为HTML" class="headerlink" title="2、输出为HTML"></a>2、输出为HTML</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 <a href="https://cn.vuejs.org/v2/api/#v-html"><code>v-html</code> 指令</a>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using mustaches: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200715234846195.png" alt="image-20200715234846195" loading="lazy"></p><p>这个 <code>span</code> 的内容将会被替换成为 property 值 <code>rawHtml</code>，直接作为 HTML——会忽略解析 property 值中的数据绑定。</p><p><strong>注意</strong>：你不能使用 <code>v-html</code> 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。</p><blockquote><p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。请只对可信内容使用 HTML 插值，<strong>绝不要</strong>对用户提供的内容使用插值。</p></blockquote><h4 id="3、Attribute"><a href="#3、Attribute" class="headerlink" title="3、Attribute"></a>3、Attribute</h4><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href="https://cn.vuejs.org/v2/api/#v-bind"><code>v-bind</code> 指令</a>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isButtonDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p><h4 id="4、使用-JavaScript-表达式"><a href="#4、使用-JavaScript-表达式" class="headerlink" title="4、使用 JavaScript 表达式"></a>4、使用 JavaScript 表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><pre class=" language-html"><code class="language-html">{{ number + 1 }}{{ ok ? 'YES' : 'NO' }}{{ message.split('').reverse().join('') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>list-<span class="token punctuation">'</span> + id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这是语句，不是表达式 --></span>{{ var a = 1 }}<span class="token comment" spellcheck="true">&lt;!-- 流控制也不会生效，请使用三元表达式 --></span>{{ if (ok) { return message } }}</code></pre><blockquote><p>模板表达式都被放在沙盒中，只能访问<a href="https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9">全局变量的一个白名单</a>，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p></blockquote><h3 id="3-2、指令"><a href="#3-2、指令" class="headerlink" title="3.2、指令"></a>3.2、指令</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>这里，<code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来插入/移除 `` 元素。</p><h4 id="1、参数"><a href="#1、参数" class="headerlink" title="1、参数"></a>1、参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p><p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p><h4 id="2、动态参数"><a href="#2、动态参数" class="headerlink" title="2、动态参数"></a>2、动态参数</h4><blockquote><p>2.6.0 新增</p></blockquote><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p><p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code>。</p><blockquote><p>对动态参数的值的约束</p></blockquote><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p><blockquote><p>对动态参数表达式的约束</p></blockquote><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这会触发一个编译警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>['foo'</span> <span class="token attr-name">+</span> <span class="token attr-name">bar]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p><p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。除非在实例中有一个名为“someattr”的 property，否则代码不会工作。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[someAttr]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="3、修饰符"><a href="#3、修饰符" class="headerlink" title="3、修饰符"></a>3、修饰符</h4><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>在接下来对 <a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-on</code></a> 和 <a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-for</code></a> 等功能的探索中，你会看到修饰符的其它例子。</p><h3 id="3-3、缩写"><a href="#3-3、缩写" class="headerlink" title="3.3、缩写"></a>3.3、缩写</h3><p>Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p><h5 id="v-bind-缩写："><a href="#v-bind-缩写：" class="headerlink" title="v-bind 缩写："></a><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-bind-%E7%BC%A9%E5%86%99"><code>v-bind</code> 缩写：</a></h5><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 完整语法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 动态参数的缩写 (2.6.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[key]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h5 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写@"></a><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-on-%E7%BC%A9%E5%86%99"><code>v-on</code> 缩写@</a></h5><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 完整语法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 动态参数的缩写 (2.6.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[event]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p><h2 id="4、计算属性和侦听器"><a href="#4、计算属性和侦听器" class="headerlink" title="4、计算属性和侦听器"></a>4、计算属性和侦听器</h2><h3 id="4-1、computed"><a href="#4-1、computed" class="headerlink" title="4.1、computed"></a>4.1、computed</h3><blockquote><p>  定义的是方法属性</p></blockquote><p><strong>基础例子</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Original message: "{{ message }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Computed reversed message: "{{ reversedMessage }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> <span class="token string">'Hello'</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>结果：</p><p>Original message: “Hello”</p><p>Computed reversed message: “olleH”</p><p><code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p><h3 id="4-2、methods"><a href="#4-2、methods" class="headerlink" title="4.2、methods"></a>4.2、methods</h3><blockquote><p>定义的是方法函数，具有缓存</p></blockquote><p>可以通过在表达式中调用方法来达到同样的效果：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Reversed message: "{{ reversedMessage() }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在组件中</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。</p><p>只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p><h3 id="4-3、侦听属性"><a href="#4-3、侦听属性" class="headerlink" title="4.3、侦听属性"></a>4.3、侦听属性</h3><blockquote><p>使用<code>watch</code> 回调的例子</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ fullName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>    fullName<span class="token punctuation">:</span> <span class="token string">'Foo Bar'</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> val    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>     fullName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3 id="4-4、计算属性的-setter"><a href="#4-4、计算属性的-setter" class="headerlink" title="4.4、计算属性的 setter"></a>4.4、计算属性的 setter</h3><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>   fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// getter</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// setter</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ...</span></code></pre><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p><h3 id="4-5、侦听器"><a href="#4-5、侦听器" class="headerlink" title="4.5、侦听器"></a>4.5、侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>watch-example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    Ask a yes/no question:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>question<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ answer }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --></span><span class="token comment" spellcheck="true">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> watchExampleVM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#watch-example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    question<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    answer<span class="token punctuation">:</span> <span class="token string">'I cannot give you an answer until you ask a question!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 `question` 发生改变，这个函数就会运行</span>    question<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newQuestion<span class="token punctuation">,</span> oldQuestion<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Waiting for you to stop typing...'</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debouncedGetAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span>    <span class="token comment" spellcheck="true">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span>    <span class="token comment" spellcheck="true">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span>    <span class="token comment" spellcheck="true">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span>    <span class="token comment" spellcheck="true">// 请参考：https://lodash.com/docs#debounce</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedGetAnswer <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getAnswer<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getAnswer<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>question<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Questions usually contain a question mark. ;-)'</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Thinking...'</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://yesno.wtf/api'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          vm<span class="token punctuation">.</span>answer <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>          vm<span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Error! Could not reach the API. '</span> <span class="token operator">+</span> error        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200716110543438.png" alt="image-20200716110543438" loading="lazy"></p><h2 id="5、Class-与-Style-绑定"><a href="#5、Class-与-Style-绑定" class="headerlink" title="5、Class 与 Style 绑定"></a>5、Class 与 Style 绑定</h2><h3 id="5-1、绑定-HTML-Class"><a href="#5-1、绑定-HTML-Class" class="headerlink" title="5.1、绑定 HTML Class"></a>5.1、绑定 HTML Class</h3><blockquote><p>使用 v-bind:class</p></blockquote><p>可以在对象中传入更多字段来动态切换多个 class。此外，<code>v-bind:class</code> 指令也可以与普通的 class attribute 共存。当有如下模板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{  active: isActive, <span class="token punctuation">'</span>text-danger<span class="token punctuation">'</span>: hasError } <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>和如下 data：</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   isActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  hasError<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span> </code></pre><p>结果渲染为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code>，class 列表将变为 <code>&quot;static active text-danger&quot;</code>。</p><blockquote><p>绑定的数据对象不必内联定义在模板里：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         classObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>             active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token string">'text-danger'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的<a href="https://cn.vuejs.org/v2/guide/computed.html">计算属性</a>。这是一个常用且强大的模式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   isActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>   classObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       active<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span>      <span class="token string">'text-danger'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fatal'</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>同样也可以用在组件上</p></blockquote><p>当在一个自定义组件上使用 <code>class</code> property 时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。</p><p>例如，如果你声明了这个组件：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   template<span class="token punctuation">:</span> <span class="token string">'&lt;p class="foo bar">Hi&lt;/p>'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>然后在使用它的时候添加一些 class：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz boo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><p>HTML 将被渲染为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo bar baz boo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="5-2、绑定内联样式"><a href="#5-2、绑定内联样式" class="headerlink" title="5.2、绑定内联样式"></a>5.2、绑定内联样式</h3><blockquote><p>使用v-bind:style</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> activeColor, <span class="token property">fontSize</span><span class="token punctuation">:</span> fontSize + <span class="token string">'px'</span> <span class="token punctuation">}</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   activeColor<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  fontSize<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span> </code></pre><p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">styleObject</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   styleObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>     color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    fontSize<span class="token punctuation">:</span> <span class="token string">'13px'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>同样的，对象语法常常结合返回对象的计算属性使用。</p><h2 id="6、条件渲染"><a href="#6、条件渲染" class="headerlink" title="6、条件渲染"></a>6、条件渲染</h2><blockquote><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>awesome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>也可以用 <code>v-else</code> 添加一个“else 块”：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>awesome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vue is awesome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>Oh no 😢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h3 id="6-1、在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#6-1、在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="6.1、在&lt;template&gt;元素上使用 v-if 条件渲染分组"></a>6.1、在<code>&lt;template&gt;</code>元素上使用 <code>v-if</code> 条件渲染分组</h3><p>最终的渲染结果将不包含 <code> &lt;template&gt;</code>元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="6-2、v-else"><a href="#6-2、v-else" class="headerlink" title="6.2、v-else"></a>6.2、<code>v-else</code></h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p><pre><code>&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;  Now you see me&lt;/div&gt;&lt;div v-else&gt;  Now you don&#39;t&lt;/div&gt;</code></pre><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><h3 id="6-3、v-else-if"><a href="#6-3、v-else-if" class="headerlink" title="6.3、v-else-if"></a>6.3、<code>v-else-if</code></h3><blockquote><p>2.1.0 新增</p></blockquote><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>C<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>  Not A/B/C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>类似于 <code>v-else</code>，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p><h3 id="6-4、用-key-管理可复用的元素"><a href="#6-4、用-key-管理可复用的元素" class="headerlink" title="6.4、用 key 管理可复用的元素"></a>6.4、用 <code>key</code> 管理可复用的元素</h3><blockquote><p>未使用key</p></blockquote><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginType <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>username<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter your email address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>那么在上面的代码中切换 <code>loginType</code> <strong>将不会清除用户已经输入的内容</strong>。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉——仅仅是替换了它的 <code>placeholder</code>。</p><p><img src="/2020/08/02/Vue/image-20200716114223068.png" alt="image-20200716114223068" loading="lazy"></p><blockquote><p>在input中增加key</p></blockquote><p>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> attribute 即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginType <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>username<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter your email address<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>现在，每次切换时，<strong>输入框都会被清空</strong>。</p><h3 id="6-5、v-show"><a href="#6-5、v-show" class="headerlink" title="6.5、v-show"></a>6.5、<code>v-show</code></h3><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p><p>==注意：<code>v-show</code> 不支持 <code>元素，也不支持</code>v-else`。==</p><h3 id="6-6、v-if-vs-v-show"><a href="#6-6、v-if-vs-v-show" class="headerlink" title="6.6、v-if vs v-show"></a>6.6、<code>v-if</code> vs <code>v-show</code></h3><ul><li><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li><li>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li><li>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</li></ul><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。请查阅<a href="https://cn.vuejs.org/v2/guide/list.html#v-for-with-v-if">列表渲染指南</a>以获取详细信息。</p><h2 id="7、列表渲染"><a href="#7、列表渲染" class="headerlink" title="7、列表渲染"></a>7、列表渲染</h2><h3 id="7-1、v-for"><a href="#7-1、v-for" class="headerlink" title="7.1、v-for"></a>7.1、<code>v-for</code></h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。<code>:</code>为<code>v-bind</code>的缩写。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ item.message }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example-1'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    items<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果：</p><ul><li>Foo</li><li>Bar</li></ul><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。<code>(item, index) in items</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ parentMessage }} - {{ index }} - {{ item.message }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> example2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example-2'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parentMessage<span class="token punctuation">:</span> <span class="token string">'Parent'</span><span class="token punctuation">,</span>    items<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果：</p><ul><li>Parent - 0 - Foo</li><li>Parent - 1 - Bar</li></ul><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item of items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>使用<code>v-for</code>遍历对象</p></blockquote><p>可以用 <code>v-for</code> 来遍历一个对象的 property。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v-for-object<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ value }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#v-for-object'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    object<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'How to do lists in Vue'</span><span class="token punctuation">,</span>      author<span class="token punctuation">:</span> <span class="token string">'Jane Doe'</span><span class="token punctuation">,</span>      publishedAt<span class="token punctuation">:</span> <span class="token string">'2016-04-10'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果：</p><p><img src="/2020/08/02/Vue/image-20200716123750861.png" alt="image-20200716123750861" loading="lazy"></p><p><strong>也可以提供第二个的参数为 property 名称 (也就是键名)：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, name) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ name }}: {{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>结果：<img src="/2020/08/02/Vue/image-20200716123818813.png" alt="image-20200716123818813" loading="lazy"></p><p><strong>还可以用第三个参数作为索引：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, name, index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ index }}. {{ name }}: {{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>结果：</p><p><img src="/2020/08/02/Vue/image-20200716123859882.png" alt="image-20200716123859882" loading="lazy"></p><p>在遍历对象时，会按 <code>Object.keys()</code> 的结果遍历，但是<strong>不能</strong>保证它的结果在不同的 JavaScript 引擎下都一致。</p><blockquote><p>提供一个唯一 <code>key</code></p></blockquote><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> attribute：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用<strong>字符串或数值类型的值。</strong></p><h3 id="7-2、数组更新检测"><a href="#7-2、数组更新检测" class="headerlink" title="7.2、数组更新检测"></a>7.2、数组更新检测</h3><h4 id="1、变更方法"><a href="#1、变更方法" class="headerlink" title="1、变更方法"></a>1、变更方法</h4><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><p>你可以打开控制台，然后对前面例子的 <code>items</code> 数组尝试调用变更方法。比如 <code>example1.items.push({  message: &#39;Baz&#39; } )</code>。</p><h4 id="2、替换数组filter"><a href="#2、替换数组filter" class="headerlink" title="2、替换数组filter"></a>2、替换数组filter</h4><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组：</p><pre class=" language-js"><code class="language-js">example1<span class="token punctuation">.</span>items <span class="token operator">=</span> example1<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/Foo/</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><p><strong>注意</strong>：由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p><h3 id="7-3、显示过滤-排序后的结果"><a href="#7-3、显示过滤-排序后的结果" class="headerlink" title="7.3、显示过滤/排序后的结果"></a>7.3、显示过滤/排序后的结果</h3><blockquote><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤 <code>filter()</code>或排序后的数组。</p></blockquote><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n in evenNumbers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   numbers<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>   evenNumbers<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>在计算属性不适用的情况下 (例如，在嵌套 <code>v-for</code> 循环中) 你可以使用一个方法<code>methods</code>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set in sets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n in even(set)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     sets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>         even<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>            <span class="token punctuation">}</span> <span class="token punctuation">)</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> </code></pre><h3 id="7-4、在-lt-template上使用v-for"><a href="#7-4、在-lt-template上使用v-for" class="headerlink" title="7.4、在 &lt;template上使用v-for"></a>7.4、在 <code>&lt;template</code>上使用<code>v-for</code></h3><p>类似于 <code>v-if</code>，你也可以利用带有 <code>v-for</code> 的 ` 来循环渲染一段包含多个元素的内容。比如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ item.msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="7-5、v-for-与-v-if-一同使用"><a href="#7-5、v-for-与-v-if-一同使用" class="headerlink" title="7.5、v-for 与 v-if 一同使用"></a>7.5、<code>v-for</code> 与 <code>v-if</code> 一同使用</h3><p><strong><code>v-for</code> 的优先级比 <code>v-if</code> 高</strong></p><blockquote><p>每次都对<code>v-for</code>循环进行判断</p></blockquote><p><code>v-for</code> 的优先级比 <code>v-if</code> 更高，这意味着 <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。当你只想为<em>部分</em>项渲染节点时，这种优先级的机制会十分有用，如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!todo.isComplete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>上面的代码将只渲染未完成的 todo。</p><blockquote><p>有条件地跳过循环的执行</p></blockquote><p>如果你的目的是有条件地跳过循环的执行，那么可以将 <code>v-if</code> 置于外层元素 (或 [`](<a href="https://cn.vuejs.org/v2/guide/conditional.html#%E5%9C%A8-lt-template-gt-%E4%B8%AD%E9%85%8D%E5%90%88-v-if-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93%E4%B8%80%E6%95%B4%E7%BB%84">https://cn.vuejs.org/v2/guide/conditional.html#在-lt-template-gt-中配合-v-if-条件渲染一整组</a>)) 上。如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ todo }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>No todos left!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="7-6、在自定义组件上使用-v-for"><a href="#7-6、在自定义组件上使用-v-for" class="headerlink" title="7.6、在自定义组件上使用 v-for"></a>7.6、在自定义组件上使用 <code>v-for</code></h3><blockquote><p>2.2.0+ 的版本里，当在组件上使用 <code>v-for</code> 时，<code>key</code> 现在是必须的。</p></blockquote><p>然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 prop</p><p>下面是一个简单的 todo 列表的完整例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-list-example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNewTodo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newTodoText<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>E.g. Feed the cat<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>      <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-item<span class="token punctuation">"</span></span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(todo, index) in todos<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo.id<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo.title<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-on:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos.splice(index, 1)<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意这里的 <code>is=&quot;todo-item&quot;</code> attribute。这种做法在使用 DOM 模板时是十分必要的，因为在 <code>ul</code> 元素内只有 <code>li</code> 元素会被看作有效内容。这样做实现的效果与 <code>&lt;todo-item&gt;</code> 相同，但是可以避开一些潜在的浏览器解析错误。查看 <a href="https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">DOM 模板解析说明</a> 来了解更多信息。</p></blockquote><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'\    &lt;li>\      {{ title }}\      &lt;button v-on:click="$emit(\'remove\')">Remove&lt;/button>\    &lt;/li>\  '</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#todo-list-example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    newTodoText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    todos<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'Do the dishes'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'Take out the trash'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'Mow the lawn'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    nextTodoId<span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    addNewTodo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextTodoId<span class="token operator">++</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newTodoText <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果：</p><p><img src="/2020/08/02/Vue/image-20200716130602603.png" alt="image-20200716130602603" loading="lazy"></p><h2 id="8、事件处理"><a href="#8、事件处理" class="headerlink" title="8、事件处理"></a>8、事件处理</h2><h3 id="8-1、监听事件"><a href="#8-1、监听事件" class="headerlink" title="8.1、监听事件"></a>8.1、监听事件</h3><blockquote><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p></blockquote><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter +<span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The button above has been clicked {{ counter }} times.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example-1'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     counter<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>结果：</p><p><img src="/2020/08/02/Vue/image-20200716144341940.png" alt="image-20200716144341940" loading="lazy"></p><h3 id="8-2、事件处理方法"><a href="#8-2、事件处理方法" class="headerlink" title="8.2、事件处理方法"></a>8.2、事件处理方法</h3><blockquote><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p></blockquote><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- `greet` 是在下面定义的方法名 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Greet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> example2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example-2'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'Vue.js'</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 在 `methods` 对象中定义方法</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     greet<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// `this` 在方法里指向当前 Vue 实例</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// `event` 是原生 DOM 事件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以用 JavaScript 直接调用方法</span>example2<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 'Hello Vue.js!'</span></code></pre><p>结果：</p><p><img src="/2020/08/02/Vue/image-20200716144736707.png" alt="image-20200716144736707" loading="lazy"></p><p><img src="/2020/08/02/Vue/image-20200716144659919.png" alt="image-20200716144659919" loading="lazy"><img src="/2020/08/02/Vue/image-20200716144707420.png" alt="image-20200716144707420" loading="lazy"></p><h3 id="8-3、内联处理器中的方法"><a href="#8-3、内联处理器中的方法" class="headerlink" title="8.3、内联处理器中的方法"></a>8.3、内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>hi<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>what<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Say what<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example-3'</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     say<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716144905024.png" alt="image-20200716144905024" loading="lazy"></p><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn(<span class="token punctuation">'</span>Form cannot be submitted yet.<span class="token punctuation">'</span>, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>   warn<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 现在我们可以访问原生事件对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>       event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="8-4、事件修饰符"><a href="#8-4、事件修饰符" class="headerlink" title="8.4、事件修饰符"></a>8.4、事件修饰符</h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code>：阻止事件</li><li><code>.prevent</code>：不再重载</li><li><code>.capture</code>：事件捕获模式，内部元素触发的事件先在此处理</li><li><code>.self</code>：事件是当前元素自身时触发处理函数</li><li><code>.once</code>：只会触发一次</li><li><code>.passive</code>：不想阻止事件的默认行为</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止单击事件继续传播 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 提交事件不再重载页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 修饰符可以串联 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只有修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加事件监听器时使用事件捕获模式 --></span><span class="token comment" spellcheck="true">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span><span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><blockquote><p>2.1.4 新增</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 点击事件将只会触发一次 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>不像其它只能对原生的 DOM 事件起作用的修饰符，<code>.once</code> 修饰符还能被用到自定义的<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html">组件事件</a>上。如果你还没有阅读关于组件的文档，现在大可不必担心。</p><blockquote><p>2.3.0 新增</p></blockquote><p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --></span><span class="token comment" spellcheck="true">&lt;!-- 而不会等待 `onScroll` 完成  --></span><span class="token comment" spellcheck="true">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>scroll.passive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onScroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p><p><strong>注意</strong>：不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<strong>不想阻止事件的默认行为</strong>。</p><h3 id="8-5、按键修饰符"><a href="#8-5、按键修饰符" class="headerlink" title="8.5、按键修饰符"></a>8.5、按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 处理函数只会在 `$event.key` 等于 `PageDown` 时被调用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.page-down</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPageDown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><blockquote><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p></blockquote><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href="https://cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可以使用 `v-on:keyup.f1`</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token number">112</span></code></pre><h3 id="8-6、系统修饰键"><a href="#8-6、系统修饰键" class="headerlink" title="8.6、系统修饰键"></a>8.6、系统修饰键</h3><blockquote><p>2.1.0 新增</p></blockquote><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><p><code>.ctrl</code></p></li><li><p><code>.alt</code></p></li><li><p><code>.shift</code></p></li><li><p><code>.meta</code></p><p>例如：</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Alt + C --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.alt.67</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Ctrl + Click --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。</p><h4 id="1、-exact-修饰符"><a href="#1、-exact-修饰符" class="headerlink" title="1、.exact 修饰符"></a>1、<code>.exact</code> 修饰符</h4><blockquote><p>2.5.0 新增</p></blockquote><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onCtrlClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.exact</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h4 id="2、鼠标按钮修饰符"><a href="#2、鼠标按钮修饰符" class="headerlink" title="2、鼠标按钮修饰符"></a>2、鼠标按钮修饰符</h4><blockquote><p>2.2.0 新增</p></blockquote><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><h2 id="9、表单输入绑定v-model"><a href="#9、表单输入绑定v-model" class="headerlink" title="9、表单输入绑定v-model"></a>9、表单输入绑定<code>v-model</code></h2><p>你可以用 <code>v-model</code> 指令在表单 <code>、</code> 及 `` 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p><h3 id="9-1、基础用法"><a href="#9-1、基础用法" class="headerlink" title="9.1、基础用法"></a>9.1、基础用法</h3><h4 id="1、文本-1"><a href="#1、文本-1" class="headerlink" title="1、文本"></a>1、文本</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="2、多行文本"><a href="#2、多行文本" class="headerlink" title="2、多行文本"></a>2、多行文本</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Multiline message is:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">white-space</span><span class="token punctuation">:</span> pre-line<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add multiple lines<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><p>在文本区域插值 (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</p><h4 id="3、复选框"><a href="#3、复选框" class="headerlink" title="3、复选框"></a>3、复选框</h4><p>单个复选框，绑定到布尔值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ checked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>多个复选框，绑定到同一个数组：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mike<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Checked names: {{ checkedNames }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     checkedNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716155109751.png" alt="image-20200716155109751" loading="lazy"></p><h4 id="4、单选按钮"><a href="#4、单选按钮" class="headerlink" title="4、单选按钮"></a>4、单选按钮</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Picked: {{ picked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example-4'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     picked<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716155056985.png" alt="image-20200716155056985" loading="lazy"></p><h4 id="5、选择框"><a href="#5、选择框" class="headerlink" title="5、选择框"></a>5、选择框</h4><ul><li>单选</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 防止苹果手机无法选择 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     selected<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716155159966.png" alt="image-20200716155159966" loading="lazy"></p><blockquote><p>如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，`` 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p></blockquote><ul><li>多选时 (绑定到一个数组)：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#example-6'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     selected<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716155443374.png" alt="image-20200716155443374" loading="lazy"></p><ul><li>用 <code>v-for</code> 渲染的动态选项：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option in options<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ option.text }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     selected<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>  text<span class="token punctuation">:</span> <span class="token string">'One'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'A'</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token punctuation">{</span>  text<span class="token punctuation">:</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'B'</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token punctuation">{</span>  text<span class="token punctuation">:</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span>     <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716155714488.png" alt="image-20200716155714488" loading="lazy"></p><h3 id="9-2、值绑定"><a href="#9-2、值绑定" class="headerlink" title="9.2、值绑定"></a>9.2、值绑定</h3><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 当选中时，`picked` 为字符串 "a" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- `toggle` 为 true 或 false --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 当选中第一个选项时，`selected` 为字符串 "abc" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>但是有时我们可能想把值绑定到 Vue 实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，并且这个 property 的值可以不是字符串。</p><h4 id="1、复选框"><a href="#1、复选框" class="headerlink" title="1、复选框"></a>1、复选框</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span>  <span class="token attr-name">true-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span>  <span class="token attr-name">false-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 当选中时</span>vm<span class="token punctuation">.</span>toggle <span class="token operator">===</span> <span class="token string">'yes'</span><span class="token comment" spellcheck="true">// 当没有选中时</span>vm<span class="token punctuation">.</span>toggle <span class="token operator">===</span> <span class="token string">'no'</span></code></pre><p>这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p><h4 id="2、单选按钮"><a href="#2、单选按钮" class="headerlink" title="2、单选按钮"></a>2、单选按钮</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pick<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 当选中时</span>vm<span class="token punctuation">.</span>pick <span class="token operator">===</span> vm<span class="token punctuation">.</span>a</code></pre><h4 id="3、选择框的选项"><a href="#3、选择框的选项" class="headerlink" title="3、选择框的选项"></a>3、选择框的选项</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 内联对象字面量 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{  number: 123 } <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 当选中时</span><span class="token keyword">typeof</span> vm<span class="token punctuation">.</span>selected <span class="token comment" spellcheck="true">// => 'object'</span>vm<span class="token punctuation">.</span>selected<span class="token punctuation">.</span>number <span class="token comment" spellcheck="true">// => 123</span></code></pre><h3 id="9-3、修饰符"><a href="#9-3、修饰符" class="headerlink" title="9.3、修饰符"></a>9.3、修饰符</h3><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h4><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了<a href="https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip">上述</a>输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 在“change”时而非“input”时更新 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h4><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h4><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="10、组件基础"><a href="#10、组件基础" class="headerlink" title="10、组件基础"></a>10、组件基础</h2><h3 id="10-1、基本示例"><a href="#10-1、基本示例" class="headerlink" title="10.1、基本示例"></a>10.1、基本示例</h3><blockquote><p>使用Vue.component()</p></blockquote><p>这里有一个 Vue 组件的示例：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个名为 button-counter 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button v-on:click="count++">You clicked me {{ count }} times.&lt;/button>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 ``。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>components-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#components-demo'</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="/2020/08/02/Vue/image-20200716161322266.png" alt="image-20200716161322266" loading="lazy"></p><h3 id="10-2、组件的复用"><a href="#10-2、组件的复用" class="headerlink" title="10.2、组件的复用"></a>10.2、组件的复用</h3><p>你可以将组件进行任意次数的复用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>components-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200716161400371.png" alt="image-20200716161400371" loading="lazy"></p><p>注意当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p><h4 id="1、data-必须是一个函数"><a href="#1、data-必须是一个函数" class="headerlink" title="1、data 必须是一个函数"></a>1、<code>data</code> 必须是一个函数</h4><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象：</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span> </code></pre><p>取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>     count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>如果 Vue 没有这条规则，点击一个按钮就可能会像如下代码一样影响到<em>其它所有实例</em>：</p><p><img src="/2020/08/02/Vue/image-20200716161605323.png" alt="image-20200716161605323" loading="lazy"></p><h3 id="10-3、组件的组织"><a href="#10-3、组件的组织" class="headerlink" title="10.3、组件的组织"></a>10.3、组件的组织</h3><p>通常一个应用会以一棵嵌套的组件树的形式来组织：</p><p><img src="/2020/08/02/Vue/components.png" alt="Component Tree" loading="lazy"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。至此，我们的组件都只是通过 <code>Vue.component</code> 全局注册的：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ... options ...</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>全局注册的组件可以用在其被注册之后的任何 (通过 <code>new Vue</code>) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p><h3 id="10-4、通过-Prop-向子组件传递数据"><a href="#10-4、通过-Prop-向子组件传递数据" class="headerlink" title="10.4、通过 Prop 向子组件传递数据"></a>10.4、通过 Prop 向子组件传递数据</h3><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>{{ title }}&lt;/h3>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>一个组件默认可以拥有任意数量的 props，任何值都可以传递给任何 props。在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问 <code>data</code> 中的值一样。</p><p>一个 props 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My journey with Vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blogging with Vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Why Vue is so fun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Vue/image-20200716162059562.png" alt="image-20200716162059562" loading="lazy"></p><blockquote><p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个博文的数组：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#blog-post-demo'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     posts<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'My journey with Vue'</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Blogging with Vue'</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>      <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Why Vue is so fun'</span> <span class="token punctuation">}</span>     <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>并想要为每篇博文渲染一个组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><p>如上所示，你会发现我们可以使用 <code>v-bind</code> 来动态传递 prop。这在你一开始不清楚要渲染的具体内容，比如<a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-component-blog-post-example">从一个 API 获取博文列表</a>的时候，是非常有用的。</p><h3 id="10-5、单个根元素"><a href="#10-5、单个根元素" class="headerlink" title="10.5、单个根元素"></a>10.5、单个根元素</h3><blockquote><p>当构建一个 <code>&lt;blog-post&gt;</code> 组件时，你的模板最终会包含的东西远不止一个标题：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre><p>最最起码，你会包含这篇博文的正文：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>然而如果你在模板中尝试这样写，Vue 会显示一个错误，并解释道 **every component must have a single root element (每个组件必须只有一个根元素)**。</p></blockquote><p>可以将模板的内容包裹在一个父元素内，来修复这个问题，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>接受一个单独的 <code>post</code> props：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>post</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div class="blog-post">      &lt;h3>{{ post.title }}&lt;/h3>      &lt;div v-html="post.content">&lt;/div>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="10-6、监听子组件事件"><a href="#10-6、监听子组件事件" class="headerlink" title="10.6、监听子组件事件"></a>10.6、监听子组件事件</h3><h4 id="1、-emit-方法"><a href="#1、-emit-方法" class="headerlink" title="1、**$emit** 方法"></a>1、**<code>$emit</code>** 方法</h4><blockquote><p> 使用<a href="https://cn.vuejs.org/v2/api/#vm-emit"><strong><code>$emit</code></strong> 方法</a>传入事件名称来触发一个事件</p></blockquote><p>在其父组件中，我们可以通过添加一个 <code>postFontSize</code> 数据 property 来支持这个功能：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#blog-posts-events-demo'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    postFontSize<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>它可以在模板中用来控制所有博文的字号：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-posts-events-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span>  <span class="token property">fontSize</span><span class="token punctuation">:</span> postFontSize + <span class="token string">'em'</span> <span class="token punctuation">}</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-bind:</span>post</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>现在我们在每篇博文正文之前添加一个按钮来放大字号：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'blog-post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div class="blog-post">      &lt;h3>{{ post.title }}&lt;/h3>      &lt;button>        Enlarge text      &lt;/button>      &lt;div v-html="post.content">&lt;/div>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>但这个时候的按钮并没有起作用</strong></p></blockquote><p>解决方法：<code>$emit(&#39;自定义方法名&#39;, &#39;参数&#39;)</code></p><p>在父组件中增加 <code>v-on</code> 监听子组件实例的任意事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">...</span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enlarge-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postFontSize +<span class="token punctuation">=</span> 0.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><p>同时子组件（模板）可以通过调用内建的 <a href="https://cn.vuejs.org/v2/api/#vm-emit"><strong><code>$emit</code></strong> 方法</a>并传入事件名称来触发一个事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>enlarge-text<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Enlarge text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h4 id="2、使用事件抛出一个值-event"><a href="#2、使用事件抛出一个值-event" class="headerlink" title="2、使用事件抛出一个值$event"></a>2、使用事件抛出一个值<code>$event</code></h4><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>enlarge-text<span class="token punctuation">'</span>, 0.1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Enlarge text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">...</span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enlarge-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postFontSize +<span class="token punctuation">=</span> $event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><blockquote><p>如果这个事件处理函数是一个方法：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>  <span class="token attr-name">...</span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enlarge-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnlargeText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span></code></pre><p>那么这个值将会作为第一个参数传入这个方法：</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>   onEnlargeText<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>enlargeAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>postFontSize <span class="token operator">+</span><span class="token operator">=</span> enlargeAmount  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="10-7、通过插槽分发内容-lt-slot-gt"><a href="#10-7、通过插槽分发内容-lt-slot-gt" class="headerlink" title="10.7、通过插槽分发内容&lt;slot&gt;"></a>10.7、通过插槽分发内容<code>&lt;slot&gt;</code></h3><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'alert-box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div class="demo-alert-box">      &lt;strong>Error!&lt;/strong>      &lt;slot>&lt;/slot>    &lt;/div>  `</span></span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>如你所见，我们只要在需要的地方加入插槽就行了——就这么简单！</p><p><img src="/2020/08/02/Vue/image-20200717120157967.png" alt="image-20200717120157967" loading="lazy"></p><p>它允许你像这样合成组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Your Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">></span></span></code></pre><p>然后你在 <code>&lt;navigation-link&gt;</code> 的模板中可能会写为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>当组件渲染的时候，<code>&lt;slot&gt;&lt;/slot&gt;</code> 将会被替换为“Your Profile”。插槽内可以包含任何模板代码，包括 HTML：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 添加一个 Font Awesome 图标 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  Your Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">></span></span></code></pre><p>甚至其它的组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 添加一个图标的组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-awesome-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-awesome-icon</span><span class="token punctuation">></span></span>  Your Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">></span></span></code></pre><p>如果 <code>&lt;navigation-link&gt;</code> 的 <code>template</code> 中<strong>没有</strong>包含一个 <code>&lt;slot&gt;</code> 元素，则该组件起始标签和结束标签之间的任何内容都会被抛弃。</p><h3 id="10-8、动态组件-is"><a href="#10-8、动态组件-is" class="headerlink" title="10.8、动态组件 is"></a>10.8、动态组件 <code>is</code></h3><p>有的时候，在不同组件之间进行动态切换是非常有用的，比如在一个多标签的界面里：</p><p><img src="/2020/08/02/Vue/image-20200716164941818.png" alt="image-20200716164941818" loading="lazy"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic-component-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>            <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab in tabs<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>tab-button<span class="token punctuation">'</span>, { active: currentTab <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> tab }]<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTab <span class="token punctuation">=</span> tab<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>        {{ tab }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-home"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Home component&lt;/div>"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-posts"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Posts component&lt;/div>"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-archive"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Archive component&lt;/div>"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">"#dynamic-component-demo"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         currentTab<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>        tabs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Home"</span><span class="token punctuation">,</span> <span class="token string">"Posts"</span><span class="token punctuation">,</span> <span class="token string">"Archive"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>         currentTabComponent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token string">"tab-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTab<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>完整代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Dynamic Components Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token class">.tab-button</span> </span><span class="token punctuation">{</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>                <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>                <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>                <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f0f0f0</span><span class="token punctuation">;</span>                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>                <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.tab-button</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#e0e0e0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.tab-button.active</span> </span><span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#e0e0e0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.tab</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic-component-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>                    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab in tabs<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>tab-button<span class="token punctuation">'</span>, { active: currentTab <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> tab }]<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTab <span class="token punctuation">=</span> tab<span class="token punctuation">"</span></span>                    <span class="token punctuation">></span></span>                {{ tab }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 引用模板 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-home"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Home component&lt;/div>"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-posts"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Posts component&lt;/div>"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tab-archive"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;div>Archive component&lt;/div>"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">"#dynamic-component-demo"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    currentTab<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>                    tabs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Home"</span><span class="token punctuation">,</span> <span class="token string">"Posts"</span><span class="token punctuation">,</span> <span class="token string">"Archive"</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    currentTabComponent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string">"tab-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTab<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="10-9、解析-DOM-模板时的注意事项"><a href="#10-9、解析-DOM-模板时的注意事项" class="headerlink" title="10.9、解析 DOM 模板时的注意事项"></a>10.9、解析 DOM 模板时的注意事项</h3><p>有些 HTML 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部。</p><p>这会导致我们使用这些有约束条件的元素时遇到一些问题。例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post-row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post-row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>这个自定义组件 <code>&lt;blog-post-row&gt;</code> 会被作为无效的内容提升到外部，并导致最终渲染结果出错。幸好这个特殊的 <code>is</code> attribute 给了我们一个变通的办法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-post-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>需要注意的是<strong>如果我们从以下来源使用模板的话，这条限制是不存在的</strong>：</p><ul><li>字符串 (例如：<code>template: &#39;...&#39;</code>)</li><li><a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件 (<code>.vue</code>)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字电子技术</title>
      <link href="/2020/08/02/%E6%95%B0%E7%94%B5/"/>
      <url>/2020/08/02/%E6%95%B0%E7%94%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="数电"><a href="#数电" class="headerlink" title="数电"></a>数电</h2><h2 id="1、进制"><a href="#1、进制" class="headerlink" title="1、进制"></a>1、进制</h2><h3 id="1-1、二转十进制"><a href="#1-1、二转十进制" class="headerlink" title="1.1、二转十进制"></a>1.1、二转十进制</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618205542166.png" alt="image-20200618205542166" loading="lazy"></p><h3 id="1-2、十转二进制"><a href="#1-2、十转二进制" class="headerlink" title="1.2、十转二进制"></a>1.2、十转二进制</h3><ol><li><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>将十进制数(37)转换为二进制数</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618205715045.png" alt="image-20200618205715045" loading="lazy"></p></li><li><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618205832673.png" alt="image-20200618205832673" loading="lazy"></p></li><li><h4 id="带小数的转换："><a href="#带小数的转换：" class="headerlink" title="带小数的转换："></a>带小数的转换：</h4><ul><li>将小数位乘以2，取整数部分</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618205940280.png" alt="image-20200618205940280" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618210306277.png" alt="image-20200618210306277" loading="lazy"></p><p><strong>误差</strong>：要求误差不大于<img src="/2020/08/02/%E6%95%B0%E7%94%B5/clip_image002.png" alt="img" loading="lazy">，即要比<img src="/2020/08/02/%E6%95%B0%E7%94%B5/clip_image002-1592485546198.png" alt="img" loading="lazy">小，所以需要精确到小数点后10位。</p></li></ol><h3 id="1-3、十六进制与二进制"><a href="#1-3、十六进制与二进制" class="headerlink" title="1.3、十六进制与二进制"></a>1.3、十六进制与二进制</h3><p>   <img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618210735280.png" alt="image-20200618210735280" loading="lazy"></p><h3 id="1-4、八进制与二进制"><a href="#1-4、八进制与二进制" class="headerlink" title="1.4、八进制与二进制"></a>1.4、八进制与二进制</h3><p>   <img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618210822817.png" alt="image-20200618210822817" loading="lazy"></p><h3 id="1-5、无符号二进制运算"><a href="#1-5、无符号二进制运算" class="headerlink" title="1.5、无符号二进制运算"></a>1.5、无符号二进制运算</h3><ol><li><p><strong>减法</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618211325577.png" alt="image-20200618211325577" loading="lazy"></p></li><li><p><strong>乘除法</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618211540689.png" alt="image-20200618211540689" loading="lazy"></p></li></ol><h3 id="1-6、带符号二进制运算"><a href="#1-6、带符号二进制运算" class="headerlink" title="1.6、带符号二进制运算"></a>1.6、带符号二进制运算</h3><ol><li><strong>符号表示：</strong></li></ol><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618211627182.png" alt="image-20200618211627182" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618211947617.png" alt="image-20200618211947617" loading="lazy"></p><h3 id="1-7、补码"><a href="#1-7、补码" class="headerlink" title="1.7、补码"></a>1.7、补码</h3><ol><li><strong>公式：</strong></li></ol><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618212234338.png" alt="image-20200618212234338" loading="lazy"></p><ol start="2"><li><p><strong>例题：</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618212129941.png" alt="image-20200618212129941" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618212154710.png" alt="image-20200618212154710" loading="lazy"></p></li><li><p><strong>原码、反码、补码</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618221939145.png" alt="image-20200618221939145" loading="lazy"></p></li><li><p><strong>补码计算</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618222234200.png" alt="image-20200618222234200" loading="lazy"></p></li></ol><h3 id="1-8、有权码、无权码"><a href="#1-8、有权码、无权码" class="headerlink" title="1.8、有权码、无权码"></a>1.8、有权码、无权码</h3><ol><li><p><strong>有权码：8421BCD码</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619174511576.png" alt="image-20200619174511576" loading="lazy"></p></li><li><p><strong>无权码：格雷码</strong></p></li></ol><h3 id="1-9、格雷码与二进制的转换"><a href="#1-9、格雷码与二进制的转换" class="headerlink" title="1.9、格雷码与二进制的转换"></a>1.9、格雷码与二进制的转换</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618222445376.png" alt="image-20200618222445376" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618222501177.png" alt="image-20200618222501177" loading="lazy"></p><h2 id="2、逻辑代数"><a href="#2、逻辑代数" class="headerlink" title="2、逻辑代数"></a>2、逻辑代数</h2><h3 id="2-1、基本定律"><a href="#2-1、基本定律" class="headerlink" title="2.1、基本定律"></a>2.1、基本定律</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618223143958.png" alt="image-20200618223143958" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618223155581.png" alt="image-20200618223155581" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618223651263.png" alt="image-20200618223651263" loading="lazy"></p><h3 id="2-2、反演律"><a href="#2-2、反演律" class="headerlink" title="2.2、反演律"></a>2.2、反演律</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618223903026.png" alt="image-20200618223903026" loading="lazy"></p><ol><li><p><strong>求非函数</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618223937942.png" alt="image-20200618223937942" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618224147735.png" alt="image-20200618224147735" loading="lazy"></p></li></ol><h3 id="2-3、对偶规则"><a href="#2-3、对偶规则" class="headerlink" title="2.3、对偶规则"></a>2.3、对偶规则</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618224320220.png" alt="image-20200618224320220" loading="lazy"></p><ol><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618224343696.png" alt="image-20200618224343696" loading="lazy"></p></li></ol><h3 id="2-4、最小项"><a href="#2-4、最小项" class="headerlink" title="2.4、最小项"></a>2.4、最小项</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618225258975.png" alt="image-20200618225258975" loading="lazy"></p><h3 id="2-5、最大项"><a href="#2-5、最大项" class="headerlink" title="2.5、最大项"></a>2.5、最大项</h3><blockquote><p>最大项与最小项为非关系</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618225609365.png" alt="image-20200618225609365" loading="lazy"></p><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618225943951.png" alt="image-20200618225943951" loading="lazy"></p><h3 id="2-6、逻辑表达式"><a href="#2-6、逻辑表达式" class="headerlink" title="2.6、逻辑表达式"></a>2.6、逻辑表达式</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230040813.png" alt="image-20200618230040813" loading="lazy"></p><h3 id="2-7、代数化简法"><a href="#2-7、代数化简法" class="headerlink" title="2.7、代数化简法"></a>2.7、代数化简法</h3><ol><li><h4 id="并项法"><a href="#并项法" class="headerlink" title="并项法"></a><strong>并项法</strong></h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230151196.png" alt="image-20200618230151196" loading="lazy"></p></li><li><h4 id="消去法"><a href="#消去法" class="headerlink" title="消去法"></a>消去法</h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230216910.png" alt="image-20200618230216910" loading="lazy"></p></li><li><h4 id="配项法"><a href="#配项法" class="headerlink" title="配项法"></a>配项法</h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230253628.png" alt="image-20200618230253628" loading="lazy"></p></li></ol><h3 id="2-8、逻辑函数形式变换"><a href="#2-8、逻辑函数形式变换" class="headerlink" title="2.8、逻辑函数形式变换"></a>2.8、逻辑函数形式变换</h3><p><strong>例题1</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230643723.png" alt="image-20200618230643723" loading="lazy"></p><p><strong>例题2</strong>（利用摩根公式可以将<strong>或变非</strong>、<strong>非变或</strong>）</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618230709835.png" alt="image-20200618230709835" loading="lazy"></p><h3 id="2-9、卡诺图化简法"><a href="#2-9、卡诺图化简法" class="headerlink" title="2.9、卡诺图化简法"></a>2.9、卡诺图化简法</h3><ol><li><h5 id="卡诺图形式"><a href="#卡诺图形式" class="headerlink" title="卡诺图形式"></a>卡诺图形式</h5><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231049610.png" alt="image-20200618231049610" loading="lazy"></p></li><li><h5 id="画出卡诺图"><a href="#画出卡诺图" class="headerlink" title="画出卡诺图"></a>画出卡诺图</h5><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231557993.png" alt="image-20200618231557993" loading="lazy"></p></li><li><h5 id="卡诺图化简法"><a href="#卡诺图化简法" class="headerlink" title="卡诺图化简法"></a>卡诺图化简法</h5><p><strong>例题1</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231727320.png" alt="image-20200618231727320" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231739418.png" alt="image-20200618231739418" loading="lazy"></p><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231824366.png" alt="image-20200618231824366" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231835296.png" alt="image-20200618231835296" loading="lazy"></p></li><li><h5 id="具有无关项的化简（无关项可有可无）"><a href="#具有无关项的化简（无关项可有可无）" class="headerlink" title="具有无关项的化简（无关项可有可无）"></a>具有无关项的化简（无关项可有可无）</h5><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200618231934573.png" alt="image-20200618231934573" loading="lazy"></p></li><li><p><strong>例题3</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621133143903.png" alt="image-20200621133143903" loading="lazy"></p></li></ol><h2 id="3、逻辑门电路"><a href="#3、逻辑门电路" class="headerlink" title="3、逻辑门电路"></a>3、逻辑门电路</h2><h3 id="3-1、CMOS基本逻辑门电路"><a href="#3-1、CMOS基本逻辑门电路" class="headerlink" title="3.1、CMOS基本逻辑门电路"></a>3.1、CMOS基本逻辑门电路</h3><ol><li><p><strong>符号</strong></p><ul><li>N沟道增强型</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619134643845.png" alt="image-20200619134643845" loading="lazy"></p><ul><li>N沟道耗尽型</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619134903088.png" alt="image-20200619134903088" loading="lazy"></p></li><li><p><strong>输出特性</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619134708126.png" alt="image-20200619134708126" loading="lazy"></p></li><li><p><strong>CMOS反相器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619135057076.png" alt="image-20200619135057076" loading="lazy"></p></li><li><p><strong>CMOS与非门</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619135933881.png" alt="image-20200619135933881" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619135526977.png" alt="image-20200619135526977" loading="lazy"></p></li><li><p><strong>CMOS或非门</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619140039054.png" alt="image-20200619140039054" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619135555695.png" alt="image-20200619135555695" loading="lazy"></p></li><li><p><strong>CMOS异或门</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619141143872.png" alt="image-20200619141143872" loading="lazy"></p></li><li><p><strong>CMOS传输门</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619141238961.png" alt="image-20200619141238961" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619141409624.png" alt="image-20200619141409624" loading="lazy"></p></li><li><p><strong>CMOS传输门的应用</strong></p><ul><li>CMOS传输门除了作为传输模拟信号的开关外，由于它的传输延迟时间短、结构简单，也作为基本单元电路，用于构成各种逻辑电路，如数据选择/分配器、触发器等。</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619141637442.png" alt="image-20200619141637442" loading="lazy"></p></li></ol><h3 id="3-2、CMOS逻辑门的保护和缓冲电路"><a href="#3-2、CMOS逻辑门的保护和缓冲电路" class="headerlink" title="3.2、CMOS逻辑门的保护和缓冲电路"></a>3.2、CMOS逻辑门的保护和缓冲电路</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619142333037.png" alt="image-20200619142333037" loading="lazy"></p><ol><li><p><strong>保护电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619142548724.png" alt="image-20200619142548724" loading="lazy"></p></li><li><p><strong>反相缓冲电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619142705893.png" alt="image-20200619142705893" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619142647280.png" alt="image-20200619142647280" loading="lazy"></p></li></ol><h3 id="3-3、CMOS漏极开路门OD"><a href="#3-3、CMOS漏极开路门OD" class="headerlink" title="3.3、CMOS漏极开路门OD"></a>3.3、CMOS漏极开路门OD</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619143018237.png" alt="image-20200619143018237" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619143041325.png" alt="image-20200619143041325" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619143438228.png" alt="image-20200619143438228" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621135523106.png" alt="image-20200621135523106" loading="lazy"></p><ul><li><p><strong>上拉电阻的计算</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619143750958.png" alt="image-20200619143750958" loading="lazy"></p></li><li><p><strong>三态门</strong></p><blockquote><p>当连通时可以传送“0”或“1”,断开时对信号线上的信息不产生影响，就需要一个特殊的电路加以控制，此电路即为三态输出电路，又称为三态门。</p><p>即具有使能端的电路元件。</p></blockquote></li></ul><h3 id="3-4、CMOS逻辑门电路的重要技术参数"><a href="#3-4、CMOS逻辑门电路的重要技术参数" class="headerlink" title="3.4、CMOS逻辑门电路的重要技术参数"></a>3.4、CMOS逻辑门电路的重要技术参数</h3><ol><li><p><strong>输入和输出的高低电平</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619144202836.png" alt="image-20200619144202836" loading="lazy"></p></li><li><p><strong>噪声容限</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619144259238.png" alt="image-20200619144259238" loading="lazy"></p><ul><li><p><strong>高电平的噪声容限</strong></p><blockquote><p>输出高电平最小 - 输入高电平最小</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619144327049.png" alt="image-20200619144327049" loading="lazy"></p></li><li><p><strong>低电平的噪声容限</strong></p><blockquote><p>输入低电平最大 - 输出低电平最大</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619144345779.png" alt="image-20200619144345779" loading="lazy"></p></li><li><p><strong>例题1</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619144616136.png" alt="image-20200619144616136" loading="lazy"></p></li><li><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622172836672.png" alt="image-20200622172836672" loading="lazy"></p></li></ul></li><li><p><strong>功耗</strong></p><ul><li><p><strong>静态功耗</strong></p><blockquote><p>所谓静态功耗是指电路输出没有状态转换时的功耗。静态时，CMOS电路的电流非常小，使得<strong>静态功耗非常低</strong>，所以CMOS电路广泛应用于要求功耗较低或电池供电的设备，如便携计算机、手机和掌上电脑等。这些设备在没有输入信号时，功耗非常低。</p></blockquote></li><li><p><strong>动态功耗</strong></p><blockquote><p>CMOS电路在输出发生状态转换时的功耗称为动态功耗。</p></blockquote></li></ul><blockquote></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619145241508.png" alt="image-20200619145241508" loading="lazy"></p><p>  <img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619145347267.png" alt="image-20200619145347267" loading="lazy"></p></li><li><p><strong>扇入扇出数</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619145513836.png" alt="image-20200619145513836" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619145528793.png" alt="image-20200619145528793" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621134658590.png" alt="image-20200621134658590" loading="lazy"></p></li></ol><h3 id="3-5、TTL逻辑门电路"><a href="#3-5、TTL逻辑门电路" class="headerlink" title="3.5、TTL逻辑门电路"></a>3.5、TTL逻辑门电路</h3><ol><li><p><strong>TTL反相器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619150250266.png" alt="image-20200619150250266" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619150936422.png" alt="image-20200619150936422" loading="lazy"></p></li><li><p><strong>与非门</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619150709497.png" alt="image-20200619150709497" loading="lazy"></p></li><li><p><strong>或非门电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619152645468.png" alt="image-20200619152645468" loading="lazy"></p></li></ol><h3 id="3-6、基本逻辑门电路的等效"><a href="#3-6、基本逻辑门电路的等效" class="headerlink" title="3.6、基本逻辑门电路的等效"></a>3.6、基本逻辑门电路的等效</h3><ol><li><p><strong>利用摩根定律变换</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619153632344.png" alt="image-20200619153632344" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619153644982.png" alt="image-20200619153644982" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619153702282.png" alt="image-20200619153702282" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619153737184.png" alt="image-20200619153737184" loading="lazy"></p></li></ol><h3 id="3-7、电路抗干扰措施"><a href="#3-7、电路抗干扰措施" class="headerlink" title="3.7、电路抗干扰措施"></a>3.7、电路抗干扰措施</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619153954607.png" alt="image-20200619153954607" loading="lazy"></p><h3 id="3-8、线与逻辑（AND）"><a href="#3-8、线与逻辑（AND）" class="headerlink" title="3.8、线与逻辑（AND）"></a>3.8、线与逻辑（AND）</h3><blockquote><p>线与逻辑，即两个输出端（包括两个以上）直接互连就可以实现<strong>“AND”</strong>的逻辑功能。在总线传输等实际应用中需要多个门的输出端并联连接使用，而一般<a href="https://baike.baidu.com/item/TTL/13973249">TTL</a>门输出端并不能直接并接使用，否则这些门的输出管之间由于低阻抗形成很大的短路电流（灌电流），而烧坏器件。在硬件上，可用<a href="https://baike.baidu.com/item/%E9%9B%86%E7%94%B5%E6%9E%81%E5%BC%80%E8%B7%AF%E9%97%A8/3202552">集电极开路门</a>（OC门）或<a href="https://baike.baidu.com/item/%E4%B8%89%E6%80%81%E9%97%A8/8708567">三态门</a>（TS门）来实现。用OC门实现线与，应同时在输出端口加一个上拉电阻。</p></blockquote><h2 id="4、组合逻辑电路"><a href="#4、组合逻辑电路" class="headerlink" title="4、组合逻辑电路"></a>4、组合逻辑电路</h2><h3 id="4-1、组合逻辑电路的分析"><a href="#4-1、组合逻辑电路的分析" class="headerlink" title="4.1、组合逻辑电路的分析"></a>4.1、组合逻辑电路的分析</h3><blockquote><p>一般步骤：</p><ol><li>写出输出端的逻辑表达式并化简</li><li>列真值表</li><li>确定逻辑功能</li></ol></blockquote><ol><li><p><strong>求反码电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154405430.png" alt="image-20200619154405430" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154421477.png" alt="image-20200619154421477" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154439080.png" alt="image-20200619154439080" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154448552.png" alt="image-20200619154448552" loading="lazy"></p></li></ol><h3 id="4-2、组合逻辑电路的设计"><a href="#4-2、组合逻辑电路的设计" class="headerlink" title="4.2、组合逻辑电路的设计"></a>4.2、组合逻辑电路的设计</h3><blockquote><p>一般步骤：</p><ol><li>明确逻辑功能，列出真值表</li><li>根据真值表写出逻辑表达式并化简</li><li>画出电路图</li></ol></blockquote><ol><li><p><strong>设计电路1</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154735468.png" alt="image-20200619154735468" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154754458.png" alt="image-20200619154754458" loading="lazy"></p></li><li><p><strong>设计电路2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619154928946.png" alt="image-20200619154928946" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619155004171.png" alt="image-20200619155004171" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619155016239.png" alt="image-20200619155016239" loading="lazy"></p></li></ol><h3 id="4-3、组合逻辑电路的优化"><a href="#4-3、组合逻辑电路的优化" class="headerlink" title="4.3、组合逻辑电路的优化"></a>4.3、组合逻辑电路的优化</h3><ol><li><p><strong>单输出电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619155946624.png" alt="image-20200619155946624" loading="lazy"></p></li><li><p><strong>多输出电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160152813.png" alt="image-20200619160152813" loading="lazy"></p></li><li><p><strong>多级逻辑电路</strong></p><ul><li><p><strong>提取公因子</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160238736.png" alt="image-20200619160238736" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160253348.png" alt="image-20200619160253348" loading="lazy"></p></li><li><p><strong>函数分解</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160358098.png" alt="image-20200619160358098" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160519632.png" alt="image-20200619160519632" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160413323.png" alt="image-20200619160413323" loading="lazy"></p></li></ul></li></ol><h3 id="4-4、组合逻辑电路中的竞争-冒险"><a href="#4-4、组合逻辑电路中的竞争-冒险" class="headerlink" title="4.4、组合逻辑电路中的竞争-冒险"></a>4.4、组合逻辑电路中的竞争-冒险</h3><blockquote><p>竞争：输入端信号同时向相反方向变化</p><p>冒险：互补信号相乘或相加</p></blockquote><ol><li><p><strong>产生的原因</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161017749.png" alt="image-20200619161017749" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160757064.png" alt="image-20200619160757064" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619160853760.png" alt="image-20200619160853760" loading="lazy"></p></li><li><p><strong>消除竞争-冒险的方法</strong></p><ul><li><p><strong>发现并消除互补相乘项</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161234874.png" alt="image-20200619161234874" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161248865.png" alt="image-20200619161248865" loading="lazy"></p></li><li><p><strong>增加相乘项以避免互补项相加</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161359923.png" alt="image-20200619161359923" loading="lazy"></p></li><li><p><strong>输出端并联电容器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161524706.png" alt="image-20200619161524706" loading="lazy"></p></li></ul></li></ol><h3 id="4-5、典型的组合逻辑电路"><a href="#4-5、典型的组合逻辑电路" class="headerlink" title="4.5、典型的组合逻辑电路"></a>4.5、典型的组合逻辑电路</h3><h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a><strong>编码器</strong></h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161726539.png" alt="image-20200619161726539" loading="lazy"></p><ul><li><p><strong>普通编码器（4线-2线编码器）</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619161950065.png" alt="image-20200619161950065" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162000856.png" alt="image-20200619162000856" loading="lazy"></p></li><li><p><strong>优先编码器（4线-2线优先编码器）</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162159091.png" alt="image-20200619162159091" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162105924.png" alt="image-20200619162105924" loading="lazy"></p></li><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162404871.png" alt="image-20200619162404871" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162415472.png" alt="image-20200619162415472" loading="lazy"></p></li></ul><h4 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h4><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619162949112.png" alt="image-20200619162949112" loading="lazy"></p><ul><li><p><strong>2线-4线译码器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619163031970.png" alt="image-20200619163031970" loading="lazy"></p></li><li><p><strong>3线-8线译码器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619163331289.png" alt="image-20200619163331289" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619163346154.png" alt="image-20200619163346154" loading="lazy"></p></li></ul><ul><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619163742686.png" alt="image-20200619163742686" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619163810839.png" alt="image-20200619163810839" loading="lazy"></p></li><li><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619164334327.png" alt="image-20200619164334327" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619164638653.png" alt="image-20200619164638653" loading="lazy"></p></li><li><p><strong>二 - 十进制译码器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619164941368.png" alt="image-20200619164941368" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619164952435.png" alt="image-20200619164952435" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619165009384.png" alt="image-20200619165009384" loading="lazy"></p></li><li><p><strong>七段显示译码器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619165140185.png" alt="image-20200619165140185" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619165152456.png" alt="image-20200619165223234" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619165600876.png" alt="image-20200619165600876" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619165900369.png" alt="image-20200619165900369" loading="lazy"></p></li></ul><h4 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a>数据选择器</h4><ol><li><p><strong>二选一数据选择器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170211589.png" alt="image-20200619170211589" loading="lazy"></p></li><li><p><strong>四选一数据选择器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170309848.png" alt="image-20200619170309848" loading="lazy"></p></li><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170611010.png" alt="image-20200619170611010" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170647291.png" alt="image-20200619170647291" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170556940.png" alt="image-20200619170556940" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170700018.png" alt="image-20200619170700018" loading="lazy"></p></li><li><p><strong>集成数据选择器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619170905079.png" alt="image-20200619170905079" loading="lazy"></p></li></ol><h4 id="数据比较器"><a href="#数据比较器" class="headerlink" title="数据比较器"></a>数据比较器</h4><ol><li><p><strong>一位数据比较器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619171111876.png" alt="image-20200619171111876" loading="lazy"></p></li><li><p><strong>两位数据比较器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619171232290.png" alt="image-20200619171232290" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619171248844.png" alt="image-20200619171248844" loading="lazy"></p></li><li><p><strong>典型数据比较器</strong></p><ul><li><p><strong>4位数据比较器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619171548385.png" alt="image-20200619171548385" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172001408.png" alt="image-20200619172001408" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619171649841.png" alt="image-20200619171649841" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172214347.png" alt="image-20200619172214347" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172221763.png" alt="image-20200619172221763" loading="lazy"></p></li></ul></li></ol><h4 id="算术运算电路"><a href="#算术运算电路" class="headerlink" title="算术运算电路"></a>算术运算电路</h4><ol><li><p><strong>半加器</strong></p><blockquote><p>只考虑两个加数本身，而不考虑低位进位的运算，称为半加。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172515044.png" alt="image-20200619172515044" loading="lazy"></p></li><li><p><strong>全加器</strong></p><blockquote><p>全加器能进行被加数、加数和来自低位的进位信号相加，并根据求和结果给出该位的进位信号。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172911218.png" alt="image-20200619172911218" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619172929091.png" alt="image-20200619172929091" loading="lazy"></p></li><li><p><strong>多位数加法器</strong></p><ul><li><p><strong>串行加法器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619173129952.png" alt="image-20200619173129952" loading="lazy"></p></li><li><p><strong>超前进位加法器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619173204235.png" alt="image-20200619173204235" loading="lazy"></p></li></ul></li><li><p><strong>减法运算</strong></p><blockquote><p>利用第一章学的补码，讲减法运算转换成补码的加法运算，先对减数求反再加一</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619173626776.png" alt="image-20200619173626776" loading="lazy"></p><ul><li><strong>A-B &gt; 0</strong></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619174629414.png" alt="image-20200619174629414" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619174643750.png" alt="image-20200619174643750" loading="lazy"></p><ul><li><p><strong>A-B &lt; 0</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619174805226.png" alt="image-20200619174805226" loading="lazy"></p></li><li><p><strong>减法运算逻辑图</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619180339762.png" alt="image-20200619180339762" loading="lazy"></p></li></ul></li></ol><h2 id="5、锁存器和触发器"><a href="#5、锁存器和触发器" class="headerlink" title="5、锁存器和触发器"></a>5、锁存器和触发器</h2><h3 id="5-1、基本双稳态电路"><a href="#5-1、基本双稳态电路" class="headerlink" title="5.1、基本双稳态电路"></a>5.1、基本双稳态电路</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619200949772.png" alt="image-20200619200949772" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619200957840.png" alt="image-20200619200957840" loading="lazy"></p><h3 id="5-2、SR锁存器"><a href="#5-2、SR锁存器" class="headerlink" title="5.2、SR锁存器"></a>5.2、SR锁存器</h3><ul><li><p><strong>基本SR锁存器</strong>（电路中S对应Q非）</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619232834309.png" alt="image-20200619232834309" loading="lazy"></p></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201055831.png" alt="image-20200619201055831" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201241822.png" alt="image-20200619201241822" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201306326.png" alt="image-20200619201306326" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201345882.png" alt="image-20200619201345882" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201415468.png" alt="image-20200619201415468" loading="lazy"></p><ul><li><p><strong>用与非门构成的SR锁存器</strong>（S非对应Q）</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201900498.png" alt="image-20200619201900498" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201907948.png" alt="image-20200619201907948" loading="lazy"></p></li><li><p><strong>基本SR锁存器的应用</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619202413694.png" alt="image-20200619202413694" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619202450700.png" alt="image-20200619202450700" loading="lazy"></p></li><li><p><strong>门控锁存器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619202749535.png" alt="image-20200619202749535" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619203352000.png" alt="image-20200619203352000" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619203602368.png" alt="image-20200619203602368" loading="lazy"></p></li></ul><h3 id="5-3、D锁存器"><a href="#5-3、D锁存器" class="headerlink" title="5.3、D锁存器"></a>5.3、D锁存器</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619203937544.png" alt="image-20200619203937544" loading="lazy"></p><ul><li><p><strong>传输门控D锁存器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619203902797.png" alt="image-20200619203902797" loading="lazy"></p></li><li><p><strong>逻辑门控D锁存器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619204244989.png" alt="image-20200619204244989" loading="lazy"></p></li><li><p><strong>典型的D锁存器集成电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619204952556.png" alt="image-20200619204952556" loading="lazy"></p></li></ul><h3 id="5-4、触发器"><a href="#5-4、触发器" class="headerlink" title="5.4、触发器"></a>5.4、触发器</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619201522618.png" alt="image-20200619201522618" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619205502014.png" alt="image-20200619205502014" loading="lazy"></p><h3 id="5-5、D触发器"><a href="#5-5、D触发器" class="headerlink" title="5.5、D触发器"></a>5.5、D触发器</h3><ol><li><p><strong>特性表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619205559135.png" alt="image-20200619205559135" loading="lazy"></p></li><li><p><strong>特性方程</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619205647188.png" alt="image-20200619205647188" loading="lazy"></p></li></ol><h3 id="5-6、JK触发器"><a href="#5-6、JK触发器" class="headerlink" title="5.6、JK触发器"></a>5.6、JK触发器</h3><ol><li><p><strong>特性表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619205734214.png" alt="image-20200619205734214" loading="lazy"></p></li><li><p><strong>特性方程</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619205752012.png" alt="image-20200619205752012" loading="lazy"></p></li><li><p><strong>总结</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619210437152.png" alt="image-20200619210437152" loading="lazy"></p></li></ol><h3 id="5-7、T触发器"><a href="#5-7、T触发器" class="headerlink" title="5.7、T触发器"></a>5.7、T触发器</h3><blockquote><p>T = 0 保持</p><p>T = 1 翻转</p></blockquote><ol><li><p><strong>特性表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619212507363.png" alt="image-20200619212507363" loading="lazy"></p></li><li><p><strong>特性方程</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619212520684.png" alt="image-20200619212520684" loading="lazy"></p></li><li><p><strong>T‘ 触发器</strong>（T恒为1）</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619213626318.png" alt="image-20200619213626318" loading="lazy"></p></li></ol><h3 id="5-8、SR触发器"><a href="#5-8、SR触发器" class="headerlink" title="5.8、SR触发器"></a>5.8、SR触发器</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619213738494.png" alt="image-20200619213738494" loading="lazy"></p><ul><li>S = 0，R = 0 时，Qn+1 = Qn（保持）</li><li>S = 0，R = 1 时，Qn+1 =0</li><li>S = 1，R = 0 时，Qn+1 = 1</li><li>S = 1，R = 1 时，Qn+1 不确定</li></ul><h3 id="5-9、D触发器的转换"><a href="#5-9、D触发器的转换" class="headerlink" title="5.9、D触发器的转换"></a>5.9、D触发器的转换</h3><ol><li><p><strong>D触发器构成JK触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619213926618.png" alt="image-20200619213926618" loading="lazy"></p></li><li><p><strong>D触发器构成T触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619214153166.png" alt="image-20200619214153166" loading="lazy"></p></li></ol><h2 id="6、时序逻辑电路"><a href="#6、时序逻辑电路" class="headerlink" title="6、时序逻辑电路"></a>6、时序逻辑电路</h2><blockquote><p>电路状态：</p><ol><li>有效状态：被利用了的状态</li><li>有效循环：有效状态构成的循环</li><li>无效状态：没有被利用的状态</li><li>无效循环：无效状态构成的循环</li><li>能自启动：无效状态没有构成循环</li><li>不能自启动：无效状态构成循环</li></ol></blockquote><h3 id="6-1、时序逻辑电路的基本结构"><a href="#6-1、时序逻辑电路的基本结构" class="headerlink" title="6.1、时序逻辑电路的基本结构"></a>6.1、时序逻辑电路的基本结构</h3><ol><li><p><strong>基本结构</strong></p><p>激励方程、转换方程、输出方程</p></li><li><p><strong>异步同步时序电路</strong></p><ul><li><strong>异步</strong>：电路中触发器的时钟输入端没有连接在统一的时钟脉冲上，或电路中没有时钟脉冲（如SR锁存器构成的时序电路），从而电路中各存储单元的状态更新不是同时发生的。</li><li><strong>同步</strong>：存储电路状态的转换是在同一时钟脉冲源的同一边沿作用下同步动作的。</li></ul></li><li><p><strong>米利型和穆尔型时序电路</strong></p><ul><li><p><strong>米利型</strong><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619220854716.png" alt="image-20200619220854716" loading="lazy"></p></li><li><p><strong>穆尔型</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619220949443.png" alt="image-20200619220949443" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619220957290.png" alt="image-20200619220957290" loading="lazy"></p></li></ul></li><li><p><strong>时序逻辑电路功能的表达</strong></p><blockquote><p>功能可用逻辑方程组、转换表、状态表、状态图和时序图等形式表达</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221230674.png" alt="image-20200619221230674" loading="lazy"></p><ol><li><p><strong>逻辑方程组</strong></p><ul><li><p>激励方程组</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221337865.png" alt="image-20200619221337865" loading="lazy"></p></li><li><p>转换方程组</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221703636.png" alt="image-20200619221703636" loading="lazy"></p></li><li><p>输出方程</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221720488.png" alt="image-20200619221720488" loading="lazy"></p></li></ul><p>上述三组方程中，激励方程组合输出方程组表达了时序电路中全部组合电路的特性，而转换方程组则表达了存储电路从现态到次态的状态转换特性。</p></li><li><p><strong>转换表</strong></p><ul><li>真值表</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221925787.png" alt="image-20200619221925787" loading="lazy"></p><ul><li>转换表</li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619221958063.png" alt="image-20200619221958063" loading="lazy"></p></li><li><p><strong>状态表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222134398.png" alt="image-20200619222134398" loading="lazy"></p></li><li><p><strong>状态图</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222152700.png" alt="image-20200619222152700" loading="lazy"></p></li><li><p><strong>时序图</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222218208.png" alt="image-20200619222218208" loading="lazy"></p></li></ol></li></ol><h3 id="6-2、同步时序逻辑电路的分析"><a href="#6-2、同步时序逻辑电路的分析" class="headerlink" title="6.2、同步时序逻辑电路的分析"></a>6.2、同步时序逻辑电路的分析</h3><blockquote><p>一般步骤：</p><ol><li>根据电路列出三个方程组<ul><li>激励方程组</li><li>转换方程组</li><li>输出方程</li></ul></li><li>列出转换表</li><li>画出状态图</li><li>画出时序图</li><li>逻辑功能分析</li></ol></blockquote><ol><li><p><strong>分析例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222357645.png" alt="image-20200619222357645" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222456804.png" alt="image-20200619222456804" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222609414.png" alt="image-20200619222609414" loading="lazy"></p><ol start="2"><li><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619222935185.png" alt="image-20200619222935185" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619223030856.png" alt="image-20200619223030856" loading="lazy"></p></li></ol></li></ol><h3 id="6-3、同步时序逻辑电路的设计"><a href="#6-3、同步时序逻辑电路的设计" class="headerlink" title="6.3、同步时序逻辑电路的设计"></a>6.3、同步时序逻辑电路的设计</h3><blockquote><p>一般步骤：</p><ol><li>列出转换表</li><li>确定激励方程组</li><li>画出逻辑图</li><li>检查自启动</li><li>画出状态图</li></ol></blockquote><blockquote><p>方法二：</p><ol><li>画出状态转换卡诺图</li><li>利用无关项求出最简转换方程</li><li>转换方程配项，求出激励方程</li><li>画出逻辑电路图</li></ol></blockquote><ol><li><p><strong>一般步骤</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619223350855.png" alt="image-20200619223350855" loading="lazy"></p></li><li><p><strong>电路设计例题1</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619223434774.png" alt="image-20200619223434774" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619223513903.png" alt="image-20200619223513903" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619223529897.png" alt="image-20200619223529897" loading="lazy"></p></li><li><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622120811610.png" alt="image-20200622120811610" loading="lazy"></p></li><li><p><strong>例题3</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622121218816.png" alt="image-20200622121218816" loading="lazy"></p></li><li><p><strong>同步时序逻辑电路的时钟偏移</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619225356363.png" alt="image-20200619225356363" loading="lazy"></p></li></ol><h3 id="6-4、异步时序逻辑电路的分析"><a href="#6-4、异步时序逻辑电路的分析" class="headerlink" title="6.4、异步时序逻辑电路的分析"></a>6.4、异步时序逻辑电路的分析</h3><blockquote><p>一般步骤：</p><ol><li>列出各逻辑方程组<ul><li>时钟方程组</li><li>激励方程组</li><li>转换方程组</li><li>输出方程</li></ul></li><li>列出真值表</li><li>画出状态图（和时序图）</li><li>逻辑功能分析</li></ol></blockquote><ol><li><p><strong>例题分析</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619225504806.png" alt="image-20200619225504806" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619225531211.png" alt="image-20200619225531211" loading="lazy"></p></li><li><p><strong>例题分析2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619230026940.png" alt="image-20200619230026940" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619230044715.png" alt="image-20200619230044715" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619230123563.png" alt="image-20200619230123563" loading="lazy"></p></li></ol><h3 id="6-5、寄存器"><a href="#6-5、寄存器" class="headerlink" title="6.5、寄存器"></a>6.5、寄存器</h3><ul><li><strong>八位寄存器</strong></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619231325214.png" alt="image-20200619231325214" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619231341310.png" alt="image-20200619231341310" loading="lazy"></p><ul><li><p><strong>移位寄存器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619231638465.png" alt="image-20200619231638465" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619231659611.png" alt="image-20200619231659611" loading="lazy"></p></li></ul><h3 id="6-6、计数器"><a href="#6-6、计数器" class="headerlink" title="6.6、计数器"></a>6.6、计数器</h3><blockquote><p>同步计数器的工作速度一般高于异步计数器</p></blockquote><ul><li><p><strong>4位异步计数器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619233451764.png" alt="image-20200619233451764" loading="lazy"></p></li><li><p><strong>转换表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619233528732.png" alt="image-20200619233528732" loading="lazy"></p></li><li><p><strong>递减计数器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619234007501.png" alt="image-20200619234007501" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619234129436.png" alt="image-20200619234129436" loading="lazy"></p></li><li><p><strong>异步清零和同步置数</strong></p><blockquote><p>异步清零速度比同步置数速度快，即清零信号有效时，无视触发脉冲，立即清零；</p><p>同步是时钟触发条件满足时检测清零信号是否有效，有效则在下一个时间周期的触发条件下，执行清零。</p></blockquote></li><li><p><strong>在九计数器中的不同使用</strong></p><ol><li><p><strong>使用异步清零（速度快）</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619235010604.png" alt="image-20200619235010604" loading="lazy"></p></li><li><p><strong>使用同步置数</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200619235027992.png" alt="image-20200619235027992" loading="lazy"></p></li></ol></li></ul><h2 id="7、半导体存储器"><a href="#7、半导体存储器" class="headerlink" title="7、半导体存储器"></a>7、半导体存储器</h2><blockquote><p>目前，半导体存储器基本上可以分为两大类。</p><ol><li>只读存储器ROM</li><li>随机存取存储器RAM，又称为读写存储器。</li></ol></blockquote><h3 id="7-1、ROM只读存储器"><a href="#7-1、ROM只读存储器" class="headerlink" title="7.1、ROM只读存储器"></a>7.1、ROM只读存储器</h3><blockquote><p>ROM是一种永久性数据存储器，其中的数据一般由专用的装置写入，数据一旦写入，不能随意改写，在切断电源之后，数据也不会消失。</p></blockquote><ol><li><p><strong>结构示意图</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620110846117.png" alt="image-20200620110846117" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620110958971.png" alt="image-20200620110958971" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620111322999.png" alt="image-20200620111322999" loading="lazy"></p></li><li><p><strong>可编程ROM</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620111503854.png" alt="image-20200620111503854" loading="lazy"></p></li><li><p><strong>ROM应用实例</strong></p><p>二进制与格雷码的相互转换</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620111806051.png" alt="image-20200620111806051" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620111838609.png" alt="image-20200620111838609" loading="lazy"></p></li></ol><h3 id="7-2、SRAM随机存取存储器"><a href="#7-2、SRAM随机存取存储器" class="headerlink" title="7.2、SRAM随机存取存储器"></a>7.2、SRAM随机存取存储器</h3><ol><li><p><strong>SRAM基本结构和输出</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112107038.png" alt="image-20200620112107038" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112114743.png" alt="image-20200620112114743" loading="lazy"></p></li><li><p><strong>SRAM存储单元</strong></p><blockquote><p>SRAM与ROM最主要的差别就是存储单元。SRAM的存储单元是由锁存器构成的，属于时序逻辑电路。</p><p>SRAM中数据由锁存器记忆，只要不断电，数据就能永久保存。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112229923.png" alt="image-20200620112229923" loading="lazy"></p></li><li><p><strong>读写操作及顶视图</strong></p><ul><li><strong>读操作</strong></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112521753.png" alt="image-20200620112521753" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112540171.png" alt="image-20200620112540171" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112548814.png" alt="image-20200620112548814" loading="lazy"></p><ul><li><strong>写操作</strong></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112619874.png" alt="image-20200620112619874" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112629615.png" alt="image-20200620112629615" loading="lazy"></p></li><li><p><strong>同步SRAM</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112902820.png" alt="image-20200620112902820" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620112911145.png" alt="image-20200620112911145" loading="lazy"></p></li></ol><h3 id="7-3、存储容量的扩展"><a href="#7-3、存储容量的扩展" class="headerlink" title="7.3、存储容量的扩展"></a>7.3、存储容量的扩展</h3><ol><li><p><strong>字长(位数)的扩展</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620113108330.png" alt="image-20200620113108330" loading="lazy"></p></li><li><p><strong>字数的扩展</strong></p><blockquote><p>利用2线 - 4线译码器将4个8K x 8位的RAM芯片扩展为32K x 8位的存储系统，每次只有一个被选择。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620113257175.png" alt="image-20200620113257175" loading="lazy"></p></li></ol><h3 id="7-4、RAM应用举例"><a href="#7-4、RAM应用举例" class="headerlink" title="7.4、RAM应用举例"></a>7.4、RAM应用举例</h3><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620113758554.png" alt="image-20200620113758554" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620113815872.png" alt="image-20200620113815872" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620113827464.png" alt="image-20200620113827464" loading="lazy"></p><h3 id="7-5、例题分析"><a href="#7-5、例题分析" class="headerlink" title="7.5、例题分析"></a>7.5、例题分析</h3><ol><li><p><strong>例题1</strong></p><blockquote><p>进行位（字数）扩展：输入端增加</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622143256567.png" alt="image-20200622143256567" loading="lazy"></p></li><li><p><strong>例题2</strong></p><blockquote><p>进行容量（字节）扩展：将输出端连接起来，但需要进行控制使能端C，一次只能一片使能。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622143308435.png" alt="image-20200622143308435" loading="lazy"></p></li><li><p><strong>例题3</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622143325876.png" alt="image-20200622143325876" loading="lazy"></p></li></ol><h2 id="8、脉冲波形的变换与产生"><a href="#8、脉冲波形的变换与产生" class="headerlink" title="8、脉冲波形的变换与产生"></a>8、脉冲波形的变换与产生</h2><h3 id="8-1、单稳态触发器"><a href="#8-1、单稳态触发器" class="headerlink" title="8.1、单稳态触发器"></a>8.1、单稳态触发器</h3><ol><li><p><strong>用门电路组成的单稳态触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620114745094.png" alt="image-20200620114745094" loading="lazy"></p></li><li><p><strong>主要参数的计算</strong></p><ul><li><p><strong>输出脉冲宽度</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620161026121.png" alt="image-20200620161026121" loading="lazy"></p></li><li><p><strong>恢复时间</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620161115411.png" alt="image-20200620161115411" loading="lazy"></p></li><li><p><strong>最高工作频率</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620161138143.png" alt="image-20200620161138143" loading="lazy"></p></li></ul></li><li><p><strong>集成单稳态触发器</strong></p><ul><li><p><strong>前触发沿和后触发沿</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620161310467.png" alt="image-20200620161310467" loading="lazy"></p></li><li><p><strong>可重复触发</strong>：在暂稳态（触发状态）期间，如有脉冲加入，电路会被输入脉冲重复触发，<strong>暂稳态将延长</strong>，在最后一个脉冲的触发沿在延时t 时间。</p></li><li><p><strong>不可重复触发</strong>：在暂稳态期间，如有触发脉冲加入，电路的输出脉宽不受其影响，仍由R、C参数值确定。</p></li></ul></li><li><p><strong>不可重复触发的集成单稳态触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620163506549.png" alt="image-20200620163506549" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620163547929.png" alt="image-20200620163547929" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620163607727.png" alt="image-20200620163607727" loading="lazy"></p></li><li><p><strong>单稳态触发器的应用</strong></p><ul><li><p><strong>定时</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620164144902.png" alt="image-20200620164144902" loading="lazy"></p></li><li><p><strong>延时</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620164241146.png" alt="image-20200620164241146" loading="lazy"></p></li><li><p><strong>噪声消除电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620164940418.png" alt="image-20200620164940418" loading="lazy"></p></li></ul></li></ol><h3 id="8-2、施密特触发器"><a href="#8-2、施密特触发器" class="headerlink" title="8.2、施密特触发器"></a>8.2、施密特触发器</h3><blockquote><p>施密特触发器常用于波形变换、幅度鉴别等，当输入信号到达某一电压值时，输出电压会发生跳变。</p><p>可分为同相输出和反向输出。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620165223582.png" alt="image-20200620165223582" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170609402.png" alt="image-20200620170609402" loading="lazy"></p><ol><li><p><strong>用门电路组成的施密特触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170355219.png" alt="image-20200620170355219" loading="lazy"></p></li><li><p><strong>正向阈值电压</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170444897.png" alt="image-20200620170444897" loading="lazy"></p></li><li><p><strong>反向阈值电压</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170504072.png" alt="image-20200620170504072" loading="lazy"></p></li><li><p><strong>回差电压</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170801934.png" alt="image-20200620170801934" loading="lazy"></p></li><li><p><strong>最大允许电流值</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620171104330.png" alt="image-20200620171104330" loading="lazy"></p></li><li><p><strong>例题分析</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170635139.png" alt="image-20200620170635139" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620170658036.png" alt="image-20200620170658036" loading="lazy"></p></li><li><p><strong>例题2</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622125844985.png" alt="image-20200622125844985" loading="lazy"></p></li><li><p><strong>集成施密特触发器</strong></p></li></ol><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620171150523.png" alt="image-20200620171150523" loading="lazy"></p><ol start="8"><li><p><strong>施密特触发器的应用</strong></p><ul><li><p><strong>波形变换</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620171527886.png" alt="image-20200620171527886" loading="lazy"></p></li><li><p><strong>整形与抗干扰</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620171547765.png" alt="image-20200620171547765" loading="lazy"></p></li><li><p><strong>幅值鉴别</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620171647238.png" alt="image-20200620171647238" loading="lazy"></p></li></ul></li></ol><h3 id="8-3、多谐振荡电路"><a href="#8-3、多谐振荡电路" class="headerlink" title="8.3、多谐振荡电路"></a>8.3、多谐振荡电路</h3><blockquote><p>多谐振荡电路是一种自激振荡电路，不需要外加触发信号就能自行产生一定频率和幅值的矩形波，也被称为多谐振荡器。</p><p>由于工作过程没有稳定状态，所以也被称为无稳态电路。</p></blockquote><ol><li><p><strong>门电路组成的多谐振荡器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172059195.png" alt="image-20200620172059195" loading="lazy"></p><ul><li><strong>振荡周期的计算</strong></li></ul><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172350464.png" alt="image-20200620172350464" loading="lazy"></p><ul><li><p><strong>T1的计算</strong>：<img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172423152.png" alt="image-20200620172423152" loading="lazy"></p></li><li><p><strong>T2的计算：</strong><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172509369.png" alt="image-20200620172509369" loading="lazy"></p></li><li><p><strong>总周期T的计算：</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172541593.png" alt="image-20200620172541593" loading="lazy"></p></li></ul></li><li><p><strong>用施密特触发器构成多谐振荡器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172655203.png" alt="image-20200620172655203" loading="lazy"></p><ul><li><p><strong>振荡周期的计算</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172854066.png" alt="image-20200620172854066" loading="lazy"></p></li><li><p><strong>例题分析</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172655203.png" alt="image-20200620172655203" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620172914557.png" alt="image-20200620172914557" loading="lazy"></p></li></ul></li><li><p><strong>石英晶体多谐震荡器</strong></p><blockquote><p>石英晶体振荡器的振荡频率不仅频率稳定度极高，而且频率的范围也很宽，它的频率范围可从几百赫兹到几百兆赫兹。</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620173400270.png" alt="image-20200620173400270" loading="lazy"></p></li></ol><h3 id="8-4、555定时器及其应用"><a href="#8-4、555定时器及其应用" class="headerlink" title="8.4、555定时器及其应用"></a>8.4、555定时器及其应用</h3><blockquote><p>555定时器是一种模、数混合的中规模集成电路，它使用方便、灵活，应用极为广泛。可用它很方便地组成脉冲的产生、整形、延时和定时电路。</p></blockquote><blockquote><p>三种类型的区别：</p><ol><li>单稳态触发器：t = 1.1RC、可以放电到0</li><li>多谐震荡电路：充电t = 0.7(R1 + R2)C 、放电t = 0.7R2C</li><li>占空比可调多谐震荡：充电t = 0.7RaC、 放电t = 0.7RbC</li></ol></blockquote><ol><li><p><strong>电路结构</strong></p><p>利用了SR锁存器（用与非门组成），以及电压比较器。</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620173924285.png" alt="image-20200620173924285" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620174009306.png" alt="image-20200620174009306" loading="lazy"></p></li><li><p><strong>电路功能表</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620174316280.png" alt="image-20200620174316280" loading="lazy"></p></li><li><p><strong>用555定时器组成的施密特触发器</strong></p><blockquote><p>v1从0开始增加</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620174416122.png" alt="image-20200620174416122" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620174802090.png" alt="image-20200620174802090" loading="lazy"></p></li><li><p><strong>用555组成的单稳态触发器</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620175253352.png" alt="image-20200620175253352" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620175325877.png" alt="image-20200620175325877" loading="lazy"></p></li><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622132117912.png" alt="image-20200622132117912" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622132125822.png" alt="image-20200622132125822" loading="lazy"></p></li><li><p><strong>用555组成的多谐振荡电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620175414666.png" alt="image-20200620175414666" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200620175536971.png" alt="image-20200620175536971" loading="lazy"></p></li><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622132859444.png" alt="image-20200622132859444" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622132907042.png" alt="image-20200622132907042" loading="lazy"></p></li><li><p><strong>占空比可调的多谐震荡电路</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622133623606.png" alt="image-20200622133623606" loading="lazy"></p></li><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622133642589.png" alt="image-20200622133642589" loading="lazy"></p></li></ol><h2 id="9、数模与模数转换器"><a href="#9、数模与模数转换器" class="headerlink" title="9、数模与模数转换器"></a>9、数模与模数转换器</h2><h3 id="9-1、D-A数模转换器"><a href="#9-1、D-A数模转换器" class="headerlink" title="9.1、D/A数模转换器"></a>9.1、D/A数模转换器</h3><ol><li><p><strong>倒T形电阻网络D/A转换器</strong>（需要考虑Rf 是否和 R相同）</p><blockquote><p><strong>电压公式</strong>：下图四个部分，所以是2^4<img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621112254787.png" alt="image-20200621112254787" loading="lazy"></p></blockquote></li></ol><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621111730895.png" alt="image-20200621111730895" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621111745322.png" alt="image-20200621111745322" loading="lazy"></p><ol start="2"><li><p><strong>权电阻网络D/A转换器</strong></p><p>输出电压：（不需要考虑Rf）<img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622140208742.png" alt="image-20200622140208742" loading="lazy"></p></li><li><p><strong>权电流网络D/A转换器</strong></p><p>输出电压：（与倒T的区别在于为正数）</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622140434906.png" alt="image-20200622140434906" loading="lazy"></p><p>原理电路</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622140552775.png" alt="image-20200622140552775" loading="lazy"></p></li></ol><h3 id="9-2、主要参数"><a href="#9-2、主要参数" class="headerlink" title="9.2、主要参数"></a>9.2、主要参数</h3><ol><li><p><strong>分辨率</strong></p><p>输出电压增量VLSB</p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621112910924.png" alt="image-20200621112910924" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621112922960.png" alt="image-20200621112922960" loading="lazy"></p><ul><li><p><strong>例题</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621112947351.png" alt="image-20200621112947351" loading="lazy"></p></li></ul></li><li><p><strong>比例系数误差</strong></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621113159338.png" alt="image-20200621113159338" loading="lazy"></p></li><li><p><strong>转换误差</strong></p><blockquote><p>常用电压满刻度FSR的百分数表示，也可以用最低有效位的倍数表示。</p><p>例如：转换误差1/2LSB表示为最小输出电压的一半。</p></blockquote></li><li><p><strong>转换速度</strong></p><blockquote><p>T = t(建立时间) + U(max) / S(速度)</p><p>完成一次转换的时间为 = 建立时间 + 上升(下降)的时间</p></blockquote></li></ol><h3 id="9-3、A-D模数转换器"><a href="#9-3、A-D模数转换器" class="headerlink" title="9.3、A/D模数转换器"></a>9.3、A/D模数转换器</h3><ol><li><p><strong>并行比较型A/D转换器</strong></p><blockquote><p>计算输入电压 所处在的区间即可，数值大于0，1，3，5，7，9，11，13</p><p>分别对应十进制0，1，2，3，4，5，6，7</p><p>在转为二进制即可</p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621113656040.png" alt="image-20200621113656040" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621114106953.png" alt="image-20200621114106953" loading="lazy"></p><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200621113708498.png" alt="image-20200621113708498" loading="lazy"></p></li><li><p><strong>逐次比较型A/D转换器</strong></p><blockquote><p>完成一次转换所需时间与其位数n和时钟脉冲频率有关，位数越少，时钟频率越高，转换所需时间越短。这种转换器具有转换速度快、精度高的特点。</p><p><strong>完成一次转换的时间：t = (n + 2)Tcp</strong></p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622140739811.png" alt="image-20200622140739811" loading="lazy"></p></li></ol><ol start="3"><li><p><strong>双积分式A/D转换器</strong></p><blockquote><p>双积分式A/D转换器是一种间接A/D转换器。采用对输入模拟电压和参考电压分别进行两次积分，将输入电压平均值变换成与之成正比的时间间隔，然后利用时钟脉冲和计数器测出此时间间隔，进而输出端得到与模拟量相应的数字量。</p><p><strong>最大转换时间为:</strong>  <img src="/2020/08/02/%E6%95%B0%E7%94%B5/clip_image002-1592806436789.gif" alt="img" loading="lazy"></p></blockquote><p><img src="/2020/08/02/%E6%95%B0%E7%94%B5/image-20200622141315168.png" alt="image-20200622141315168" loading="lazy"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 光电课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课内 </tag>
            
            <tag> 电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理光学</title>
      <link href="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/"/>
      <url>/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="物理光学"><a href="#物理光学" class="headerlink" title="物理光学"></a>物理光学</h1><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200802231353471.png" alt="image-20200802231353471" loading="lazy"></p><h2 id="考核方式"><a href="#考核方式" class="headerlink" title="考核方式"></a>考核方式</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530180918599.png" alt="image-20200530180918599" loading="lazy"></p><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530180949695.png" alt="image-20200530180949695" loading="lazy"></p><h2 id="光在原子尺度上的表现"><a href="#光在原子尺度上的表现" class="headerlink" title="光在原子尺度上的表现"></a>光在原子尺度上的表现</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530181042965.png" alt="image-20200530181042965" loading="lazy"></p><h2 id="光学的内容"><a href="#光学的内容" class="headerlink" title="光学的内容"></a>光学的内容</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530181111226.png" alt="image-20200530181111226" loading="lazy"></p><hr><h1 id="1、光的波动模型01"><a href="#1、光的波动模型01" class="headerlink" title="1、光的波动模型01"></a>1、光的波动模型01</h1><p><strong>（本周包含三部分）</strong></p><h2 id="1-1、光波长的范围"><a href="#1-1、光波长的范围" class="headerlink" title="1.1、光波长的范围"></a>1.1、光波长的范围</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175348485.png" alt="image-20200530175348485" loading="lazy"></p><h2 id="1-2、光波的产生"><a href="#1-2、光波的产生" class="headerlink" title="1.2、光波的产生"></a>1.2、光波的产生</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175424799.png" alt="image-20200530175424799" loading="lazy"></p><hr><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175524893.png" alt="image-20200530175524893" loading="lazy"></p><h2 id="1-3、光波的空间和时间周期性"><a href="#1-3、光波的空间和时间周期性" class="headerlink" title="1.3、光波的空间和时间周期性"></a>1.3、光波的空间和时间周期性</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175606690.png" alt="image-20200530175606690" loading="lazy"></p><hr><h2 id="1-4、光通量与光强"><a href="#1-4、光通量与光强" class="headerlink" title="1.4、光通量与光强"></a>1.4、光通量与光强</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175627836.png" alt="image-20200530175627836" loading="lazy"></p><h3 id="介质折射率"><a href="#介质折射率" class="headerlink" title="介质折射率"></a>介质折射率</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175702200.png" alt="image-20200530175702200" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175811693.png" alt="image-20200530175811693" loading="lazy"></p><h2 id="1-5、能流密度"><a href="#1-5、能流密度" class="headerlink" title="1.5、能流密度"></a>1.5、能流密度</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530175745241.png" alt="image-20200530175745241" loading="lazy"></p><h2 id="1-6、光的传播"><a href="#1-6、光的传播" class="headerlink" title="1.6、光的传播"></a>1.6、光的传播</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530180031922.png" alt="image-20200530180031922" loading="lazy"></p><hr><h2 id="1-7、简谐（定态）光波及其描述"><a href="#1-7、简谐（定态）光波及其描述" class="headerlink" title="1.7、简谐（定态）光波及其描述"></a>1.7、简谐（定态）光波及其描述</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530180517326.png" alt="image-20200530180517326" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530180605036.png" alt="image-20200530180605036" loading="lazy"></p><hr><h1 id="2、光的波动模型02"><a href="#2、光的波动模型02" class="headerlink" title="2、光的波动模型02"></a>2、光的波动模型02</h1><h2 id="2-1、定态光波按波面分类"><a href="#2-1、定态光波按波面分类" class="headerlink" title="2.1、定态光波按波面分类"></a>2.1、定态光波按波面分类</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172031159.png" alt="image-20200530172031159" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172048194.png" alt="image-20200530172048194" loading="lazy"></p><h2 id="2-2、平面波的表达式"><a href="#2-2、平面波的表达式" class="headerlink" title="2.2、平面波的表达式"></a>2.2、平面波的表达式</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172451773.png" alt="image-20200530172451773" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172749681.png" alt="image-20200530172749681" loading="lazy"></p><h2 id="2-3、波矢的方向角表示"><a href="#2-3、波矢的方向角表示" class="headerlink" title="2.3、波矢的方向角表示"></a>2.3、波矢的方向角表示</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172138688.png" alt="image-20200530172138688" loading="lazy"></p><h2 id="2-4、传播方向"><a href="#2-4、传播方向" class="headerlink" title="2.4、传播方向"></a>2.4、传播方向</h2><ul><li><h2 id="沿-z向传播"><a href="#沿-z向传播" class="headerlink" title="沿+z向传播"></a>沿+z向传播</h2></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172225409.png" alt="image-20200530172225409" loading="lazy"></p><hr><ul><li><h2 id="向-z方向传播"><a href="#向-z方向传播" class="headerlink" title="向-z方向传播"></a>向-z方向传播</h2></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172237206.png" alt="image-20200530172237206" loading="lazy"></p><h2 id="2-5、球面波的表达式"><a href="#2-5、球面波的表达式" class="headerlink" title="2.5、球面波的表达式"></a>2.5、球面波的表达式</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172541090.png" alt="image-20200530172541090" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172828539.png" alt="image-20200530172828539" loading="lazy"></p><hr><h2 id="2-6、定态光波"><a href="#2-6、定态光波" class="headerlink" title="2.6、定态光波"></a>2.6、定态光波</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172614625.png" alt="image-20200530172614625" loading="lazy"></p><h2 id="2-7、有关光波的几个概念"><a href="#2-7、有关光波的几个概念" class="headerlink" title="2.7、有关光波的几个概念"></a>2.7、有关光波的几个概念</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172859435.png" alt="image-20200530172859435" loading="lazy"></p><h3 id="近轴条件"><a href="#近轴条件" class="headerlink" title="近轴条件"></a>近轴条件</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530172956877.png" alt="image-20200530172956877" loading="lazy"></p><h3 id="远场条件"><a href="#远场条件" class="headerlink" title="远场条件"></a>远场条件</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173012291.png" alt="image-20200530173012291" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173032779.png" alt="image-20200530173032779" loading="lazy"></p><hr><h2 id="2-8、相位的超前与滞后"><a href="#2-8、相位的超前与滞后" class="headerlink" title="2.8、相位的超前与滞后"></a>2.8、相位的超前与滞后</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173223547.png" alt="image-20200530173223547" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173355282.png" alt="image-20200530173355282" loading="lazy"></p><hr><h2 id="2-9、作业"><a href="#2-9、作业" class="headerlink" title="2.9、作业"></a>2.9、作业</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173718308.png" alt="image-20200530173718308" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530173729897.png" alt="image-20200530173729897" loading="lazy"></p><hr><h1 id="3、光的相干叠加与非相干叠加"><a href="#3、光的相干叠加与非相干叠加" class="headerlink" title="3、光的相干叠加与非相干叠加"></a>3、光的相干叠加与非相干叠加</h1><h2 id="3-1、光波的叠加原理"><a href="#3-1、光波的叠加原理" class="headerlink" title="3.1、光波的叠加原理"></a>3.1、光波的叠加原理</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530171218058.png" alt="image-20200530171218058" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530171326391.png" alt="image-20200530171326391" loading="lazy"></p><hr><h2 id="3-2、相干条件"><a href="#3-2、相干条件" class="headerlink" title="3.2、相干条件"></a>3.2、相干条件</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530171433229.png" alt="image-20200530171433229" loading="lazy"></p><h2 id="3-3、不同频率光的叠加"><a href="#3-3、不同频率光的叠加" class="headerlink" title="3.3、不同频率光的叠加"></a>3.3、不同频率光的叠加</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530171547946.png" alt="image-20200530171547946" loading="lazy"></p><hr><h2 id="3-4、作业"><a href="#3-4、作业" class="headerlink" title="3.4、作业"></a>3.4、作业</h2><ul><li><p><strong>教材1.6题（Page366）如图所示，一平面简谐波沿r方向传播，波长为λ，设r=0的点的相位为<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590829606967.png" alt="img" loading="lazy">，</strong></p><p><strong>（1）写出沿r方向波的相位分布<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image004-1590829606967.png" alt="img" loading="lazy">；</strong></p><p><strong>（2）写出沿x轴波的相位分布<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image006-1590829606968.png" alt="img" loading="lazy">；</strong></p><p><strong>（3）写出沿y轴波的相位分布<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image008-1590829606968.png" alt="img" loading="lazy">。</strong></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image010.jpg" alt="未命名" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170743996.png" alt="image-20200530170743996" loading="lazy"></p><hr><h1 id="4、杨氏干涉和衬比度"><a href="#4、杨氏干涉和衬比度" class="headerlink" title="4、杨氏干涉和衬比度"></a>4、杨氏干涉和衬比度</h1><h2 id="4-1、相干光的获得"><a href="#4-1、相干光的获得" class="headerlink" title="4.1、相干光的获得"></a>4.1、相干光的获得</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165702104.png" alt="image-20200530165702104" loading="lazy"></p><h2 id="4-2、杨氏干涉"><a href="#4-2、杨氏干涉" class="headerlink" title="4.2、杨氏干涉"></a>4.2、杨氏干涉</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165921630.png" alt="image-20200530165921630" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165957247.png" alt="image-20200530165957247" loading="lazy"></p><h2 id="4-3、杨氏双孔干涉"><a href="#4-3、杨氏双孔干涉" class="headerlink" title="4.3、杨氏双孔干涉"></a>4.3、杨氏双孔干涉</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170150053.png" alt="image-20200530170150053" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170225473.png" alt="image-20200530170225473" loading="lazy"></p><hr><h2 id="4-4、当有介质时"><a href="#4-4、当有介质时" class="headerlink" title="4.4、当有介质时"></a>4.4、当有介质时</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170345482.png" alt="image-20200530170345482" loading="lazy"></p><h2 id="4-5、干涉条纹的反衬度（可见度）"><a href="#4-5、干涉条纹的反衬度（可见度）" class="headerlink" title="4.5、干涉条纹的反衬度（可见度）"></a>4.5、干涉条纹的反衬度（可见度）</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170541378.png" alt="image-20200530170541378" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170556178.png" alt="image-20200530170556178" loading="lazy"></p><hr><h2 id="4-5、小结（重点）"><a href="#4-5、小结（重点）" class="headerlink" title="4.5、小结（重点）"></a>4.5、小结（重点）</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170428203.png" alt="image-20200530170428203" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170448783.png" alt="image-20200530170448783" loading="lazy"></p><h2 id="4-6、最大级数"><a href="#4-6、最大级数" class="headerlink" title="4.6、最大级数"></a>4.6、最大级数</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200630230349443.png" alt="image-20200630230349443" loading="lazy"></p><h2 id="4-7、作业"><a href="#4-7、作业" class="headerlink" title="4.7、作业"></a>4.7、作业</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200629122510544.png" alt="image-20200629122510544" loading="lazy">光波振幅=A;   空间频率=1/lanmda</p><ul><li><p><strong>教材1.7题（Page366）在玻璃中z方向上传播的单色平面波的波函数为</strong></p><p><strong><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590829678273.png" alt="img" loading="lazy"></strong></p><p><strong>式中c为真空中的光速，时间以s为单位，电场强度以V/m为单位，距离以m为单位，试求：</strong></p><p><strong>（1）光波的振幅和时间频率；</strong></p><p><strong>（2）玻璃的折射率；</strong></p><p><strong>（3）z方向的空间频率；</strong></p><p><strong>（4）在xz平面内与x轴成45角方向上的空间频率。</strong></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530170941611.png" alt="image-20200530170941611" loading="lazy"></p><hr><h1 id="5、衍射和半波带法"><a href="#5、衍射和半波带法" class="headerlink" title="5、衍射和半波带法"></a>5、衍射和半波带法</h1><h2 id="5-1、引入"><a href="#5-1、引入" class="headerlink" title="5.1、引入"></a>5.1、引入</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530162813149.png" alt="image-20200530162813149" loading="lazy"></p><h2 id="5-2、惠更斯—菲涅耳原理"><a href="#5-2、惠更斯—菲涅耳原理" class="headerlink" title="5.2、惠更斯—菲涅耳原理"></a>5.2、惠更斯—菲涅耳原理</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530162909109.png" alt="image-20200530162909109" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530162932429.png" alt="image-20200530162932429" loading="lazy"></p><h2 id="5-3、衍射的分类"><a href="#5-3、衍射的分类" class="headerlink" title="5.3、衍射的分类"></a>5.3、衍射的分类</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530163551631.png" alt="image-20200530163551631" loading="lazy"></p><h2 id="5-4、菲涅耳衍射（圆孔、圆屏）"><a href="#5-4、菲涅耳衍射（圆孔、圆屏）" class="headerlink" title="5.4、菲涅耳衍射（圆孔、圆屏）"></a>5.4、菲涅耳衍射（圆孔、圆屏）</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530163626465.png" alt="image-20200530163626465" loading="lazy"></p><h3 id="半波带法分析菲涅耳圆孔衍射"><a href="#半波带法分析菲涅耳圆孔衍射" class="headerlink" title="半波带法分析菲涅耳圆孔衍射"></a>半波带法分析菲涅耳圆孔衍射</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530163658737.png" alt="image-20200530163658737" loading="lazy"></p><hr><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530163916557.png" alt="image-20200530163916557" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530163933372.png" alt="image-20200530163933372" loading="lazy"></p><h2 id="5-5、波带片"><a href="#5-5、波带片" class="headerlink" title="5.5、波带片"></a>5.5、波带片</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530164019709.png" alt="image-20200530164019709" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530164132172.png" alt="image-20200530164132172" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530164111240.png" alt="image-20200530164111240" loading="lazy"></p><h2 id="5-6、波带片方程（n为半波带数）"><a href="#5-6、波带片方程（n为半波带数）" class="headerlink" title="5.6、波带片方程（n为半波带数）"></a>5.6、波带片方程（n为半波带数）</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530164251009.png" alt="image-20200530164251009" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530164431537.png" alt="image-20200530164431537" loading="lazy"></p><hr><h2 id="5-7、作业"><a href="#5-7、作业" class="headerlink" title="5.7、作业"></a>5.7、作业</h2><ul><li><p><strong>教材3.16题（Page378）在双缝干涉的情况下，如图所示，证明</strong></p><p><strong>（1）屏幕上的光强为<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590828534117.png" alt="img" loading="lazy">；</strong></p><p><strong>（2）第一极小出现在<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image004-1590828534118.png" alt="img" loading="lazy">。</strong></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165037930.png" alt="image-20200530165037930" loading="lazy"></p><hr><ul><li><p><strong>教材3.17题（Page378）如图所示的杨氏实验装置中，若单色光源的波长λ=500nm，d=S1， S2=0.33cm，r0=3m，试求：</strong></p><p><strong>（1）条纹间隔；</strong></p><p><strong>（2）若在S2后面置一厚度h=0.01mm的平行平面玻璃片，试确定条纹移动方向和计算位移的公式；假设一直条纹的位移为4.73mm，试计算玻璃的折射率。</strong></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002.jpg" alt="未命名" loading="lazy"></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165153247.png" alt="image-20200530165153247" loading="lazy"></p><hr><ul><li><strong>教材3.18题（Page379）用很薄的云母片（n=1.58）覆盖在双缝装置中的一条缝上，这时，光屏上的中心为原来的第七级亮纹所占据，若λ=550nm，则云母片有多厚？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165334462.png" alt="image-20200530165334462" loading="lazy"></p><hr><ul><li><p><strong>教材3.20题（Page379）波长为λ的平行单色光以小倾角θ斜入射到间距为<em>t的双缝上，设接收屏到双缝距离为</em>D。（1）求零级主极大的位置；（2）假设在屏上到双缝距离都相等的地方恰好出现暗条纹，倾角θ必须满足什么条件？</strong></p><p>解：<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590828843299.jpg" alt="未命名" loading="lazy"></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530165457720.png" alt="image-20200530165457720" loading="lazy"></p><hr><h1 id="6、单缝衍射"><a href="#6、单缝衍射" class="headerlink" title="6、单缝衍射"></a>6、单缝衍射</h1><h2 id="6-1、夫琅禾费单缝衍射"><a href="#6-1、夫琅禾费单缝衍射" class="headerlink" title="6.1、夫琅禾费单缝衍射"></a>6.1、夫琅禾费单缝衍射</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530114933951.png" alt="image-20200530114933951" loading="lazy"></p><h2 id="6-2、衍射花样"><a href="#6-2、衍射花样" class="headerlink" title="6.2、衍射花样"></a>6.2、衍射花样</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530115008655.png" alt="image-20200530115008655" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121329315.png" alt="image-20200530121329315" loading="lazy"></p><h2 id="6-3、单缝衍射的强度公式"><a href="#6-3、单缝衍射的强度公式" class="headerlink" title="6.3、单缝衍射的强度公式"></a>6.3、单缝衍射的强度公式</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530120944620.png" alt="image-20200530120944620" loading="lazy"></p><h3 id="光程差"><a href="#光程差" class="headerlink" title="光程差"></a>光程差</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121100352.png" alt="image-20200530121100352" loading="lazy"></p><hr><h3 id="振幅矢量求和"><a href="#振幅矢量求和" class="headerlink" title="振幅矢量求和"></a>振幅矢量求和</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121200045.png" alt="image-20200530121200045" loading="lazy"></p><hr><h2 id="6-4、狭缝移动的影响"><a href="#6-4、狭缝移动的影响" class="headerlink" title="6.4、狭缝移动的影响"></a>6.4、狭缝移动的影响</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121400091.png" alt="image-20200530121400091" loading="lazy"></p><h2 id="6-5、透镜移动的影响"><a href="#6-5、透镜移动的影响" class="headerlink" title="6.5、透镜移动的影响"></a>6.5、透镜移动的影响</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121451602.png" alt="image-20200530121451602" loading="lazy"></p><hr><h2 id="6-6、衍射角"><a href="#6-6、衍射角" class="headerlink" title="6.6、衍射角"></a>6.6、衍射角</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121542409.png" alt="image-20200530121542409" loading="lazy"></p><h3 id="衍射角宽度"><a href="#衍射角宽度" class="headerlink" title="衍射角宽度"></a>衍射角宽度</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121803151.png" alt="image-20200530121803151" loading="lazy"></p><h2 id="6-7、衍射花样特点"><a href="#6-7、衍射花样特点" class="headerlink" title="6.7、衍射花样特点"></a>6.7、衍射花样特点</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530121657270.png" alt="image-20200530121657270" loading="lazy"></p><hr><h2 id="6-8、互补屏"><a href="#6-8、互补屏" class="headerlink" title="6.8、互补屏"></a>6.8、互补屏</h2><ul><li><h2 id="细丝与狭缝的衍射花样，除零级中央主极大外，处处相同。激光测径仪的原理"><a href="#细丝与狭缝的衍射花样，除零级中央主极大外，处处相同。激光测径仪的原理" class="headerlink" title="细丝与狭缝的衍射花样，除零级中央主极大外，处处相同。激光测径仪的原理"></a>细丝与狭缝的衍射花样，除零级中央主极大外，处处相同。激光测径仪的原理</h2></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530122055461.png" alt="image-20200530122055461" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530122112228.png" alt="image-20200530122112228" loading="lazy"></p><hr><h2 id="6-9、夫琅禾费矩孔衍射"><a href="#6-9、夫琅禾费矩孔衍射" class="headerlink" title="6.9、夫琅禾费矩孔衍射"></a>6.9、夫琅禾费矩孔衍射</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123023499.png" alt="image-20200530123023499" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123102488.png" alt="image-20200530123102488" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123226667.png" alt="image-20200530123226667" loading="lazy"></p><h3 id="衍射图样"><a href="#衍射图样" class="headerlink" title="衍射图样"></a>衍射图样</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123131104.png" alt="image-20200530123131104" loading="lazy"></p><hr><h2 id="6-10、作业"><a href="#6-10、作业" class="headerlink" title="6.10、作业"></a>6.10、作业</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200629150549512.png" alt="image-20200629150549512" loading="lazy"></p><ul><li><strong>教材3.28题（Page381）波长为λ=563.3nm的单色光从远处的光源发出，经过一个直径D=2.6mm的圆孔，在距孔1m处放一屏幕，问：（1）幕上正对孔中心的点P是亮的还是暗的？（2）要使P点的明暗变成与（1）相反的情况，至少要将屏幕移动多少距离？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123346863.png" alt="image-20200530123346863" loading="lazy"></p><hr><ul><li><strong>教材3.32题（Page381）波长为500.0nm的单色光垂直入射到直径为4mm的圆孔上，接收屏在圆孔后1.5m处，问孔的轴线与屏的焦点处是亮点还是暗点？如果要使该点的光强发生相反的变化，孔的直径要改变多少？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123431263.png" alt="image-20200530123431263" loading="lazy"></p><hr><ul><li><strong>教材3.33题（Page381）波长为632.8nm的平行光垂直入射到圆孔衍射屏上，屏后轴上距离1m处出现一个亮点，设此时圆孔恰好仅露出第一个半波带，试求：(1)圆孔的半径；（2）由该点向衍射屏移动多远可以出现第一个暗点？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123527233.png" alt="image-20200530123527233" loading="lazy"></p><hr><ul><li><strong>图示为两个特殊形状的菲涅耳衍射屏，阴影和浅蓝色部分不透光，其中标出了各个圆环到轴上场点的光程，b为中心到场点的光程，分别计算轴上场点处的衍射光强，设无衍射屏时，场点的光强为<img src="https://edu-image.nosdn.127.net/_PhotoUploadUtils_80f30e9e-a261-4514-81e3-583da961d997.png" alt="img" loading="lazy">。提示：用振幅矢量法求解，需画出相关的振幅矢量合成图，并假设每个半波带发出次波在场点的振幅相等，振幅矢量均为半圆弧。（没有画图扣一半分）</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123740719.png" alt="image-20200530123740719" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530123802593.png" alt="image-20200530123802593" loading="lazy"></p><h2 id="6-11、中央主极大的位置"><a href="#6-11、中央主极大的位置" class="headerlink" title="6.11、中央主极大的位置"></a>6.11、中央主极大的位置</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530112534874.png" alt="image-20200530112534874" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530112612145.png" alt="image-20200530112612145" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530112643779.png" alt="image-20200530112643779" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530112957354.png" alt="image-20200530112957354" loading="lazy"></p><hr><h2 id="6-12、衍射与孔径的空间尺度关系"><a href="#6-12、衍射与孔径的空间尺度关系" class="headerlink" title="6.12、衍射与孔径的空间尺度关系"></a>6.12、衍射与孔径的空间尺度关系</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530113232821.png" alt="image-20200530113232821" loading="lazy"></p><ul><li><h2 id="几何光学是衍射的0级近似"><a href="#几何光学是衍射的0级近似" class="headerlink" title="几何光学是衍射的0级近似"></a>几何光学是衍射的0级近似</h2></li><li><h2 id="衍射能量大部分集中于0级。"><a href="#衍射能量大部分集中于0级。" class="headerlink" title="衍射能量大部分集中于0级。"></a>衍射能量大部分集中于0级。</h2></li><li><h2 id="有衍射反比关系，即0级的空间角宽度与缝宽成反比。"><a href="#有衍射反比关系，即0级的空间角宽度与缝宽成反比。" class="headerlink" title="有衍射反比关系，即0级的空间角宽度与缝宽成反比。"></a>有衍射反比关系，即0级的空间角宽度与缝宽成反比。</h2></li></ul><hr><h2 id="6-13、干涉与衍射的区别和联系-重点"><a href="#6-13、干涉与衍射的区别和联系-重点" class="headerlink" title="6.13、干涉与衍射的区别和联系 (重点)"></a>6.13、干涉与衍射的区别和联系 (重点)</h2><p> <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530113647940.png" alt="image-20200530113647940" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530113626436.png" alt="image-20200530113626436" loading="lazy"></p><h2 id="6-14、作业"><a href="#6-14、作业" class="headerlink" title="6.14、作业"></a>6.14、作业</h2><ul><li><strong>教材3.41题（Page382）如图所示，用波长为632.8 nm的平行光垂直照射宽度为0.2mm的单狭缝，缝后有一焦距为60cm的透镜，光屏在此透镜的焦平面上，求衍射图样中心到第二条暗纹的距离。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530114206903.png" alt="image-20200530114206903" loading="lazy"></p><hr><ul><li><strong>教材3.44题（Page383）波长480nm的平行单色光垂直入射到缝宽0.4mm的单缝衍射屏上，缝后透镜焦距为60cm，计算当屏上一点到缝两端的位相差分别为<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590810140262.png" alt="img" loading="lazy">和</strong><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590810178517.png" alt="img" loading="lazy"><strong>时，该点到焦点的距离分别是多少？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530114358650.png" alt="image-20200530114358650" loading="lazy"></p><hr><ul><li><strong>教材3.49题（Page384）一反射式天文望远镜的通光孔径为2.5m，求可以分辨的双星的最小夹角。与人眼相比，分辨本领提高了多少倍？人眼瞳孔的直径约为2mm。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530114501081.png" alt="image-20200530114501081" loading="lazy"></p><hr><ul><li><strong>某种单色平行光垂直入射在单缝上，单缝宽<em>a</em>= 0.15 mm．缝后放一个焦距f</strong> <strong>= 400 mm的凸透镜，在透镜的焦平面上，测得中央明条纹两侧的两个第三级暗条纹之间的距离为8.0 mm，求入射光的波长。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530114632514.png" alt="image-20200530114632514" loading="lazy"></p><hr><h1 id="7、折射反射"><a href="#7、折射反射" class="headerlink" title="7、折射反射"></a>7、折射反射</h1><h2 id="7-1、光矢量的正交分解"><a href="#7-1、光矢量的正交分解" class="headerlink" title="7.1、光矢量的正交分解"></a>7.1、光矢量的正交分解</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529223644138.png" alt="image-20200529223644138" loading="lazy"></p><h2 id="7-2、菲涅耳（Fresnel）公式-：电场强度"><a href="#7-2、菲涅耳（Fresnel）公式-：电场强度" class="headerlink" title="7.2、菲涅耳（Fresnel）公式 ：电场强度"></a>7.2、菲涅耳（Fresnel）公式 ：电场强度</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529223716929.png" alt="image-20200529223716929" loading="lazy"></p><h2 id="7-3、菲涅耳公式的物理意义"><a href="#7-3、菲涅耳公式的物理意义" class="headerlink" title="7.3、菲涅耳公式的物理意义"></a>7.3、菲涅耳公式的物理意义</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529223900006.png" alt="image-20200529223900006" loading="lazy"></p><h2 id="7-4、复振幅的反射率与透射率"><a href="#7-4、复振幅的反射率与透射率" class="headerlink" title="7.4、复振幅的反射率与透射率"></a>7.4、复振幅的反射率与透射率</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529224654593.png" alt="image-20200529224654593" loading="lazy"></p><h3 id="垂直入射时"><a href="#垂直入射时" class="headerlink" title="垂直入射时"></a>垂直入射时</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529231333087.png" alt="image-20200529231333087" loading="lazy"></p><h2 id="7-5、光强的反射率与透射率"><a href="#7-5、光强的反射率与透射率" class="headerlink" title="7.5、光强的反射率与透射率"></a>7.5、光强的反射率与透射率</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529224728754.png" alt="image-20200529224728754" loading="lazy"></p><hr><h2 id="7-6、能流的反射率与透射率"><a href="#7-6、能流的反射率与透射率" class="headerlink" title="7.6、能流的反射率与透射率"></a>7.6、能流的反射率与透射率</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529225111497.png" alt="image-20200529225111497" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529225838672.png" alt="image-20200529225838672" loading="lazy"></p><hr><h2 id="7-7、布儒斯特角和全反射角"><a href="#7-7、布儒斯特角和全反射角" class="headerlink" title="7.7、布儒斯特角和全反射角"></a>7.7、布儒斯特角和全反射角</h2><h3 id="布儒斯特角"><a href="#布儒斯特角" class="headerlink" title="布儒斯特角"></a>布儒斯特角</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529230821355.png" alt="image-20200529230821355" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529230716072.png" alt="image-20200529230716072" loading="lazy"></p><h3 id="全反射角"><a href="#全反射角" class="headerlink" title="全反射角"></a>全反射角</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529230320833.png" alt="image-20200529230320833" loading="lazy"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529230558977.png" alt="image-20200529230558977" loading="lazy"></p><h2 id="7-8、薄膜的反射的半波损失"><a href="#7-8、薄膜的反射的半波损失" class="headerlink" title="7.8、薄膜的反射的半波损失"></a>7.8、薄膜的反射的半波损失</h2><ul><li><h3 id="当薄膜两侧的折射率相等时"><a href="#当薄膜两侧的折射率相等时" class="headerlink" title="当薄膜两侧的折射率相等时"></a>当薄膜两侧的折射率相等时</h3></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529231613152.png" alt="image-20200529231613152" loading="lazy"></p><ul><li><h3 id="当薄膜两侧折射率不等，但薄膜的折射率最大（或最小），则与上方的情况相等"><a href="#当薄膜两侧折射率不等，但薄膜的折射率最大（或最小），则与上方的情况相等" class="headerlink" title="当薄膜两侧折射率不等，但薄膜的折射率最大（或最小），则与上方的情况相等"></a>当薄膜两侧折射率不等，但薄膜的折射率最大（或最小），则与上方的情况相等</h3></li><li><h3 id="当折射率依次增大，则不存在半波损失"><a href="#当折射率依次增大，则不存在半波损失" class="headerlink" title="当折射率依次增大，则不存在半波损失"></a>当折射率依次增大，则不存在半波损失</h3></li><li><h3 id="当折射率依次减小，也不存在半波损失"><a href="#当折射率依次减小，也不存在半波损失" class="headerlink" title="当折射率依次减小，也不存在半波损失"></a>当折射率依次减小，也不存在半波损失</h3></li></ul><hr><h2 id="7-9、斯托克斯-Stocks-倒逆关系"><a href="#7-9、斯托克斯-Stocks-倒逆关系" class="headerlink" title="7.9、斯托克斯(Stocks)倒逆关系"></a>7.9、斯托克斯(Stocks)倒逆关系</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529232345775.png" alt="image-20200529232345775" loading="lazy"></p><hr><h2 id="7-10、作业"><a href="#7-10、作业" class="headerlink" title="7.10、作业"></a>7.10、作业</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529232633932.png" alt="image-20200529232633932" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529232555003.png" alt="image-20200529232555003" loading="lazy"></p><hr><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529232729937.png" alt="image-20200529232729937" loading="lazy"></p><hr><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529232836444.png" alt="image-20200529232836444" loading="lazy"></p><hr><h1 id="8、干涉仪与光的时空相干性"><a href="#8、干涉仪与光的时空相干性" class="headerlink" title="8、干涉仪与光的时空相干性"></a>8、干涉仪与光的时空相干性</h1><h2 id="8-1、薄膜干涉"><a href="#8-1、薄膜干涉" class="headerlink" title="8.1、薄膜干涉"></a>8.1、薄膜干涉</h2><blockquote><p>在薄膜干涉中，未存在半波损失时：</p><ol><li>暗纹：2nh = (2j+1)lambda</li><li>亮纹：2nh = j lambda</li></ol><p>但很多情况下会存在半波损失，所以条件相反。但<strong>第一条暗纹的j=0！</strong></p></blockquote><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529205816497.png" alt="image-20200529205816497" loading="lazy"></p><h3 id="2、两类典型的薄膜干涉"><a href="#2、两类典型的薄膜干涉" class="headerlink" title="2、两类典型的薄膜干涉"></a>2、两类典型的薄膜干涉</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529210001232.png" alt="image-20200529210001232" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529210128070.png" alt="image-20200529210128070" loading="lazy"></p><h3 id="3、等倾干涉"><a href="#3、等倾干涉" class="headerlink" title="3、等倾干涉"></a>3、等倾干涉</h3><h4 id="3-1、概念"><a href="#3-1、概念" class="headerlink" title="3.1、概念"></a>3.1、概念</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529210300756.png" alt="image-20200529210300756" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529210444509.png" alt="image-20200529210444509" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529210752169.png" alt="image-20200529210752169" loading="lazy"></p><h4 id="3-2、亮暗纹条件"><a href="#3-2、亮暗纹条件" class="headerlink" title="3.2、亮暗纹条件"></a>3.2、亮暗纹条件</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529211746273.png" alt="image-20200529211746273" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529213421112.png" alt="image-20200529213421112" loading="lazy"></p><h4 id="3-3、薄膜厚度改变的影响"><a href="#3-3、薄膜厚度改变的影响" class="headerlink" title="3.3、薄膜厚度改变的影响"></a>3.3、薄膜厚度改变的影响</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529213649911.png" alt="image-20200529213649911" loading="lazy"></p><h4 id="3-4、角距离"><a href="#3-4、角距离" class="headerlink" title="3.4、角距离"></a>3.4、角距离</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529211412226.png" alt="image-20200529211412226" loading="lazy"></p><h4 id="3-5、角宽度"><a href="#3-5、角宽度" class="headerlink" title="3.5、角宽度"></a>3.5、角宽度</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529211644889.png" alt="image-20200529211644889" loading="lazy"></p><h4 id="3-6、半波损失"><a href="#3-6、半波损失" class="headerlink" title="3.6、半波损失"></a>3.6、半波损失</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529211938300.png" alt="image-20200529211938300" loading="lazy"></p><h3 id="4、等厚干涉"><a href="#4、等厚干涉" class="headerlink" title="4、等厚干涉"></a>4、等厚干涉</h3><h4 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a>4.1、概念</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212156112.png" alt="image-20200529212156112" loading="lazy"></p><h4 id="4-2、亮纹条件"><a href="#4-2、亮纹条件" class="headerlink" title="4.2、亮纹条件"></a>4.2、亮纹条件</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212510619.png" alt="image-20200529212510619" loading="lazy"></p><h4 id="4-3、垂直入射时亮纹条件"><a href="#4-3、垂直入射时亮纹条件" class="headerlink" title="4.3、垂直入射时亮纹条件"></a>4.3、垂直入射时亮纹条件</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212621546.png" alt="image-20200529212621546" loading="lazy"></p><h4 id="4-4、相邻条纹的厚度差"><a href="#4-4、相邻条纹的厚度差" class="headerlink" title="4.4、相邻条纹的厚度差"></a>4.4、相邻条纹的厚度差</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212637980.png" alt="image-20200529212637980" loading="lazy"></p><h4 id="4-5、等厚干涉的弯曲"><a href="#4-5、等厚干涉的弯曲" class="headerlink" title="4.5、等厚干涉的弯曲"></a>4.5、等厚干涉的弯曲</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212752557.png" alt="image-20200529212752557" loading="lazy"></p><h4 id="4-6、等厚干涉的应用"><a href="#4-6、等厚干涉的应用" class="headerlink" title="4.6、等厚干涉的应用"></a>4.6、等厚干涉的应用</h4><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529212904093.png" alt="image-20200529212904093" loading="lazy"></p><h2 id="8-2、迈克耳孙-Michelson-干涉仪"><a href="#8-2、迈克耳孙-Michelson-干涉仪" class="headerlink" title="8.2、迈克耳孙(Michelson)干涉仪"></a>8.2、迈克耳孙(Michelson)干涉仪</h2><blockquote><p>使用空气薄膜时，没有半波损失</p></blockquote><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529213055638.png" alt="image-20200529213055638" loading="lazy"></p><h3 id="干涉条纹的移动"><a href="#干涉条纹的移动" class="headerlink" title="干涉条纹的移动"></a>干涉条纹的移动</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529213248605.png" alt="image-20200529213248605" loading="lazy"></p><h2 id="8-3、马赫-曾德尔干涉仪"><a href="#8-3、马赫-曾德尔干涉仪" class="headerlink" title="8.3、马赫-曾德尔干涉仪"></a>8.3、马赫-曾德尔干涉仪</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529213330606.png" alt="image-20200529213330606" loading="lazy"></p><h2 id="8-4、作业"><a href="#8-4、作业" class="headerlink" title="8.4、作业"></a>8.4、作业</h2><ul><li><strong>教材4.6题（Page385）沿着与肥皂膜的法线成35角的方向观察膜呈绿色（λ=5000Å），设肥皂水的折射率为1.33，求：（1）薄膜的厚度；（2）如果垂直注视时，膜呈何种颜色？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529214903352.png" alt="image-20200529214903352" loading="lazy"></p><hr><ul><li><strong>教材4.13题（Page386）一个Michelson干涉仪被调节，当用波长λ=5000Å扩展光源照明时会出现同心圆环形条纹，若要移动其中一臂而使圆环中心处相继出现1000条条纹，则该臂要移动多少？若中心是亮的，计算第一个暗环的角半径。（要求用两臂的路径距离差和波长表示）</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529214947246.png" alt="image-20200529214947246" loading="lazy"></p><hr><ul><li><strong>教材4.16题（Page387）玻璃板上有一层油膜，波长可连续改变的单色光正入射，在λ=5000Å和λ=7000Å时，观察到反射光干涉相消，并且在这两波长之间再无其它波长的光相消。（1）证明油膜的折射率一定小于1.5（玻璃的折射率1.5）。（2）若油的折射率为1.3，求油膜的厚度。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215020185.png" alt="image-20200529215020185" loading="lazy"></p><hr><ul><li><p><strong>波长为500nm的单色光垂直照射到由两块光学平玻璃构成的空气劈尖上，在观察反射光的干涉现象中，距劈尖棱边</strong> <strong><em>l = 1.56cm的</em>A处是从棱边算起的第四条暗条纹中心。</strong></p><p><strong>(1)</strong> <strong>求此空气劈尖的劈尖角q</strong> 。</p><p><strong>(2)</strong> <strong>改用600 nm的单色光垂直照射到此劈尖上仍观察反射光的干涉条纹，A处是明条纹，还是暗条纹？</strong></p></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215046748.png" alt="image-20200529215046748" loading="lazy"></p><hr><h1 id="9、牛顿环干涉"><a href="#9、牛顿环干涉" class="headerlink" title="9、牛顿环干涉"></a>9、牛顿环干涉</h1><blockquote><p>原理为等厚干涉</p></blockquote><h2 id="9-1、牛顿环类型"><a href="#9-1、牛顿环类型" class="headerlink" title="9.1、牛顿环类型"></a>9.1、牛顿环类型</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526201919957.png" alt="image-20200526201919957" loading="lazy"></p><h2 id="9-2、光程差以及牛顿环半径"><a href="#9-2、光程差以及牛顿环半径" class="headerlink" title="9.2、光程差以及牛顿环半径"></a>9.2、光程差以及牛顿环半径</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526202401197.png" alt="image-20200526202401197" loading="lazy"></p><h3 id="反射光与透射光的半径不同"><a href="#反射光与透射光的半径不同" class="headerlink" title="==反射光与透射光的半径不同=="></a>==反射光与透射光的半径不同==</h3><p>==投射光无半波损失==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526202538907.png" alt="image-20200526202538907" loading="lazy"></p><h2 id="9-3、干涉滤波片"><a href="#9-3、干涉滤波片" class="headerlink" title="9.3、干涉滤波片"></a>9.3、干涉滤波片</h2><ol><li>反射与透射干涉图样相反</li><li>增透</li><li>增反</li></ol><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526202915218.png" alt="image-20200526202915218" loading="lazy"></p><h3 id="增透（反射率公式）"><a href="#增透（反射率公式）" class="headerlink" title="增透（反射率公式）"></a>增透（反射率公式）</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526203311455.png" alt="image-20200526203311455" loading="lazy"></p><h2 id="9-4、反射率趋近于1"><a href="#9-4、反射率趋近于1" class="headerlink" title="9.4、反射率趋近于1"></a>9.4、反射率趋近于1</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526203524855.png" alt="image-20200526203524855" loading="lazy"></p><h2 id="9-5、透射率趋近于1"><a href="#9-5、透射率趋近于1" class="headerlink" title="9.5、透射率趋近于1"></a>9.5、透射率趋近于1</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526203706514.png" alt="image-20200526203706514" loading="lazy"></p><h2 id="9-6、Fabry-Perot干涉仪和标准具"><a href="#9-6、Fabry-Perot干涉仪和标准具" class="headerlink" title="9.6、Fabry-Perot干涉仪和标准具"></a>9.6、Fabry-Perot干涉仪和标准具</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526203807340.png" alt="image-20200526203807340" loading="lazy"></p><h3 id="2、透射光光强"><a href="#2、透射光光强" class="headerlink" title="2、透射光光强"></a>2、透射光光强</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526204124526.png" alt="image-20200526204124526" loading="lazy"></p><h3 id="3、反射光光强"><a href="#3、反射光光强" class="headerlink" title="3、反射光光强"></a>3、反射光光强</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526204151830.png" alt="image-20200526204151830" loading="lazy"></p><h3 id="4、条纹的半值宽度"><a href="#4、条纹的半值宽度" class="headerlink" title="4、条纹的半值宽度"></a>4、条纹的半值宽度</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526221626137.png" alt="image-20200526221626137" loading="lazy"></p><h3 id="5、半值宽度公式"><a href="#5、半值宽度公式" class="headerlink" title="==5、半值宽度公式=="></a>==5、半值宽度公式==</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526221722459.png" alt="image-20200526221722459" loading="lazy"></p><h3 id="6、半角宽度"><a href="#6、半角宽度" class="headerlink" title="==6、半角宽度=="></a>==6、半角宽度==</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526223122662.png" alt="image-20200526223122662" loading="lazy"></p><h2 id="9-7、多光束干涉"><a href="#9-7、多光束干涉" class="headerlink" title="9.7、多光束干涉"></a>9.7、多光束干涉</h2><p>==多光束干涉条纹要细锐的多==</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526221838485.png" alt="image-20200526221838485" loading="lazy"></p><h2 id="9-8、Fabry-Perot干涉仪的分辨本领"><a href="#9-8、Fabry-Perot干涉仪的分辨本领" class="headerlink" title="9.8、Fabry-Perot干涉仪的分辨本领"></a>9.8、Fabry-Perot干涉仪的分辨本领</h2><h3 id="分辨本领："><a href="#分辨本领：" class="headerlink" title="==分辨本领：=="></a>==分辨本领：==<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200630181828158.png" alt="image-20200630181828158" loading="lazy"></h3><h3 id="可分辨最小波长间隔："><a href="#可分辨最小波长间隔：" class="headerlink" title="==可分辨最小波长间隔：=="></a>==可分辨最小波长间隔：==</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526222608964.png" alt="image-20200526222608964" loading="lazy"></p><h2 id="9-9、小结"><a href="#9-9、小结" class="headerlink" title="9.9、小结"></a>9.9、小结</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526223008998.png" alt="image-20200526223008998" loading="lazy"></p><h2 id="9-10、作业"><a href="#9-10、作业" class="headerlink" title="9.10、作业"></a>9.10、作业</h2><ul><li><strong>补充题：用单色光观察牛顿环，测得某一亮环的直径为3mm，在它外边第5个亮环的直径为4.6mm，所用平凸透镜的凸面曲率半径为1.03m，求此单色光的波长。</strong></li></ul><p>解：对于亮环，有 <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image215.png" alt="img" loading="lazy"> （<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590505386054.png" alt="img" loading="lazy">）</p><p>所以    <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image219.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image221.png" alt="img" loading="lazy"></p><p>所以 </p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image223.png" alt="img" loading="lazy"></p><hr><ul><li><strong>教材4.11题（Page386）如图所示是Newton环的干涉装置，平凸透镜球面的曲率半径<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590503998740.png" alt="img" loading="lazy">，折射率<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image004.png" alt="img" loading="lazy">，平板玻璃由左右两部分组成，折射率分别是<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image006.png" alt="img" loading="lazy">和<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image008.png" alt="img" loading="lazy">，平凸透镜的顶点在这两部分玻璃的分界处，中间充以折射率<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image010-1590504096431.png" alt="img" loading="lazy">的二硫化碳液体，若用单色光垂直照射，在反射光中测得右边j级明条纹的半径<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image012.png" alt="img" loading="lazy">，j＋5级明条纹的半径<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image014.png" alt="img" loading="lazy">，试求：（1）入射光的波长；（2）观察到的干涉图样。</strong></li></ul><p>   <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image016.jpg" alt="未命名" loading="lazy"></p><p>   解：左边有半波损失，右边没有。</p><p>   （1）<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image018-1590503998741.png" alt="img" loading="lazy">，<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image020.png" alt="img" loading="lazy">，可得</p><p>   <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image022-1590503998741.png" alt="img" loading="lazy"></p><p>   （2）左边亮条纹<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image024-1590503998741.png" alt="img" loading="lazy">，暗条纹<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image018.png" alt="img" loading="lazy">，即同一高度处，两侧条纹正好明暗错开。</p><hr><p> <strong>教材4.22题（Page388）设Fabry-Poret腔（F-P腔）长5cm，用扩展光源做实验，光波波长λ=6000Å，问：（1）中心干涉级数是多少？（2）在倾角为10附近，干涉环的半角宽度是多少？（设反射率R=0.98）。（3）如果用该F-P腔分辨谱线，其色分辨本领有多大？可分辨的最小波长间隔是多少？（4）如果用其对白光进行选频，透射最强的谱线有几条？每条的谱线宽度是多少？（5）由于热胀冷缩所引起的腔长的改变量为10-5（相对值），则谱线的漂移量是多少？</strong></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215326301.png" alt="image-20200529215326301" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215354188.png" alt="image-20200529215354188" loading="lazy"></p><h1 id="10、衍射光栅"><a href="#10、衍射光栅" class="headerlink" title="10、衍射光栅"></a>10、衍射光栅</h1><h2 id="10-1、干涉与衍射的区别"><a href="#10-1、干涉与衍射的区别" class="headerlink" title="10.1、干涉与衍射的区别"></a>10.1、干涉与衍射的区别</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526194623998.png" alt="image-20200526194623998" loading="lazy"></p><h2 id="10-2、衍射光栅"><a href="#10-2、衍射光栅" class="headerlink" title="10.2、衍射光栅"></a>10.2、衍射光栅</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195017900.png" alt="image-20200526195017900" loading="lazy"></p><h2 id="10-3、干涉因子"><a href="#10-3、干涉因子" class="headerlink" title="10.3、干涉因子"></a>10.3、干涉因子</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195247484.png" alt="image-20200526195247484" loading="lazy"></p><h2 id="10-4、衍射因子"><a href="#10-4、衍射因子" class="headerlink" title="10.4、衍射因子"></a>10.4、衍射因子</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195715484.png" alt="image-20200526195715484" loading="lazy"></p><h2 id="10-5、复振幅和光强"><a href="#10-5、复振幅和光强" class="headerlink" title="10.5、复振幅和光强"></a>10.5、复振幅和光强</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195321922.png" alt="image-20200526195321922" loading="lazy"></p><h2 id="10-6、光栅衍射的强度"><a href="#10-6、光栅衍射的强度" class="headerlink" title="10.6、光栅衍射的强度"></a>10.6、光栅衍射的强度</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195527457.png" alt="image-20200526195527457" loading="lazy"></p><h2 id="10-7、极大值与极小值"><a href="#10-7、极大值与极小值" class="headerlink" title="10.7、极大值与极小值"></a>10.7、极大值与极小值</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195755107.png" alt="image-20200526195755107" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195836338.png" alt="image-20200526195836338" loading="lazy"></p><h2 id="10-8、缺级"><a href="#10-8、缺级" class="headerlink" title="10.8、缺级"></a>10.8、缺级</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526195901400.png" alt="image-20200526195901400" loading="lazy"></p><h2 id="10-9、小结"><a href="#10-9、小结" class="headerlink" title="10.9、小结"></a>10.9、小结</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526200658117.png" alt="image-20200526200658117" loading="lazy"></p><h2 id="10-10、作业"><a href="#10-10、作业" class="headerlink" title="10.10、作业"></a>10.10、作业</h2><ul><li><strong>教材5.5题（Page389）</strong> <strong>已知光栅缝宽为1.5×10-4cm，波长为600nm的单色光垂直入射，发现第4级缺级，透镜焦距为1m，试求：（1）屏幕上第2级亮条纹与第3级亮条纹的距离；(2)幕上所呈现的全部亮条纹数。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215439407.png" alt="image-20200529215439407" loading="lazy"></p><hr><ul><li><strong>教材5.8题（Page390）为了能分辨第二级钠光谱的双线（波长分别为589.0nm和589.6nm），宽度为10cm的平面光栅的常数是多少？</strong></li></ul><p>解：<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image282.png" alt="img" loading="lazy">，<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image284.png" alt="img" loading="lazy">，</p><p>光栅宽度<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image286.png" alt="img" loading="lazy"></p><hr><ul><li><strong>教材5.12题（Page391）一光栅宽5cm，每毫米有400条刻线。波长为500nm的平行光正入射时，光栅的第4级衍射光谱在单缝衍射的第一极小值位置。试求：（1）每缝的宽度；（2）第二级衍射谱的半角宽度；（3）第二级可分辨的最小波长差；（4）如果入射光的入射方向与光栅平面的法线成30角，光栅能分辨的最小波长差又是多少？</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215511568.png" alt="image-20200529215511568" loading="lazy"></p><hr><p>补充题：</p><p><strong>三条平行狭缝，宽为a，缝距分别为d和2d，利用振幅矢量法求解正入射时夫琅禾费衍射的光强分布，能用式子表示出来即可，不需要化简。（需画出振幅矢量图，图占5分）</strong></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image302.png" alt="img" loading="lazy"></p><p>答案参见课本Page226例题5.1</p><hr><h1 id="第十周-期中考"><a href="#第十周-期中考" class="headerlink" title="第十周 期中考"></a>第十周 期中考</h1><p><strong>中央明纹的角宽度=2θ≈2λ/a</strong></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215602905.png" alt="image-20200529215602905" loading="lazy"></p><hr><h1 id="11、偏振光"><a href="#11、偏振光" class="headerlink" title="11、偏振光"></a>11、偏振光</h1><h2 id="11-1、偏振特性"><a href="#11-1、偏振特性" class="headerlink" title="11.1、偏振特性"></a>11.1、偏振特性</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526190007960.png" alt="image-20200526190007960" loading="lazy"></p><h2 id="11-2、起偏和检偏"><a href="#11-2、起偏和检偏" class="headerlink" title="11.2、起偏和检偏"></a>11.2、起偏和检偏</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526190122215.png" alt="image-20200526190122215" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526190145863.png" alt="image-20200526190145863" loading="lazy"></p><h2 id="11-3、平面偏振光（线偏振光）"><a href="#11-3、平面偏振光（线偏振光）" class="headerlink" title="11.3、平面偏振光（线偏振光）"></a>11.3、平面偏振光（线偏振光）</h2><ol><li>==光矢量只在一个固定的平面内振动。==</li><li>==可分解为两列正交平面偏振光。==</li></ol><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526191847940.png" alt="image-20200526191847940" loading="lazy"></p><ul><li>==同相与反相==</li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526191918013.png" alt="image-20200526191918013" loading="lazy"></p><h3 id="1、滞后"><a href="#1、滞后" class="headerlink" title="1、滞后"></a>1、滞后</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192021516.png" alt="image-20200526192021516" loading="lazy"></p><h2 id="11-4、部分偏振光"><a href="#11-4、部分偏振光" class="headerlink" title="11.4、部分偏振光"></a>11.4、部分偏振光</h2><h3 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192202086.png" alt="image-20200526192202086" loading="lazy"></p><h2 id="11-5、圆偏振光"><a href="#11-5、圆偏振光" class="headerlink" title="11.5、圆偏振光"></a>11.5、圆偏振光</h2><h3 id="1、概念-3"><a href="#1、概念-3" class="headerlink" title="1、概念"></a>1、概念</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192257264.png" alt="image-20200526192257264" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192309396.png" alt="image-20200526192309396" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192332773.png" alt="image-20200526192332773" loading="lazy"></p><h3 id="2、左旋、右旋"><a href="#2、左旋、右旋" class="headerlink" title="2、左旋、右旋"></a>2、左旋、右旋</h3><ol><li>==当w为负值时，相位差为正 –&gt; 滞后 –&gt; 左旋==</li><li>==当w为正值时，相位差为正 –&gt; 超前 –&gt; 右旋==</li></ol><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192426724.png" alt="image-20200526192426724" loading="lazy"></p><h2 id="11-6、椭圆偏振光"><a href="#11-6、椭圆偏振光" class="headerlink" title="11.6、椭圆偏振光"></a>11.6、椭圆偏振光</h2><h3 id="1、概念-4"><a href="#1、概念-4" class="headerlink" title="1、概念"></a>1、概念</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192708878.png" alt="image-20200526192708878" loading="lazy"></p><h3 id="2、左右旋"><a href="#2、左右旋" class="headerlink" title="2、左右旋"></a>2、左右旋</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526192944546.png" alt="image-20200526192944546" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526193032847.png" alt="image-20200526193032847" loading="lazy"></p><h3 id="3、长轴位置"><a href="#3、长轴位置" class="headerlink" title="3、长轴位置"></a>3、长轴位置</h3><p>==根据相位差==</p><ul><li>==相位差位于左侧（二三象限）是长轴在二四象限==</li><li>==相位差位于右侧（一四象限）是长轴在一三象限==</li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526193141676.png" alt="image-20200526193141676" loading="lazy"></p><h2 id="11-7、相位差的影响"><a href="#11-7、相位差的影响" class="headerlink" title="11.7、相位差的影响"></a>11.7、相位差的影响</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526193439361.png" alt="image-20200526193439361" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526193531643.png" alt="image-20200526193531643" loading="lazy"></p><h2 id="11-8、作业"><a href="#11-8、作业" class="headerlink" title="11.8、作业"></a>11.8、作业</h2><ul><li><strong>教材7.4题（Page394）假定在两个固定的正交理想偏振片之间插入第三个理想偏振片，且使其透振方向以角速度<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image304-1590493262545.png" alt="img" loading="lazy">旋转，以自然光入射，并使t=0时刻新插入的偏振片的透振方向与第一个偏振片透振方向之间的夹角为0，试证明投射的光强满足如下关系式</strong><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image002-1590760603020.png" alt="img" loading="lazy">。</li></ul><p>解：</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image308-1590493262546.jpg" alt="未命名" loading="lazy"></p><p>从P2透射的光强<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image310-1590493262546.png" alt="img" loading="lazy"></p><hr><ul><li><strong>教材7.7题（Page394）起偏器和检偏器透振方向间夹角是<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image312-1590493262546.png" alt="img" loading="lazy">，（1）如果没有吸收，透射光强变为原来的多少？（2）如果它们各吸收了10%的光强，透射光强又变为原来的多少？</strong></li></ul><p>解：（1）<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image314-1590493262547.png" alt="img" loading="lazy"></p><p>（2）考虑吸收<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image316-1590493262547.png" alt="img" loading="lazy"></p><p>从P2透射的光强<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image318-1590493262547.png" alt="img" loading="lazy"></p><hr><ul><li>**当一束自然光以布儒斯特角i0入射到两种介质的分界面(垂直于纸面)上时，画出图中反射光和折射光的光矢量振动方向。  <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image320-1590493262547.png" alt="img" loading="lazy">  **</li></ul><p>答案：见图</p><p>  <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image322-1590493262547.png" alt="img" loading="lazy">  </p><hr><ul><li><strong>试确定下面两列光波的偏振态。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image324-1590493262547.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image326-1590493262547.png" alt="img" loading="lazy"></p><p>答案：</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image328-1590493262547.png" alt="img" loading="lazy"></p><p>y分量比x分量的相位滞后<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image330-1590493262547.png" alt="img" loading="lazy">，为左旋圆偏振光</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image332-1590493262547.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image334-1590493262549.png" alt="img" loading="lazy"></p><p>y分量比x分量的相位滞后<img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image330-1590493262549.png" alt="img" loading="lazy">，为左旋圆偏振光</p><hr><h1 id="12、双折射"><a href="#12、双折射" class="headerlink" title="12、双折射"></a>12、双折射</h1><h2 id="12-1、双折射晶体的特征参量"><a href="#12-1、双折射晶体的特征参量" class="headerlink" title="12.1、双折射晶体的特征参量"></a>12.1、双折射晶体的特征参量</h2><pre><code>晶体的光轴：光沿此方向入射时无双折射。单轴晶体：光轴为对称轴，方解石晶体、石英、红宝石、冰，等等。双轴晶体：云母、蓝宝石、橄榄石、硫黄，等等。 </code></pre><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184335097.png" alt="image-20200526184335097" loading="lazy"></p><h3 id="1、主截面"><a href="#1、主截面" class="headerlink" title="1、主截面"></a>1、主截面</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184427771.png" alt="image-20200526184427771" loading="lazy"></p><h3 id="2、主平面"><a href="#2、主平面" class="headerlink" title="2、主平面"></a>2、主平面</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184500859.png" alt="image-20200526184500859" loading="lazy"></p><h3 id="3、o光-与-e光的光强"><a href="#3、o光-与-e光的光强" class="headerlink" title="3、o光 与 e光的光强"></a>3、o光 与 e光的光强</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184638113.png" alt="image-20200526184638113" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184703579.png" alt="image-20200526184703579" loading="lazy"></p><h2 id="12-2、单轴晶体中的波面"><a href="#12-2、单轴晶体中的波面" class="headerlink" title="12.2、单轴晶体中的波面"></a>12.2、单轴晶体中的波面</h2><h3 id="1、o光与e光波面的区别"><a href="#1、o光与e光波面的区别" class="headerlink" title="1、o光与e光波面的区别"></a>1、o光与e光波面的区别</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526184806739.png" alt="image-20200526184806739" loading="lazy"></p><p>==除了两个特殊的方向，e光的传播方向与其波面不垂直。这是因为其波面为椭球面。<br>o光的波面是球面，故其传播方向处处与其波面垂直。==</p><h2 id="12-3、正晶体、负晶体"><a href="#12-3、正晶体、负晶体" class="headerlink" title="12.3、正晶体、负晶体"></a>12.3、正晶体、负晶体</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526185021779.png" alt="image-20200526185021779" loading="lazy"></p><h2 id="12-4-、惠更斯作图法"><a href="#12-4-、惠更斯作图法" class="headerlink" title="12.4 、惠更斯作图法"></a>12.4 、惠更斯作图法</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526185104111.png" alt="image-20200526185104111" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526185217328.png" alt="image-20200526185217328" loading="lazy"></p><h2 id="12-5、作业"><a href="#12-5、作业" class="headerlink" title="12.5、作业"></a>12.5、作业</h2><ul><li><strong>教材7.17题（Page396）图中棱镜ABCD是由45方解石棱镜组成，棱镜ABD的光轴平行于AB，棱镜BCD的光轴垂直于图面。当光垂直于AB入射时，说明为什么o光和e光在第二块棱镜中分开，并在图中画出它们的波面和振动方向。</strong></li></ul><p>解：</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image336.jpg" alt="未命名" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200529215757363.png" alt="image-20200529215757363" loading="lazy"></p><hr><ul><li><strong>如图所示，一束光入射至正晶体，利用惠更斯作图法作图得到o光和e光的传播方向，并标出o光和e光的振动方向。</strong></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image344.png" alt="http://edu-image.nosdn.127.net/85A0FD164574D45AD8CFBFD6E37C390A.png?imageView&amp;thumbnail=890x0&amp;quality=100" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image346.png" alt="img" loading="lazy"></p><hr><ul><li><strong>线偏振光垂直入射到一块光轴平行于表面的方解石波片上，光的振动面和波片的主截面</strong></li></ul><p><strong>成30角。求：（1）透射出来的寻常光和非常光的相对强度为多少？（2）用钠光入射时如</strong></p><p><strong>要产生90</strong> <strong>的相位差，波片的最小厚度应为多少？（λ=589nm）</strong></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image348.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/clip_image350.png" alt="img" loading="lazy"></p><hr><h1 id="13、1-2波片和1-4波片"><a href="#13、1-2波片和1-4波片" class="headerlink" title="13、1/2波片和1/4波片"></a>13、1/2波片和1/4波片</h1><h2 id="13-1、光在波晶体中的改变"><a href="#13-1、光在波晶体中的改变" class="headerlink" title="13.1、光在波晶体中的改变"></a>13.1、光在波晶体中的改变</h2><ul><li><h4 id="1-4波片产生-Π-2的光程差"><a href="#1-4波片产生-Π-2的光程差" class="headerlink" title="1/4波片产生 Π/2的光程差"></a><strong>1/4波片产生 Π/2的光程差</strong></h4></li><li><h4 id="1-2波片-产生-Π的光程差"><a href="#1-2波片-产生-Π的光程差" class="headerlink" title="1/2波片 产生 Π的光程差"></a><strong>1/2波片 产生 Π的光程差</strong></h4></li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526160449390.png" alt="image-20200526160449390" loading="lazy"></p><ul><li>==光程差由两个折射光的折射率所决定==</li></ul><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526152813568.png" alt="image-20200526152813568" loading="lazy"></p><h2 id="13-2、平面偏振光（线偏振光）"><a href="#13-2、平面偏振光（线偏振光）" class="headerlink" title="13.2、平面偏振光（线偏振光）"></a>13.2、平面偏振光（线偏振光）</h2><h3 id="1、1-4波片"><a href="#1、1-4波片" class="headerlink" title="1、1/4波片"></a>1、1/4波片</h3><ol><li>==线偏振光变为左旋/右旋 椭圆偏振光==</li></ol><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526152945992.png" alt="image-20200526152945992" loading="lazy"></p><p>==当电矢量与光轴夹角为45度时，产生圆偏振光==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153117393.png" alt="image-20200526153117393" loading="lazy"></p><h3 id="2、1-2波片"><a href="#2、1-2波片" class="headerlink" title="2、1/2波片"></a>2、1/2波片</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153252030.png" alt="image-20200526153252030" loading="lazy"></p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153317764.png" alt="image-20200526153317764" loading="lazy"></p><h2 id="13-3、圆偏振光"><a href="#13-3、圆偏振光" class="headerlink" title="13.3、圆偏振光"></a>13.3、圆偏振光</h2><h3 id="1、1-4波片-1"><a href="#1、1-4波片-1" class="headerlink" title="1、1/4波片"></a>1、1/4波片</h3><p>==圆偏振光变为线偏振光==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153352717.png" alt="image-20200526153352717" loading="lazy"></p><h3 id="2、1-2波片-1"><a href="#2、1-2波片-1" class="headerlink" title="2、1/2波片"></a>2、1/2波片</h3><p>==还是圆偏振光，但是旋转方向相反==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153456995.png" alt="image-20200526153456995" loading="lazy"></p><h2 id="13-4、椭圆偏振光"><a href="#13-4、椭圆偏振光" class="headerlink" title="13.4、椭圆偏振光"></a>13.4、椭圆偏振光</h2><h3 id="1、1-4波片-2"><a href="#1、1-4波片-2" class="headerlink" title="1、1/4波片"></a>1、1/4波片</h3><p>==还是椭圆偏振光，正反向不定==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153612535.png" alt="image-20200526153612535" loading="lazy"></p><h3 id="2、1-2波片-2"><a href="#2、1-2波片-2" class="headerlink" title="2、1/2波片"></a>2、1/2波片</h3><p>==反向，长轴改变==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153707258.png" alt="image-20200526153707258" loading="lazy"></p><h2 id="13-5、正椭圆偏振光（椭圆长轴在轴上）"><a href="#13-5、正椭圆偏振光（椭圆长轴在轴上）" class="headerlink" title="13.5、正椭圆偏振光（椭圆长轴在轴上）"></a>13.5、正椭圆偏振光（椭圆长轴在轴上）</h2><p>==1/4波片不定，1/2波片反向==</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153816226.png" alt="image-20200526153816226" loading="lazy"></p><h2 id="13-6、偏振态的鉴定"><a href="#13-6、偏振态的鉴定" class="headerlink" title="13.6、偏振态的鉴定"></a>13.6、偏振态的鉴定</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200526153921318.png" alt="image-20200526153921318" loading="lazy"></p><h2 id="13-7、光的干涉-透射光强"><a href="#13-7、光的干涉-透射光强" class="headerlink" title="13.7、光的干涉(透射光强)"></a>13.7、光的干涉(透射光强)</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530125238568.png" alt="image-20200530125238568" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200530125247393.png" alt="image-20200530125247393" loading="lazy"></p><hr><h2 id="13-8、作业"><a href="#13-8、作业" class="headerlink" title="13.8、作业"></a>13.8、作业</h2><ul><li><p><strong>【教材7.19题（Page396）】用什么方法区分1/4片和1/2片？</strong></p><p>解：让圆偏光通过波片，再用偏振片检验。由于1/4波片使圆偏光变为线偏光，再通过偏振片时，会出现消光。而经过1/2波片的圆偏光还是圆偏光，用检偏器检验，不会消光。也可以用椭圆偏振光检验，但需要转动1/4波片，达到消光。</p><hr></li></ul><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/94DD089E312EF676F8CD8F040868B756.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/38F9E6851D3A716925C3D6007A733318.png" alt="img" loading="lazy"></p></li></ul><hr><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/7F92371317D0DB4D29F9EDBE1AC15A02.png" alt="img" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/2DB7266C5FCCEFD65682D962FBCB6D7E.png" alt="img" loading="lazy"></p></li></ul><h1 id="14、光的吸收、散射、色散-第9章"><a href="#14、光的吸收、散射、色散-第9章" class="headerlink" title="14、光的吸收、散射、色散(第9章)"></a>14、光的吸收、散射、色散(第9章)</h1><h2 id="14-1、光的吸收"><a href="#14-1、光的吸收" class="headerlink" title="14.1、光的吸收"></a>14.1、光的吸收</h2><h3 id="1、线性吸收规律"><a href="#1、线性吸收规律" class="headerlink" title="1、线性吸收规律"></a>1、线性吸收规律</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145103489.png" alt="image-20200602145103489" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145214263.png" alt="image-20200602145214263" loading="lazy"></p><h2 id="14-2、普遍吸收"><a href="#14-2、普遍吸收" class="headerlink" title="14.2、普遍吸收"></a>14.2、普遍吸收</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145258161.png" alt="image-20200602145258161" loading="lazy"></p><h2 id="14-3、选择吸收"><a href="#14-3、选择吸收" class="headerlink" title="14.3、选择吸收"></a>14.3、选择吸收</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145326730.png" alt="image-20200602145326730" loading="lazy"></p><h2 id="14-4、红外窗口"><a href="#14-4、红外窗口" class="headerlink" title="14.4、红外窗口"></a>14.4、红外窗口</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145356730.png" alt="image-20200602145356730" loading="lazy"></p><h2 id="14-5、光的色散"><a href="#14-5、光的色散" class="headerlink" title="14.5、光的色散"></a>14.5、光的色散</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145450177.png" alt="image-20200602145450177" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145513753.png" alt="image-20200602145513753" loading="lazy"></p><h2 id="14-6、色散公式"><a href="#14-6、色散公式" class="headerlink" title="14.6、色散公式"></a>14.6、色散公式</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145540777.png" alt="image-20200602145540777" loading="lazy"></p><h2 id="14-7、电偶极子"><a href="#14-7、电偶极子" class="headerlink" title="14.7、电偶极子"></a>14.7、电偶极子</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145634898.png" alt="image-20200602145634898" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145655730.png" alt="image-20200602145655730" loading="lazy"></p><h3 id="1、折射率"><a href="#1、折射率" class="headerlink" title="1、折射率"></a>1、折射率</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145748559.png" alt="image-20200602145748559" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145833034.png" alt="image-20200602145833034" loading="lazy"></p><h2 id="14-8、光的散射"><a href="#14-8、光的散射" class="headerlink" title="14.8、光的散射"></a>14.8、光的散射</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602145916015.png" alt="image-20200602145916015" loading="lazy"></p><h3 id="1、散射的分类"><a href="#1、散射的分类" class="headerlink" title="1、散射的分类"></a>1、散射的分类</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602150000945.png" alt="image-20200602150000945" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602150032498.png" alt="image-20200602150032498" loading="lazy"></p><h2 id="14-9、天空的颜色"><a href="#14-9、天空的颜色" class="headerlink" title="14.9、天空的颜色"></a>14.9、天空的颜色</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602150122660.png" alt="image-20200602150122660" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602150142389.png" alt="image-20200602150142389" loading="lazy"></p><h2 id="14-10、倍频晶体与二次谐波装置"><a href="#14-10、倍频晶体与二次谐波装置" class="headerlink" title="14.10、倍频晶体与二次谐波装置"></a>14.10、倍频晶体与二次谐波装置</h2><p>​    <img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200602150222681.png" alt="image-20200602150222681" loading="lazy"></p><h1 id="15、相对论与辐射"><a href="#15、相对论与辐射" class="headerlink" title="15、相对论与辐射"></a>15、相对论与辐射</h1><h2 id="15-1、相对论和量子力学的兴起"><a href="#15-1、相对论和量子力学的兴起" class="headerlink" title="15.1、相对论和量子力学的兴起"></a>15.1、相对论和量子力学的兴起</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150159915.png" alt="image-20200609150159915" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150222575.png" alt="image-20200609150222575" loading="lazy"></p><h2 id="15-2、黑体辐射"><a href="#15-2、黑体辐射" class="headerlink" title="15.2、黑体辐射"></a>15.2、黑体辐射</h2><h3 id="1、热辐射（温度）"><a href="#1、热辐射（温度）" class="headerlink" title="1、热辐射（温度）"></a>1、热辐射（温度）</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150319329.png" alt="image-20200609150319329" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609152659025.png" alt="image-20200609152659025" loading="lazy"></p><h3 id="2、黑体"><a href="#2、黑体" class="headerlink" title="2、黑体"></a>2、黑体</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150356628.png" alt="image-20200609150356628" loading="lazy"></p><h2 id="15-3、基尔霍夫定律"><a href="#15-3、基尔霍夫定律" class="headerlink" title="15.3、基尔霍夫定律"></a>15.3、基尔霍夫定律</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150618398.png" alt="image-20200609150618398" loading="lazy"></p><h2 id="15-4、普朗克常数"><a href="#15-4、普朗克常数" class="headerlink" title="15.4、普朗克常数"></a>15.4、普朗克常数</h2><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609150701134.png" alt="image-20200609150701134" loading="lazy"></p><h2 id="15-5、光电效应"><a href="#15-5、光电效应" class="headerlink" title="15.5、光电效应"></a>15.5、光电效应</h2><h3 id="1、产生条件"><a href="#1、产生条件" class="headerlink" title="1、产生条件"></a>1、产生条件</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609151004824.png" alt="image-20200609151004824" loading="lazy"></p><h3 id="2、饱和电流与遏止电压"><a href="#2、饱和电流与遏止电压" class="headerlink" title="2、饱和电流与遏止电压"></a>2、饱和电流与遏止电压</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609151253764.png" alt="image-20200609151253764" loading="lazy"></p><h3 id="3、光电效应特点"><a href="#3、光电效应特点" class="headerlink" title="3、光电效应特点"></a>3、光电效应特点</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609151331414.png" alt="image-20200609151331414" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609151439722.png" alt="image-20200609151439722" loading="lazy"></p><h3 id="4、光电效应方程"><a href="#4、光电效应方程" class="headerlink" title="4、光电效应方程"></a>4、光电效应方程</h3><p>爱因斯坦靠“光电效应方程”获得诺贝尔奖，而不是相对论。</p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609151804366.png" alt="image-20200609151804366" loading="lazy"></p><h2 id="15-6、光子"><a href="#15-6、光子" class="headerlink" title="15.6、光子"></a>15.6、光子</h2><h3 id="1、公式"><a href="#1、公式" class="headerlink" title="1、公式"></a>1、公式</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609152022926.png" alt="image-20200609152022926" loading="lazy"></p><h3 id="2、单位转换关系"><a href="#2、单位转换关系" class="headerlink" title="2、单位转换关系"></a>2、单位转换关系</h3><ul><li><p>焦耳与电子伏特</p><p><strong>电子伏特与SI制的能量单位<a href="https://baike.baidu.com/item/%E7%84%A6%E8%80%B3/5489626">焦耳</a>（J）的换算关系是1 eV = 1.6021766208(98)×10^-19 J</strong></p></li></ul><h3 id="3、光子到底是波还是粒子？"><a href="#3、光子到底是波还是粒子？" class="headerlink" title="3、光子到底是波还是粒子？"></a>3、光子到底是波还是粒子？</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609152153870.png" alt="image-20200609152153870" loading="lazy"></p><h3 id="4、说明光具有量子性的实验（三个）"><a href="#4、说明光具有量子性的实验（三个）" class="headerlink" title="4、说明光具有量子性的实验（三个）"></a>4、说明光具有量子性的实验（三个）</h3><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200609155331815.png" alt="image-20200609155331815" loading="lazy"></p><h2 id="15-7、作业"><a href="#15-7、作业" class="headerlink" title="15.7、作业"></a>15.7、作业</h2><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201059018.png" alt="image-20200613201059018" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201124708.png" alt="image-20200613201124708" loading="lazy"></p><hr></li></ul><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201139364.png" alt="image-20200613201139364" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201149301.png" alt="image-20200613201149301" loading="lazy"></p><hr></li></ul><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201200333.png" alt="image-20200613201200333" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201209325.png" alt="image-20200613201209325" loading="lazy"></p><hr></li></ul><ul><li><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/image-20200613201219029.png" alt="image-20200613201219029" loading="lazy"></p><p><img src="/2020/08/02/%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6/.%5C%E7%89%A9%E7%90%86%E5%85%89%E5%AD%A6.assets%5Cimage-20200613201237415.png" alt="image-20200613201237415" loading="lazy"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 光电课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课内 </tag>
            
            <tag> 物理光学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级单词</title>
      <link href="/2020/08/02/%E5%9B%9B%E7%BA%A7%E8%80%83%E8%AF%95/"/>
      <url>/2020/08/02/%E5%9B%9B%E7%BA%A7%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="四级考试"><a href="#四级考试" class="headerlink" title="四级考试"></a>四级考试</h2><h2 id="1、四级单词"><a href="#1、四级单词" class="headerlink" title="1、四级单词"></a>1、四级单词</h2><h3 id="1-1、Lession1"><a href="#1-1、Lession1" class="headerlink" title="1.1、Lession1"></a>1.1、Lession1</h3><ol><li>approximate——近似的，接近</li><li>sufficient——足够的，充足的</li><li>considerable——相当大的</li><li>significant——相当数量的</li><li>enormous——巨大的</li><li>numerous——众多的</li><li>efficient——效率高的</li><li>efficiency——效率</li><li>potential——潜在的，潜力</li><li>effective——有效的</li><li>adequate——充足的</li><li>poison——毒药</li><li>poisonous——有毒的</li><li>fruitful——多产的</li><li>beneficial——有益的</li><li>valid——有根据的；有效的</li><li>accurate——正确无误的；精确的</li><li>accuracy——准确</li><li>urgent——急迫的，紧要</li><li>excessive——过度的</li><li>excess——过度；超越</li><li>exceed——超过</li><li>tough——困难的；坚强的；粗暴的</li><li>tense——紧张的；绷紧的；拉紧</li><li>instant——即刻的；紧急的</li><li>delicate——易碎的；微妙的</li><li>rigid——严格的；刚硬的</li><li>sensitive——敏感的；神经过敏的</li><li>tender——嫩的；疼痛的；温柔的</li><li>sensible——明智的</li><li>flexible——易弯曲的；灵活的</li><li>objective——目标；客观的</li><li>reliable——可靠的</li><li>feasible——可行的</li><li>current——当前的；流行的</li><li>currency——货币；通行</li><li>overseas——在海外；在国外；海外的，国外的</li><li>objection——反对；反对的理由</li><li>observation——观察，言论</li><li>mild——温和的，温柔的；轻微的，不严重的</li><li>slight——轻微的，纤细的；轻视</li><li>dull——乏味的，晦暗的；愚钝的，低沉的</li><li>lower——较低的，下面的</li><li>humble——谦虚的；地位低下的；简陋的</li><li>fatigue——（使）疲劳</li><li>release——释放，解除，放开，发布</li><li>relief——轻松；缓解</li><li>relieve——使轻松；减轻</li><li>react——反应；反对；影响</li><li>reaction——反应，反作用；反动</li><li>transfer——转移；调用，转学；转车</li><li>convey——传递；运送</li><li>tone——语气；音调；风格</li><li>communicate——交流；连接</li><li>anxiety——焦虑；渴望</li><li>view——看法；观察；景色</li><li>judgement——看法；判断力；审判</li><li>vision——想象力；幻想；视力</li><li>exchange——交换；兑换；交流</li><li>transmit——播送；传送；传染</li><li>transmission——播送；传送，传染</li><li>transplant——移栽；移指</li><li>transform——使改观；变换</li><li>transport——运输；运输系统</li><li>transportation——运输；运输工具</li><li>tradition——传统</li><li>delivery——投递；投递的邮件；演讲</li><li>pollution——污染；污染物</li><li>switch——转变；开关</li><li>commit——犯错误，托付给，提交</li><li>commitment——承诺；信奉；承担的义务</li><li>favours——喜爱；赞同；有利于</li><li>suicide——自杀；自取灭亡</li><li>conduct——管理；指挥；传导</li><li>deliberate——蓄意的；深思熟虑的</li><li>mature——成熟的；成年人的</li><li>innocent——无罪的；没有恶意的</li><li>vary——变化；使不同</li><li>variable——易变的；可变的</li><li>variation——变化；变体；变奏曲</li></ol><h3 id="1-2、Lession2"><a href="#1-2、Lession2" class="headerlink" title="1.2、Lession2"></a>1.2、Lession2</h3><ol><li>alter——改变</li><li>shift——转移；转变</li><li>convert——（使）转变；（使）改变信仰</li><li>emphasis——强调；重点</li><li>moderate——中等的；温和的；有节制的</li><li>access——入口；接近</li><li>resort——求助；诉诸</li><li>contact——联系；熟人；触点</li><li>assess——对…进行评估；评论</li><li>assign——选派；指定；分配</li><li>assignment——任务；分配</li><li>exception——例外；除外</li><li>avenue——林荫道</li><li>exposure——暴露；揭发；曝光</li><li>modify——修改；修饰</li><li>substitute——代用品；代替者</li><li>extension——伸展；扩大部分</li><li>expansion——扩展；膨胀</li><li>addition——加法；增加的人</li><li>additional——添加的；额外的</li><li>besides——而且；除…之外</li><li>investigate——调查</li><li>regardless——不顾后果地；不管怎样</li><li>regarding——关于</li><li>despite——尽管</li><li>virtue——美德；德行；优点</li><li>loyal——忠诚的</li><li>feature——特色；面貌；特写</li><li>property——财产；房产</li><li>characteristic——特有的</li><li>trace——查出；追溯</li><li>appearance——出现；外表</li><li>explosion——爆炸；激增</li><li>sketch——草图；梗概；素描</li><li>image——形象；印象；图像</li><li>spite——恶意；怨恨</li><li>account——记述；帐户；说明…的原因</li><li>accountant——会计师</li><li>responsible——需负责任的；有责任感的</li><li>guilty——内疚的；有罪的</li><li>oblige——迫使；施恩于，帮…的忙</li><li>recommend——推荐；劝告；使成为可取</li><li>recommendation——推荐；推荐信；建议（名词）</li><li>administration——管理；行政机关；执行</li><li>content——内容；目录；满意的</li><li>consent——同意</li><li>conservative——保守的；不时新的</li><li>confident——确信的；有信心的</li><li>confidence——信任；信心</li><li>generous——慷慨的；宽厚的；大量的</li><li>intend——计划；打算使（成为）</li><li>context——背景；上下文</li><li>contact——合同；缩小</li><li>genuine——真的；非人造的；真诚的</li><li>minimum——最小的；最低限度</li><li>modest——谦虚的；适中的</li><li>contribute——捐献；促成；投稿</li><li>contribution——贡献；捐款；稿件</li><li>protective——保护的</li><li>hopeful——有希望的；怀有希望的</li><li>pressure——压力；强制；对…施加压力</li><li>attend——出席；上（学等）；照料</li><li>improvement——改进；改进处</li><li>assist——帮助</li><li>assistance——帮助；援助</li><li>witness——目击者；见证人；证据</li><li>accompany——陪伴；伴随</li><li>entertain——款待；给…娱乐</li><li>entertainment——娱乐；款待</li><li>shield——防护物；盾；保护</li><li>coordinate——协调；坐标；同等的</li><li>cooperate——合作</li><li>associate——把…联系在一起；结合</li><li>arouse——激起；唤醒</li><li>rouse——唤起；唤醒</li><li>persist——坚持不懈；持续</li><li>equip——装备；使有准备</li><li>install——安装；使就职</li><li>installation——装置；安装；就任</li><li>project——计划；课题；工程</li></ol><h3 id="1-3、Lession3"><a href="#1-3、Lession3" class="headerlink" title="1.3、Lession3"></a>1.3、Lession3</h3><ol><li>electrical——电的</li><li>electronic——电子的；电子学；电子设备</li><li>appliance——器具</li><li>utilize——利用</li><li>utility——功用；效用</li><li>facilitate——使变得容易</li><li>facility——设备；便利</li><li>submit——屈服；提交；主张</li><li>abstract——抽象的；摘要</li><li>edit——编辑；校订；剪辑</li><li>editor——编辑者</li><li>edition——版本</li><li>editorial——编辑的；社论的；社论</li><li>enable——使能够</li><li>register——登记；登记表；指示</li><li>discharge——允许…离开；排出；放电</li><li>local——地方性的；当地的</li><li>inquire/enquire——询问vt</li><li>inquiry/enquiry——询问；调查</li><li>consult——请教；查阅；商议</li><li>resolve——解决；决定；分解</li><li>prescribe——开药；规定</li><li>inspire——鼓舞；给…以灵感</li><li>inspiration——灵感；鼓舞人心的人</li><li>promote——促进；提拔</li><li>reinforce——增强</li><li>spark——火花；发出火花</li><li>factor——因素</li><li>emphasize——强调</li><li>multiply——增加；繁殖</li><li>accelerate——（使）加快</li><li>haste——急速；急忙</li><li>advanced——先进的；高级的；年迈的</li><li>proceed——进行；继续下去；行进</li><li>procedure——程序；步骤</li><li>progressive——先进的；前进的</li><li>region——地区；区域；范围</li><li>thrive——兴旺；繁荣</li><li>profit——利润；有益于</li><li>advantage——优点；好处</li><li>priority——优先；优先考虑的事</li><li>reader——读者；读物</li><li>bold——勇敢的；鲁莽的；粗体的</li><li>dense——密集的；密度大的</li><li>density——密集；密度</li><li>proportion——比例；部分；均衡</li><li>rate——速度；利率；价格；评估</li><li>ratio——比率</li><li>intensify——增强</li><li>intensity——强烈；强度</li><li>prosperity——兴旺；繁荣</li><li>prosperous——繁荣的；兴旺的</li><li>owing——应付的</li><li>competition——竞争；比赛</li><li>airline——航空公司</li><li>fierce——凶猛的；狂热的；猛烈的</li><li>strain——拉紧；极度紧张；张力；扭伤；气质</li><li>critical——关键性的；批评的</li><li>understanding——谅解；协议</li><li>tension——紧张；绷紧；张力</li><li>stress——压力；强调；应力</li><li>stir——搅拌；使微动；打动</li><li>aware——意识到</li><li>realistic——现实的；实际可行的；逼真的</li><li>reality——现实；真实</li><li>radical——根本的；激进的；激进分子</li><li>essential——必不可少的</li><li>principal——主要的；校长；资本</li><li>necessarily——必要地；必然地</li><li>necessity——必需品；必要</li><li>remarkable——值得注意的；非凡的</li><li>application——申请；应用</li><li>applicant——申请人</li><li>grasp——抓紧；理解</li><li>prime——首要的；最好的；青春</li><li>principle——原则；基本信念</li><li>display——陈列；展览</li><li>expose——暴露；揭漏</li><li>locate——探明；找出</li><li>location——位置；外景拍摄地</li></ol><h3 id="1-4、Lession4"><a href="#1-4、Lession4" class="headerlink" title="1.4、Lession4"></a>1.4、Lession4</h3><ol><li>export——出口</li><li>spot——地点，污点；少量；认出</li><li>stain——沾污；污点</li><li>crash——碰撞；坠落</li><li>pollute——污染；腐蚀</li><li>exploit——剥削；利用；开发</li><li>exhaust——使筋疲力尽；用光；废气</li><li>exhibit——显示；展览</li><li>relax——放松；放宽</li><li>injure——伤害</li><li>injury——损害；受伤处</li><li>collapse——倒塌；崩溃</li><li>wreck——破坏；造成…失事；残骸</li><li>spoil——损坏；宠坏；变质</li><li>consume——消耗；花费；充满</li><li>consumer——消费者</li><li>swallow——吞；咽；轻言；承受</li><li>dispose——布置；使倾向于；丢掉</li><li>disposal——丢掉；布置</li><li>recreation——娱乐活动；消遣</li><li>dismiss——不在考虑；解雇；解散</li><li>survival——幸存；幸存者</li><li>highly——非常；非常赞许地</li><li>discourage——使泄气；阻止</li><li>discard——抛弃</li><li>slip——滑；溜走；下降；悄悄进去</li><li>slippery——滑的；狡猾的</li><li>arise——出现；引起</li><li>raise——举起；增加；提出</li><li>primitive——原始的；早期的</li><li>tend——往往会；趋向</li><li>tendency——趋向</li><li>cultivate——耕作；培养</li><li>tame——驯服的；沉闷的；制服</li><li>breed——品种；繁衍；养育</li><li>civil——公民的；国内的；民用的</li><li>civilian——平民；百姓</li><li>civilize——使文明</li><li>civilization——文明，文化</li><li>laboratory——实验室</li><li>finding——调查的结果；裁决</li><li>logical——逻辑的；合乎常理的</li><li>logic——逻辑</li><li>furnish——布局；提供</li><li>propose——提议；提名；打算；求婚（动词）</li><li>proposal——提议；求婚（名词）</li><li>entitle——给…权利；为…提名</li><li>grant——拨款；授予；同意</li><li>promising——有希望的；有前途的</li><li>decent——体面的；宽厚的；得体的</li><li>educate——教育；培养</li><li>attribute——把…归因于；属性</li><li>identify——认出；把…等同于</li><li>identification——身份证明；鉴定；认同</li><li>justify——证明…正当；为…辩护</li><li>justification——正当的理由</li><li>belief——相信；信念</li><li>clarify——阐明</li><li>integrate——使成为一体</li><li>integrity——正值；完整</li><li>evaluate——评价</li><li>indicate——指出；表明</li><li>reckon——认为；指望；测算</li><li>represent——作为…的代表；象征</li><li>representative——代表；有代表性的</li><li>background——背景</li><li>diverse——不同的；多种多样的</li><li>extensive——广阔的；广泛的</li><li>influential——有影响的</li><li>identical——相同的</li><li>manner——方式；举止；礼貌</li><li>expand——扩张；膨胀</li><li>expansive——易膨胀的；开朗的；健谈的</li><li>intensive——加强的；精工细作的</li><li>origin——起源；出身</li><li>original——起初的；独创的；原版的；原价</li><li>extreme——极度的；末端的；极端</li><li>violent——暴力引起的；猛烈的</li><li>violence——暴力；猛烈</li><li>violate——违反；亵渎；侵犯</li></ol><h3 id="1-5、Lession5"><a href="#1-5、Lession5" class="headerlink" title="1.5、Lession5"></a>1.5、Lession5</h3><ol><li>specialize——专攻</li><li>constant——始终如一的；不断的；忠实的</li><li>abroad——到国外；在传播</li><li>steady——稳的；稳定的；稳重的</li><li>stable——稳定的；沉稳的</li><li>stability——稳定</li><li>reluctant——不情愿的</li><li>rational——理性的；合理的</li><li>overall——总体的；全部的；总的来说</li><li>joint——连接的；共同的；关节；接头</li><li>margin——页边空白；差数；余地；边</li><li>interval——间距；幕间休息</li><li>border——边缘；边界；围；邻接</li><li>participate——参加</li><li>excursion——远足；短途旅行</li><li>gap——缺口；间距；差距；不足</li><li>process——过程；工序；程序</li><li>procession——队伍；行列</li><li>distance——距离</li><li>ease——容易；忽悠；缓和</li><li>scope——范围；余地；机会</li><li>range——一系列；范围；距离</li><li>boundary——边界</li><li>criticize——批评；评论（动词）</li><li>criticism——批评；评论（名词）</li><li>responsibility——限制；局限</li><li>extent——程度；范围；广度</li><li>differ——不同；发生分歧</li><li>federal——联邦的；联邦政府的</li><li>span——一段时间；跨距；持续；横跨</li><li>rank——军衔；地位；普通成员；排</li><li>scale——规模；等级；天平；比例；刻度</li><li>occupy——占用；使忙碌</li><li>classify——把…分类；把…分级</li><li>personality——个性；人物</li><li>category——种类；类</li><li>ambitious——有抱负的；有野心的</li><li>aggressive——侵略的；有进取心的</li><li>substantial——大量的；牢固的；实质的</li><li>unusual——不平常的；独特的</li><li>upset——使心烦意乱的；打乱；弄翻；搅乱</li><li>vigorous——有力的；精力充沛的</li><li>ceremony——典礼；礼节</li><li>tedious——乏味的</li><li>harsh——严厉的；刺耳的</li><li>indifferent——冷漠的；一般的</li><li>inevitable——不可避免的</li><li>audience——听众；观众</li><li>bore——使厌烦；钻；令人讨厌的人</li><li>boring——乏味的</li><li>clumsy——笨拙的；不得体的</li><li>fashion——方式；流行款式</li><li>fashionable——流行的</li><li>intense——强烈的；紧张的；专注的</li><li>chart——图表；航图；用图表表示</li><li>indispensable——必不可少的</li><li>intelligent——聪明的；有才智的</li><li>intelligence——智力；智慧；情报</li><li>household——家庭；家用的；家喻户晓的</li><li>capable——有能力的</li><li>infinite——无限的</li><li>industrial——工业的</li><li>fundamental——基本的</li><li>comparative——比较的；相对的</li><li>comparison——比较；比拟</li><li>comparable——可比较的；比得上的</li><li>compatible——兼容的；合得来的</li><li>tolerate——容许；容忍</li><li>resist——抵抗；忍住；抵抗</li><li>resistance——反抗；抵抗力；阻力</li><li>undergo——经历；遭受</li><li>cancel——取消；抵消；划掉</li><li>assume——假定；担任；呈现</li><li>postpone——推迟</li><li>refusal——拒绝</li><li>ignorant——不知道的；无知的</li><li>ignorance——无知</li><li>miss——小姐；未看到；未达到；惦念；逃脱</li><li>urge——鼓励；竭力主张；催促；强烈的欲望</li><li>occupy——占用</li></ol><h3 id="1-6、Lession6"><a href="#1-6、Lession6" class="headerlink" title="1.6、Lession6"></a>1.6、Lession6</h3><ol><li>staff——全体人员；为……配备（人员）</li><li>slide——使滑动；悄悄地移动；滑动；滑道</li><li>failure——失败；失败的人；失灵；没有做到</li><li>absent——缺席的；不存在的；心不在焉的</li><li>absence——缺席；缺乏</li><li>decay——腐烂；衰落；腐烂</li><li>lag——走得慢；滞后；间隔</li><li>decade——十年</li><li>compound——化合物；大院；复合的</li><li>combine——联合；结合</li><li>combination——结合</li><li>blend——混合；混合物；混和</li><li>collection——收藏品；收取；收集</li><li>collective——集体的；集体</li><li>unity——团结；联合；和睦</li><li>union——工会；联合；团结</li><li>community——社区；团体；群落</li><li>scarce——缺乏的；罕见的</li><li>scarcely——几乎不；决不；刚刚</li><li>fate——命运</li><li>terminal——晚期的；末端的；终点；终端</li><li>benefit——益处；救济金；有益于</li><li>estimate——估计；评价；估计</li><li>professional——职业的；专业的；专业人员</li><li>amateur——业余爱好者；业务的；外行的</li><li>derive——得到；追溯……的起源；起源</li><li>acquire——获得；学到</li><li>acquisition——获得；获得物</li><li>reward——报答；奖赏；酬金</li><li>adopt——收养；采用；批准</li><li>accumulate——积累；累积；聚积</li><li>assembled——集合；聚集；装配</li><li>assembly——立法机构；集会；装配</li><li>adapt——使适应；修改；适应</li><li>regulate——管理；调节</li><li>activity——活动；活跃</li><li>generate——产生；引起</li><li>yield——屈服；倒塌；产生；让出</li><li>environment——环境</li><li>disaster——灾难；彻底的失败</li><li>lest——唯恐</li><li>punishment——惩罚</li><li>provided——假如；若是</li><li>treatment——治疗；疗法；对待</li><li>case——事例；情况；病例；案件</li><li>nevertheless——仍然；不过</li><li>furthermore——而且；此外</li><li>accordingly——相应地；所以</li><li>accord——一致；协议；相符合</li><li>accordance——一致</li><li>incident——发生的事；事件</li><li>occasion——时刻；场合；时机；起因；引起</li><li>issue——问题；发行；分发；流出；发行</li><li>privilege——特权</li><li>award——授予；判给；奖</li><li>humour——幽默；情绪</li><li>appreciate——重视；欣赏；为……表示感激</li><li>approve——赞成；批准；赞成</li><li>appeal——呼吁；恳求；感染力</li><li>apply——申请；适用；运用</li><li>intention——意图</li><li>option——选择；选择权；选择的事物</li><li>alternative——供选择的；另类的；抉择</li><li>select——选择；精选的；优等的</li><li>selection——选择；被挑选出来的人</li><li>medal——奖牌；奖章</li><li>optimistic——乐观的</li><li>pessimistic——消极的</li><li>optional——可以任选的</li><li>outstanding——杰出的；未解决的</li><li>obvious——明显的</li><li>permanent——永久的；固定的</li><li>legal——法律的；合法的</li><li>volunteer——志愿者；志愿兵；自愿</li><li>temporary——暂时的</li><li>requirement——要求；</li><li>gear——齿轮；用具；使适应</li><li>gualify——胜任；具有资格</li><li>qualification——资格；合格证书</li><li>fulfill——实现；满足</li><li>accomplish——完成；实现</li></ol><h3 id="1-7、Lession7"><a href="#1-7、Lession7" class="headerlink" title="1.7、Lession7"></a>1.7、Lession7</h3><ol><li>bind——捆绑；使结合；约束；装订</li><li>bound——一定的；受约束的；跳跃；弹回</li><li>involve——包含；使卷入；牵涉</li><li>comprise——包含；构成</li><li>collision——碰撞；冲突</li><li>compose——组成；创作；使平静</li><li>consist——构成；在于</li><li>engage——占用；从事于；使订婚</li><li>pursue——继续；追赶；追求</li><li>chase——追捕；追求</li><li>crime——罪；犯罪</li><li>increasingly——越来越多地</li><li>trend——趋势；时尚</li><li>emergency——紧急情况；非常时刻</li><li>pace——步；速度；踱步</li><li>schedule——时刻表；明细表；安排</li><li>precaution——预防；警惕</li><li>crisis——危机；决定性时刻</li><li>nuclear——核能的；核心的</li><li>presentation——提供；外观；授予；报告；表演</li><li>preparation——准备；制剂</li><li>predict——预测</li><li>preliminary——起步的；初步做法</li><li>primary——首要的；最初的</li><li>upright——直立的；正直的；挺直着</li><li>elementary——基本的；初级的</li><li>mankind——人类</li><li>survive——幸存；从……逃出；比……活得长</li><li>retain——保持</li><li>endure——忍受；持久；持续</li><li>maintain——维持；维修；坚持；赡养</li><li>culture——文化；教养；培养；培养菌</li><li>relate——有关联；适应；使相互关联；讲述</li><li>remark——说；评论</li><li>restrain——阻止；抑制（动词）</li><li>restraint——抑制；约束措施（名词）</li><li>reserve——保留；预定；存储；保留</li><li>reservation——预定；保留；居留地</li><li>replace——取代；更换；把……放回原处</li><li>preserve——保护；保存；腌制</li><li>sustain——保持；供养；支撑；经受</li><li>vital——生死攸关；极其重要的；充满生机的</li><li>resource——资源；应付办法</li><li>source——源；发源地；来源</li><li>previous——以前的；在……之前</li><li>provision——供应；准备；条款</li><li>prospect——前景；景象；有希望的候选人</li><li>speculate——推测；推断；投机</li><li>stake——桩；利害关系；赌注；以……打赌</li><li>identity——身份；个性；同一性</li><li>evident——明显的</li><li>evidence——证据；迹象</li><li>recognition——认出；确认；赏识</li><li>status——地位；身份；情形</li><li>applause——掌声（名词）</li><li>applaud——鼓掌；称赞（动词）</li><li>apparent——显然的；表面上的</li><li>distinct——有区别的；清楚的；明确的</li><li>distinction——差别；辨别；优秀</li><li>elect——选举；选择（动词）</li><li>election——选举（名词）</li><li>downward——向下的；下行地</li><li>social——社会的；交际的</li><li>curiosity——好奇心；奇物</li><li>determination——决心；确定</li><li>significance——意义；重要性</li><li>absolute——绝对的；不受任何限制的</li><li>exclusive——奢华的；独有的；排斥的；不包括……的</li><li>rough——粗糙的；粗野的；艰难的；大致的；狂暴的</li><li>asset——优点；资产；财产</li><li>vehicle——交通工具；车辆；传播媒介</li><li>rude——粗鲁的；粗糙的</li><li>readily——乐意地；容易地；很快地</li><li>coarse——粗糙的；粗劣的；粗俗的</li><li>rely——依靠；依赖</li><li>formal——正式的；形式上的</li><li>exclude——把……排斥在外</li><li>presumably——大概</li><li>reasonable——通情达理的；合理的；公道的</li><li>format——设计；样式；使格式化</li></ol><h3 id="1-8、Lession8"><a href="#1-8、Lession8" class="headerlink" title="1.8、Lession8"></a>1.8、Lession8</h3><ol><li>prominent——突出的；突起的；</li><li>membership——会员身份；全体会员</li><li>inspect——检查</li><li>eliminate——排除；淘汰</li><li>handle——处理；操作；拿；把手</li><li>pledge——保证；誓言；</li><li>mission——使命；代表团</li><li>plunge——纵身投入；猛冲；猛跌</li><li>motion——运动；手势；提议</li><li>remote——遥远；关系疏远的；绝少的</li><li>insert——插入；嵌入</li><li>impose——把……强加于；征税等</li><li>pitch——球场；程度；高音；投掷</li><li>squeeze——挤；挤出；压榨；捏</li><li>stuff——原料；材料；填进；塞满</li><li>pierce——刺穿；穿孔于</li><li>stretch——伸展；延伸</li><li>leap——跳；跃；急速行动；跃过</li><li>thorough——彻底的；仔细周到的</li><li>invade——侵入；侵略</li><li>nuisance——令人讨厌的东西；讨厌的人</li><li>aspiration——强烈的愿望</li><li>ambition——抱负；企望得到的东西</li><li>balance——平衡；结存；权衡；使平衡</li><li>disturb——打扰；使不安；弄乱</li><li>confuse——使困惑；混淆；混乱</li><li>puzzle——使迷惑；使苦思</li><li>perceive——感知；感觉；认识到</li><li>penetrate——渗入；刺穿；洞察</li><li>neglect——忽略；疏忽</li><li>amaze——使大为惊奇</li><li>amuse——逗乐；给……提供娱乐</li><li>amusing——有趣的</li><li>amusement——娱乐</li><li>awkward——尴尬的；难操控的；不灵巧的</li><li>particularly——特别，尤其</li><li>specify——明确说明</li><li>precise——精确的；严谨的</li><li>precision——精确的</li><li>speaker——说话者；演讲者；讲某种语言的人</li><li>dynamic——有活力的；不断变化的；动力的</li><li>heroic——英雄的；英勇的</li><li>diplomatic——外交的；策略的</li><li>elegant——优美的；讲究的；简练的</li><li>elaborate——精心计划的；复杂的</li><li>harmony——和谐；一致</li><li>brief——短暂的；简短的；摘要</li><li>acquaint——使了解</li><li>acquaintance——熟人；认识</li><li>acknowledge——承认；确认；报偿</li><li>association——协会；交往</li><li>unfair——不公平的</li><li>medium——中等的；适中的；媒质</li><li>media——新闻媒体</li><li>exaggerate——夸大；夸张</li><li>imply——暗示</li><li>remedy——补救办法；药品；治疗法；补救</li><li>data——数据；资料</li><li>scandal——丑闻；流言蜚语</li><li>illustrate——说明；给……做插图说明</li><li>illustration——说明；插图</li><li>reveal——揭露；展示</li><li>occasional——偶尔的</li><li>cite——引用；传唤；表彰</li><li>hint——暗示；建议</li><li>patience——耐心</li><li>notion——概念；想法</li><li>revise——修订；复习</li><li>reverse——撤销；使位置颠倒；倒转；方面；相反的</li><li>status——雕像</li><li>uncover——揭露；揭开……的盖子</li><li>overtake——超过；突然降临于</li><li>enlarge——扩大；放大</li><li>enhance——提高；增加</li><li>add——添加；计算……的综合</li><li>strengthen——加强；巩固</li><li>confusion——困惑；混淆；混乱</li><li>extend——延伸；扩大；提供</li><li>amount——数量；总数；合计</li></ol><h3 id="1-9、Lession9"><a href="#1-9、Lession9" class="headerlink" title="1.9、Lession9"></a>1.9、Lession9</h3><ol><li>academy——研究院；专门学校</li><li>discipline——纪律；训练；惩罚</li><li>convention——习俗；公约；会议</li><li>conventional——常规的；传统的；符合习俗的</li><li>confine——限制；使不外出；界限</li><li>routine——例行公事；例行的</li><li>conservation——保存；保护</li><li>convict——证明……有罪；宣判……有罪</li><li>conviction——确信；说服；定罪</li><li>regulation——规则；管理；调节</li><li>version——版本；译本；说法</li><li>command——命令；指挥；掌握；值得</li><li>statement——声明；陈述；结算单</li><li>convince——使确信；使信服</li><li>repetition——重复</li><li>rescue——营救</li><li>recover——收回；重新获得；恢复</li><li>hunt——打猎；搜寻；追逐</li><li>invent——发明；捏造</li><li>create——创造；引起</li><li>creative——有创造力的</li><li>devise——发明；策划（动词）</li><li>device——装配；策略（名词）</li><li>trap——陷阱；圈套；困境</li><li>tidy——整齐的；（使）整洁</li><li>arrange——安排；布置</li><li>order——次序；订购；治安；命令</li><li>disorder——混乱；骚乱；失调</li><li>expense——花费；开支</li><li>charge——索；控告；使充电；指责</li><li>purchase——购买；购买的物品</li><li>consumption——消耗量；消耗</li><li>cheat——欺骗；作弊；骗子</li><li>accuse——指控；指责</li><li>curse——咒骂；祸害</li><li>risk——危险；风险；引起危险的事物</li><li>omit——省略；遗漏</li><li>attach——贴；使依恋；认为有</li><li>withdraw——提取；收回；撤销</li><li>leak——漏；泄漏；漏洞</li><li>gas——气体；煤气；汽油；毒气</li><li>split——分裂；分担</li><li>mess——凌乱状态；困境；弄糟</li><li>crack——使破裂；打；裂缝</li><li>smash——粉碎；猛击；使失败；破碎</li><li>melt——融化；消散</li><li>burst——爆炸；突发；爆炸；爆发</li><li>blast——爆炸；一阵；炸</li><li>idle——懒散的；空闲的；无用的</li><li>poverty——贫穷；缺乏</li><li>ability——能力；才能</li><li>possibility——可能性；可能的事</li><li>opportunity——机会</li><li>oppose——反对</li><li>opponent——对手；反对者</li><li>confront——迎面遇到；正视；使对质</li><li>competitive——竞争的；好竞争的；有竞争力的</li><li>tackle——对付；与……交涉；阻截</li><li>encounter——遇到；遭遇</li><li>detail——细节；枝节；详述</li><li>instance——例子</li><li>character——性格；特性；人物</li><li>characterize——成为……的特征；描绘（人或物）的特性</li><li>item——条；条款；项目</li><li>component——成分；组成的</li><li>element——元素；成分；基础；自然力</li><li>particle——微粒；小品词</li><li>complex——复合的；复杂的；综合体</li><li>substance——物质；实质；大意；根据</li><li>sector——部门；部分；扇形</li><li>section——部分；章节；部门</li><li>portion——一部分；一份；分配</li><li>useless——无用的</li><li>inference——推断结果；推论</li><li>preference——偏爱的；偏爱的事物</li><li>conference——会议；商谈</li><li>reference——提到；参考；参考书目；证明书</li><li>negative——否定的；消极的；底片</li><li>expectation——期待；预期；前程</li><li>unexpected——想不到的；意外的</li></ol><h2 id="2、习题单词"><a href="#2、习题单词" class="headerlink" title="2、习题单词"></a>2、习题单词</h2><h3 id="1、词汇理解"><a href="#1、词汇理解" class="headerlink" title="1、词汇理解"></a>1、词汇理解</h3><ol><li><p>handle——把手；处理；应付</p></li><li><p>destination——目的地；终点；目标</p></li><li><p>major——少校；专业；主要的；主修；专攻</p></li><li><p>owners——物主；所有人</p></li><li><p>curiosity——好奇心；奇事；古玩</p></li><li><p>crowd——人群；群众；群集；塞满</p></li><li><p>exerted——用力；运用；发挥</p></li><li><p>frequent——时常发生的；频繁的；常见的</p></li><li><p>permanently——永久地；永恒地</p></li><li><p>impolitely——无礼地；粗鲁地</p><hr></li><li><p>inferior——下级；下属；低劣的</p></li><li><p>mission——使命；任务；天职</p></li><li><p>structure——结构；构造；建造</p></li><li><p>continues——继续；延续</p></li><li><p>arguing——争论；争辩；主张</p></li><li><p>ventured——冒险；大胆行事；勇于</p></li><li><p>gradual——逐渐的；逐步的</p></li><li><p>presumably——大概；可能；据推测</p></li><li><p>commonly——通常；一般地</p></li><li><p>equally——相等地；相同地</p><hr></li><li><p>decade——十年</p></li><li><p>concern——关心；担心；担忧；使担心</p></li><li><p>hunting——打猎；狩猎</p></li><li><p>decrease——减少；减少量</p></li><li><p>monument——纪念碑；纪念馆</p></li><li><p>cease——停止；终止</p></li><li><p>organization——团体；机构；组织</p></li><li><p>threatened——威胁；恐吓；预示</p></li><li><p>irritated——使恼怒；使烦躁；使不适；恼火的；急躁的</p></li><li><p>released——释放；解放</p></li><li><p>delicate——脆弱的；微妙的；棘手的；纤细的</p></li><li><p>cautious——谨慎的</p></li><li><p>huge——庞大的；巨大的</p><hr></li><li><p>circling——围绕</p></li><li><p>communities——团体；社区</p></li><li><p>competition——竞争</p></li><li><p>gather——集合；聚集</p></li><li><p>households——家庭</p></li><li><p>recession——衰退；不景气</p></li><li><p>surrounding——环境</p></li><li><p>accumulate——积聚；堆积</p></li><li><p>reviewed——回顾；评论；复习</p></li><li><p>serves——服务；供给</p></li><li><p>domestic——国内的；家庭的</p></li><li><p>financially——财务上；经济上</p></li><li><p>formally——正式地；形式上</p><hr></li><li><p>criteria——标准；准则</p></li><li><p>items——产品；项目</p></li><li><p>species——种；类；类型</p></li><li><p>variety——品种；变化</p></li><li><p>adapt——使适应；修改</p></li><li><p>prefer——更喜欢</p></li><li><p>recommending——推荐；建议（vt）</p></li><li><p>specify——明确说明；具体指定</p></li><li><p>available——可利用的；可得到的</p></li><li><p>nationwide——全国性的</p></li><li><p>nationwide——在全国范围内</p><hr></li><li><p>proof——证据；校样；防…的</p></li><li><p>revelation——揭示</p></li><li><p>courage——勇气</p></li><li><p>assignment——任务；分派</p></li><li><p>postpone——推迟；延期</p></li><li><p>pursue——从事；追赶；追求</p></li><li><p>reach——到达；联系</p></li><li><p>bold——大胆的</p></li><li><p>depressed——沮丧的</p></li><li><p>constantly——经常地</p></li><li><p>shortly——立刻；不久</p></li><li><p>optimistic——乐观的</p></li><li><p>reasonable——讲道理的；合理的</p></li></ol><hr><ol start="71"><li>noticeable——显而易见的，值得注意的</li><li>expanding——展开，扩大</li><li>gathering——聚会</li><li>decisiveness——决定性，决断</li><li>typical——典型的</li><li>initially——最初，开头</li><li>resumed——重新开始</li><li>immediately——立即</li><li>precautions——预防</li><li>monitored——观察，监督</li><li>grasped——抓住</li><li>grateful——感激的</li></ol><hr><ol start="83"><li>scattered——分散的</li><li>reproduces——繁殖</li><li>enables——使能够</li><li>shelter——庇护，掩蔽</li><li>abundant——丰富的，充裕的</li><li>permanent——永久的</li><li>alternative——选择性的</li><li>assigned——分配，指派</li><li>slaves——苦干，奴隶</li><li>accustomed——使习惯于</li><li>approach——接近，靠近</li></ol>]]></content>
      
      
      <categories>
          
          <category> 考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四级 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任务</title>
      <link href="/2020/08/02/%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/08/02/%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ul><li>异步任务</li><li>定时任务</li><li>邮件发送</li></ul><h2 id="1、异步任务"><a href="#1、异步任务" class="headerlink" title="1、异步任务"></a>1、异步任务</h2><h3 id="1-1、环境搭建"><a href="#1-1、环境搭建" class="headerlink" title="1.1、环境搭建"></a>1.1、环境搭建</h3><ol><li><p>新建springboot项目<code>springboot-08-task</code></p></li><li><p>选择web模块</p></li><li><p>创建一个业务类<code>AsyncService</code>，编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span>    <span class="token comment" spellcheck="true">// 交给Spring托管</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务进行中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写控制类<code>AsyncController</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    AsyncService asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E6%89%8D%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后才出现success，这是同步等待的情况。</a></p></li></ol><h3 id="1-2、异步处理"><a href="#1-2、异步处理" class="headerlink" title="1.2、异步处理"></a>1.2、异步处理</h3><ol><li><p>给hello方法添加@Async注解；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//告诉Spring这是一个异步方法</span><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务进行中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment" spellcheck="true">//开启异步注解功能</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTaskApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootTaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>重启测试，网页瞬间响应，后台代码依旧执行！</p></li></ol><h2 id="2、邮件发送"><a href="#2、邮件发送" class="headerlink" title="2、邮件发送"></a>2、邮件发送</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>使用方法：</p><ol><li><p>引入pom依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件（使用qq邮箱的模板）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx@qq.com</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">你的qq授权码</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true"># qq需要配置ssl</span><span class="token attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务，忘记授权码的，可以关闭之后重新开启就有了</p><p><img src="/2020/08/02/%E4%BB%BB%E5%8A%A1/image-20200727154721167.png" alt="image-20200727154721167" loading="lazy"></p></li><li><p>Spring单元测试，简单邮件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>JavaMailSenderImpl mailSender<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 邮件设置1：简单的邮件</span>    SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"通知-今晚开班会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"今晚19：30开会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/%E4%BB%BB%E5%8A%A1/image-20200727155555734.png" alt="image-20200727155555734" loading="lazy"></p></li><li><p>复杂邮件</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">contextLoads2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 邮件设置2：复杂的邮件</span>        <span class="token comment" spellcheck="true">// 注意不能直接new出来的</span>        MimeMessage message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"通知-今晚开班会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 支持使用html格式</span>        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;b style='color:red'>今天 7:30来开会&lt;/b>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送附件</span>        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"2.jpg"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1256240778@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/%E4%BB%BB%E5%8A%A1/image-20200727160650842.png" alt="image-20200727160650842" loading="lazy"></p></li></ol><p>可以通过查看自动配置类：MailSenderAutoConfiguration</p><h2 id="3、定时任务"><a href="#3、定时任务" class="headerlink" title="3、定时任务"></a>3、定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p><strong>cron表达式：</strong></p><blockquote><p>参考网站：<a href="https://www.jb51.net/article/138900.htm">https://www.jb51.net/article/138900.htm</a></p></blockquote><ol><li><p>结构（至少6个，也可以增加年）</p><p>corn从左到右（用空格隔开）：秒 分 小时 日 月 星期 年份</p></li><li><p>各字段的含义</p></li></ol><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0~59的整数</td><td>, - * /   四个字符</td></tr><tr><td>分（Minutes）</td><td>0~59的整数</td><td>, - * /   四个字符</td></tr><tr><td>小时（Hours）</td><td>0~23的整数</td><td>, - * /   四个字符</td></tr><tr><td>日期（DayofMonth）</td><td>1~31的整数（但是你需要考虑你月的天数）</td><td>,- * ? / L W C   八个字符</td></tr><tr><td>月份（Month）</td><td>1~12的整数或者 JAN-DEC</td><td>, - * /   四个字符</td></tr><tr><td>星期（DayofWeek）</td><td>1~7的整数或者 SUN-SAT （1=SUN）</td><td>, - * ? / L C #   八个字符</td></tr><tr><td>年(可选，留空)（Year）</td><td>1970~2099</td><td>, - * /   四个字符</td></tr></tbody></table><p><strong>测试步骤：</strong></p><ol><li><p>创建一个业务类<code>ScheduledService</code>，我们里面存在一个Scheduled方法，他需要定时执行，怎么处理呢？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//秒   分   时     日   月   周几</span>   <span class="token comment" spellcheck="true">//0 * * * * MON-FRI</span>   <span class="token comment" spellcheck="true">//注意cron表达式的用法；</span>   <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 * * * * 0-7"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Scheduled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在主程序上增加<code>@EnableScheduling</code> 开启定时任务功能</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAsync</span>    <span class="token comment" spellcheck="true">// 开启异步注解功能</span><span class="token annotation punctuation">@EnableScheduling</span>   <span class="token comment" spellcheck="true">// 开启基于注解的定时任务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot08TaskApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot08TaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>常用的表达式</p><pre class=" language-te"><code class="language-te">0/2 * * * * ?   表示每2秒 执行任务0 0/2 * * * ?   表示每2分钟 执行任务0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作0 0 10,14,16 * * ?   每天上午10点，下午2点，4点0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时0 0 12 ? * WED   表示每个星期三中午12点0 0 12 * * ?   每天中午12点触发0 15 10 ? * *   每天上午10:15触发0 15 10 * * ?     每天上午10:15触发0 15 10 * * ?   每天上午10:15触发0 15 10 * * ? 2005   2005年的每天上午10:15触发0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发0 15 10 ? * MON-FRI   周一至周五的上午10:15触发0 15 10 15 * ?   每月15日上午10:15触发0 15 10 L * ?   每月最后一日的上午10:15触发0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger</title>
      <link href="/2020/08/02/swagger/"/>
      <url>/2020/08/02/swagger/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h2 id="1、Swagger简介"><a href="#1、Swagger简介" class="headerlink" title="1、Swagger简介"></a>1、Swagger简介</h2><p><img src="/2020/08/02/swagger/image-20200802225518860.png" alt="image-20200802225518860" loading="lazy"></p><h3 id="1-1、前后端分离"><a href="#1-1、前后端分离" class="headerlink" title="1.1、前后端分离"></a>1.1、前后端分离</h3><p>Vue + SpringBoot</p><p>后端时代：前端只管理静态页面；</p><p>前后端分离时代</p><ol><li>后端：后端控制层，服务层，数据访问层</li><li>前端：前端控制层，视图层</li><li>前后端相对独立，松耦合</li><li>前后端甚至可以部署在不同的服务器上</li></ol><p>问题</p><ul><li>前端后集尘协调，沟通不利</li></ul><p>解决方法</p><ul><li>制定计划提纲，实时更新API，降低集尘的风险</li><li>早些年：指定word计划文档</li><li>前后端分离：<ul><li>前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息改动</li></ul></li></ul><h3 id="2-2、Swagger"><a href="#2-2、Swagger" class="headerlink" title="2.2、Swagger"></a>2.2、Swagger</h3><blockquote><p>号称世界上最流行的API框架</p><p>RestFul Api 文档在线自动生成工具 =》API文档与API定义同步更新</p><p>直接运行，可以在线测试API接口</p></blockquote><p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p><p>文档：<a href="https://swagger.io/docs/open-source-tools/swagger-editor/">https://swagger.io/docs/open-source-tools/swagger-editor/</a></p><p><img src="/2020/08/02/swagger/image-20200727110051606.png" alt="image-20200727110051606" loading="lazy"></p><h2 id="2、Swagger的使用"><a href="#2、Swagger的使用" class="headerlink" title="2、Swagger的使用"></a>2、Swagger的使用</h2><blockquote><p>在项目中使用swagger需要Springfox</p></blockquote><ul><li>swagger2</li><li>swagger-ui</li></ul><h3 id="2-1、SpringBoot集成Swagger"><a href="#2-1、SpringBoot集成Swagger" class="headerlink" title="2.1、SpringBoot集成Swagger"></a>2.1、SpringBoot集成Swagger</h3><ol><li><p>新建SpringBoot项目<code>springboot-07-swagger</code>，选择<code>web</code>模板</p></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写控制类<code>MyController</code>，进行环境测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"hello swagger!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/swagger/image-20200727124120007.png" alt="image-20200727124120007" loading="lazy"></p></li><li><p>配置Swagger ==&gt; 编写配置类<code>SwaggerConfig</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//配置类</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment" spellcheck="true">// 开启Swagger2的自动配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> </code></pre></li><li><p>测试运行，访问<a href="http://localhost:8080/swagger-ui.html%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0swagger%E7%9A%84%E7%95%8C%E9%9D%A2%EF%BC%9B(%E5%A6%82%E6%9E%9C%E8%AE%BF%E9%97%AE%E5%87%BA%E7%8E%B0404%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%82%A3%E5%B0%B1%E9%99%8D%E4%BD%8E%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC)">http://localhost:8080/swagger-ui.html，可以看到swagger的界面；(如果访问出现404页面，那就降低依赖版本)</a></p><p><img src="/2020/08/02/swagger/image-20200727131828697.png" alt="image-20200727131828697" loading="lazy"></p></li></ol><h3 id="2-2、配置Swagger"><a href="#2-2、配置Swagger" class="headerlink" title="2.2、配置Swagger"></a>2.2、配置Swagger</h3><ol><li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//配置docket以配置Swagger具体参数</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>可以通过apiInfo()属性配置文档信息</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置文档信息</span><span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"联系人名字"</span><span class="token punctuation">,</span> <span class="token string">"http://xxx.xxx.com/联系人访问链接"</span><span class="token punctuation">,</span> <span class="token string">"联系人邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>           <span class="token string">"Swagger学习"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>           <span class="token string">"学习演示如何配置Swagger"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>           <span class="token string">"v1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>           <span class="token string">"http://terms.service.url/组织链接"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 组织链接</span>           contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 联系人信息</span>           <span class="token string">"Apach 2.0 许可"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可</span>           <span class="token string">"许可链接"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可连接</span>           <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 扩展</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>Docket 实例关联上 apiInfo()</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p><p><img src="/2020/08/02/swagger/image-20200727132813371.png" alt="image-20200727132813371" loading="lazy"></p></li></ol><h3 id="2-3、配置扫描接口及开关"><a href="#2-3、配置扫描接口及开关" class="headerlink" title="2.3、配置扫描接口及开关"></a>2.3、配置扫描接口及开关</h3><blockquote><p>使用Docket.select()，以build()结尾</p></blockquote><ol><li><p>编写<code>SwaggerConfig</code>代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// RequestHandlerSelectors配置如何扫描接口</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p><p><img src="/2020/08/02/swagger/image-20200727133218848.png" alt="image-20200727133218848" loading="lazy"></p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><pre class=" language-java"><code class="language-java"><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 扫描所有，项目中的所有接口都会被扫描到</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不扫描接口</span><span class="token comment" spellcheck="true">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotation<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><span class="token function">withClassAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotation<span class="token punctuation">)</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token keyword">final</span> String basePackage<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 根据包路径扫描接口</span></code></pre><p><img src="/2020/08/02/swagger/image-20200727115430698.png" alt="image-20200727115430698" loading="lazy"></p></li><li><p>除此之外，对指定显示的内容进行再<strong>过滤</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/xj开头的接口</span>        <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/xj/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">/</span><span class="token operator">*</span>                <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 任何请求都扫描            <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 任何请求都不扫描            <span class="token function">regex</span><span class="token punctuation">(</span><span class="token keyword">final</span> String pathRegex<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 通过正则表达式控制            <span class="token function">ant</span><span class="token punctuation">(</span><span class="token keyword">final</span> String antPattern<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 通过<span class="token function">ant</span><span class="token punctuation">(</span><span class="token punctuation">)</span>控制           <span class="token operator">*</span><span class="token operator">/</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><blockquote><p>配置Swagger开关</p></blockquote><ul><li><p>enable是否启动Swagger，如果为false，则不能在浏览器中访问swagger</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/xj开头的接口</span>        <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/xj/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ul><p>让Swagger在生产环境中使用，在发布的时候不使用</p><ul><li>判断是不是生产环境 flag=false</li><li>注入enable()</li></ul><p>步骤：</p><ol><li><p>编写两个配置文件<code>application-dev.properties</code>和<code>application-pro.properties</code>，分别为8081和8082端口，然后在<code>application.properties</code>中指定默认环境</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 分别指定端口号</span><span class="token comment" spellcheck="true"># application-dev.properties中的</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token comment" spellcheck="true"># application-pro.properties中的</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 在application.properties中指定默认环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre></li><li><p>修改配置类，获取项目的环境</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 设置要显示swagger的环境</span>    Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断当前是否处于该环境</span>    <span class="token comment" spellcheck="true">// 通过 enable() 接收此参数判断是否要显示</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 配置如何通过path过滤,即这里只扫描请求以/xj开头的接口</span>        <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/xj/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>测试的时候注意修改地址的端口号，如设置了默认dev就需要变为8081</p><p><img src="/2020/08/02/swagger/image-20200727134554985.png" alt="image-20200727134554985" loading="lazy"></p></li></ol><h3 id="2-4、配置API分组"><a href="#2-4、配置API分组" class="headerlink" title="2.4、配置API分组"></a>2.4、配置API分组</h3><ol><li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置分组</span>        <span class="token comment" spellcheck="true">// 省略配置....</span><span class="token punctuation">}</span> </code></pre></li><li><p>重启项目查看分组</p><p><img src="/2020/08/02/swagger/image-20200727134808228.png" alt="image-20200727134808228" loading="lazy"></p></li><li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>重启项目查看即可</p><p><img src="/2020/08/02/swagger/image-20200727135004239.png" alt="image-20200727135004239" loading="lazy"></p></li></ol><h3 id="2-5、实体配置"><a href="#2-5、实体配置" class="headerlink" title="2.5、实体配置"></a>2.5、实体配置</h3><blockquote><p>主要是控制类进行增加上去的，而实体类中的注解是说明作用，只影响显示中的说明</p><p>@ApiModel：修饰类</p><p>@ApiModelProperty：修饰属性</p></blockquote><ol><li><p>创建pojo实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>修改控制类，增加如下代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>重启查看测试，注意切换到我们配置的组内</p><p><img src="/2020/08/02/swagger/image-20200727135228045.png" alt="image-20200727135228045" loading="lazy"></p></li></ol><h3 id="2-6、常用注解"><a href="#2-6、常用注解" class="headerlink" title="2.6、常用注解"></a>2.6、常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>在控制类中进行修饰，都是修饰方法的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取用户名"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{ username} "</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/swagger/image-20200727141921819.png" alt="image-20200727141921819" loading="lazy"></p><p><img src="/2020/08/02/swagger/image-20200727143606867.png" alt="image-20200727143606867" loading="lazy"></p><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读和测试！</p><h3 id="2-7、拓展：其他皮肤"><a href="#2-7、拓展：其他皮肤" class="headerlink" title="2.7、拓展：其他皮肤"></a>2.7、拓展：其他皮肤</h3><p>我们可以导入不同的包实现不同的皮肤定义：如果修改了端口号记得访问<strong>对应端口</strong>，里面的配置信息还是一致。</p><ol><li><p>默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/swagger/image-20200727144645271.png" alt="image-20200727144645271" loading="lazy"></p></li><li><p>bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/swagger/image-20200727144547432.png" alt="image-20200727144547432" loading="lazy"></p></li><li><p>Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong>，这个暂时访问不了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-ui-layer包 /docs.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.caspar-chen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-ui-layer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/swagger/image-20200727151615208.png" alt="image-20200727151615208" loading="lazy"></p></li><li><p>mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-mg-ui包 /document.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zyplayer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-mg-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/swagger/image-20200727150936383.png" alt="image-20200727150936383" loading="lazy"></p></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>我们可以通过Swagger给一些比较难理解的属性或者接口增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol><p>【注意】在正式发布的时候，需要关闭Swagger！出于安全也节省空间！</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm框架</title>
      <link href="/2020/08/02/ssm/"/>
      <url>/2020/08/02/ssm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><h2 id="1、使用的环境"><a href="#1、使用的环境" class="headerlink" title="1、使用的环境"></a>1、使用的环境</h2><p><strong>环境：</strong></p><ul><li>IDEA</li><li>MySQL 8</li><li>Tomcat 8</li><li>Maven 3.5</li></ul><p><strong>要求：</strong></p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><h2 id="2、数据库环境"><a href="#2、数据库环境" class="headerlink" title="2、数据库环境"></a>2、数据库环境</h2><p>创建一个存放书籍数据的数据库表</p><ul><li><strong>AUTO_INCREMENT  自动添加id</strong></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'书id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'书名'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>detail<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'从入门到放弃'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MySQL'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'从删库到跑路'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Linux'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'从进门到进牢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、基本环境搭建"><a href="#3、基本环境搭建" class="headerlink" title="3、基本环境搭建"></a>3、基本环境搭建</h2><ol><li><p>新建一Maven项目！ ssmbuild ， 添加web的支持</p></li><li><p>导入相关的pom依赖！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Lombok--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Servlet - JSP --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>Maven资源过滤设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li><li><p>建立基本结构和配置框架！</p><ul><li><p>com.xj.pojo</p></li><li><p>com.xj.dao</p></li><li><p>com.xj.service</p></li><li><p>com.xj.controller</p></li><li><p>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>applicationContext.xml（Spring）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/springbeans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h2 id="4、Mybatis层编写"><a href="#4、Mybatis层编写" class="headerlink" title="4、Mybatis层编写"></a>4、Mybatis层编写</h2><ol><li><p>数据库配置文件 database.properties</p><p>注意：此处为<strong>mysql 8</strong>的配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span></code></pre></li><li><p>IDEA关联数据库</p><p><img src="/2020/08/02/ssm/image-20200614183441037.png" alt="image-20200614183441037" loading="lazy"></p></li><li><p>编写MyBatis的核心配置文件 mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--为改包下的实体类起别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xj/dao/BookMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写数据库对应的实体类 com.xj.pojo.Books</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> bookID<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> String detail<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写Dao层的 Mapper接口！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookMapper</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//增加一个Book</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id删除一个Book</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookID"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新Book</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookID"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询全部Book,返回list集合</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写接口对应的 BookMapper.xml 文件。需要有导入MyBatis的包;</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--增加一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into ssmbuild.books (bookID,bookName,bookCounts,detail)        values (#{ bookID} , #{ bookName} , #{ bookCounts} , #{ detail} );    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据id删除一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from ssmbuild.books where bookID=#{ bookID}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--更新Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update ssmbuild.books        set bookID=#{ bookID} , bookName=#{ bookName} ,            bookCounts=#{ bookCounts} , detail=#{ detail}         where bookID=#{ bookID}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据id查询,返回一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from ssmbuild.books where bookID=#{ bookID}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询全部Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from ssmbuild.books    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写Service层的接口和实现类</p><p>接口:（定义的方法与接口类的一样）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 增加一个Book</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据id删除一个Book</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新Book</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据id查询,返回一个Book</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全部Book,返回list集合</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>实现类（面向接口）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BookMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 调用Dao层的操作，设置一个set接口，方便Spring管理</span>    <span class="token keyword">private</span> BookMapper bookMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookMapper</span><span class="token punctuation">(</span>BookMapper bookMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><h2 id="5、Spring层"><a href="#5、Spring层" class="headerlink" title="5、Spring层"></a>5、Spring层</h2><ol><li><p>配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；</p></li><li><p>我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置整合mybatis --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.关联数据库文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.数据库连接池 --></span>    <span class="token comment" spellcheck="true">&lt;!--数据库连接池        dbcp 半自动化操作 不能自动连接        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置连接池属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ jdbc.driver} <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ jdbc.url} <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ jdbc.username} <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ jdbc.password} <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0连接池的私有属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭连接后不自动commit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接超时时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 当获取连接失败重试次数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置SqlSessionFactory对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --></span>    <span class="token comment" spellcheck="true">&lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 给出需要扫描Dao接口包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>Spring整合service层;   spring-service.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描service相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--BookServiceImpl注入到IOC容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><h2 id="6、SpringMVC层"><a href="#6、SpringMVC层" class="headerlink" title="6、SpringMVC层"></a>6、SpringMVC层</h2><ol><li><p>添加框架支持</p></li><li><p><strong>配置web.xml文件</strong></p><p><strong>这里需要加载的是总文件applicationContext.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servletclass</span><span class="token punctuation">></span></span>            org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--encodingFilter--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Session过期时间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>spring-mvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SpringMVC --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.开启SpringMVC注解驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源默认servlet配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.扫描web相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>Spring配置整合文件，applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入三部分文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><h2 id="7、Controller-和-视图层编写"><a href="#7、Controller-和-视图层编写" class="headerlink" title="7、Controller 和 视图层编写"></a>7、Controller 和 视图层编写</h2><h3 id="方法一：查询全部书籍"><a href="#方法一：查询全部书籍" class="headerlink" title="方法一：查询全部书籍"></a>方法一：查询全部书籍</h3><ol><li><p>BookController 类编写 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 自动装配</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"bookServiceImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/allBook"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写首页 index.jsp（获取当前路径${pageContext.request.contextPath}）</p><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %><!DOCTYPE HTML><html>    <head>        <title>首页</title>        <style type="text/css">            a {                 text-decoration: none;                color: black;                font-size: 18px;            }             h3 {                 width: 180px;                height: 38px;                margin: 100px auto;                text-align: center;                line-height: 38px;                background: deepskyblue;                border-radius: 4px;            }         </style>    </head>    <body>        <h3>            <a href="${ pageContext.request.contextPath} /book/allBook">点击进入列表页</a>        </h3>    </body></html></code></pre></li><li><p>数据列表页面allBook.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>书籍列表</title>        <meta name="viewport" content="width=device-width, initialscale= 1.0">        <!-- 引入 Bootstrap -->        <link              href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"              rel="stylesheet">    </head>    <body>        <div class="container">            <div class="row clearfix">                <div class="col-md-12 column">                    <div class="page-header">                        <h1>                            <small>书籍列表 —— 显示所有书籍</small>                        </h1>                    </div>                </div>            </div>            <div class="row">                <div class="col-md-4 column">                    <a class="btn btn-primary"                       href="${ pageContext.request.contextPath} /book/toAddBook">新增</a>                </div>            </div>            <div class="row clearfix">                <div class="col-md-12 column">                    <table class="table table-hover table-striped">                        <thead>                            <tr>                                <th>书籍编号</th>                                <th>书籍名字</th>                                <th>书籍数量</th>                                <th>书籍详情</th>                                <th>操作</th>                            </tr>                        </thead>                        <tbody>                            <c:forEach var="book"                                       items="${ requestScope.get('list')} ">                                <tr>                                    <td>${ book.getBookID()} </td>                                    <td>${ book.getBookName()} </td>                                    <td>${ book.getBookCounts()} </td>                                    <td>${ book.getDetail()} </td>                                    <td>                                        <a                                           href="${ pageContext.request.contextPath} /book/toUpdateBook?                                                 id=${ book.getBookID()} ">更改</a> |                                        <a                                           href="${ pageContext.request.contextPath} /book/del/${ book.getBookID()} ">                                            删除</a>                                    </td>                                </tr>                            </c:forEach>                        </tbody>                    </table>                </div>            </div>        </div></code></pre></li><li><p><strong>配置Tomcat并启动测试，并对web导入包，不然出现404</strong></p></li></ol><h3 id="方法二：添加书籍"><a href="#方法二：添加书籍" class="headerlink" title="方法二：添加书籍"></a>方法二：添加书籍</h3><ol><li><p>BookController 类编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toAddBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toAddPaper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"addBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addPaper</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>添加书籍页面：addBook.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>新增书籍</title>        <meta name="viewport" content="width=device-width, initialscale=1.0">        <!-- 引入 Bootstrap -->        <link              href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"              rel="stylesheet">    </head>    <body>        <div class="container">            <div class="row clearfix">                <div class="col-md-12 column">                    <div class="page-header">                        <h1>                            <small>新增书籍</small>                        </h1>                    </div>                </div>            </div>            <form action="${ pageContext.request.contextPath} /book/addBook"                  method="post">                书籍名称：<input type="text" name="bookName"><br><br><br>                书籍数量：<input type="text" name="bookCounts"><br><br><br>                书籍详情：<input type="text" name="detail"><br><br><br>                <input type="submit" value="添加">            </form>        </div>    </body></html></code></pre></li></ol><h3 id="方法三：修改书籍"><a href="#方法三：修改书籍" class="headerlink" title="方法三：修改书籍"></a>方法三：修改书籍</h3><ol><li><p>BookController 类编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toUpdateBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toUpdateBook</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span>books <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"updateBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateBook</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> Books book<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    bookService<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getBookID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span> books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>修改书籍页面 updateBook.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>修改信息</title>        <meta name="viewport" content="width=device-width, initialscale=                                       1.0">        <!-- 引入 Bootstrap -->        <link              href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"              rel="stylesheet">    </head>    <body>        <div class="container">            <div class="row clearfix">                <div class="col-md-12 column">                    <div class="page-header">                        <h1>                            <small>修改信息</small>                        </h1>                    </div>                </div>            </div>            <form action="${ pageContext.request.contextPath} /book/updateBook"                  method="post">                <input type="hidden" name="bookID" value="${ book.getBookID()} "/>                书籍名称：<input type="text" name="bookName"                            value="${ book.getBookName()} "/>                书籍数量：<input type="text" name="bookCounts"                            value="${ book.getBookCounts()} "/>                书籍详情：<input type="text" name="detail"                            value="${ book.getDetail() } "/>                <input type="submit" value="提交"/>            </form>        </div>    </body></html></code></pre></li></ol><h3 id="方法四：删除书籍"><a href="#方法四：删除书籍" class="headerlink" title="方法四：删除书籍"></a>方法四：删除书籍</h3><ol><li><p>BookController 类编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/del/{ bookId} "</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     bookService<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="方法五：实现查询书籍功能"><a href="#方法五：实现查询书籍功能" class="headerlink" title="方法五：实现查询书籍功能"></a>方法五：实现查询书籍功能</h3><ol><li><p>前端页面增加一个输入框和查询按钮</p><pre class=" language-jsp"><code class="language-jsp"><div class="col-md-4 column"></div><div class="col-md-4 column">    <form class="form-inline" action="/book/queryBook" method="post"          style="float: right">        <input type="text" name="queryBookName" class="form-control"               placeholder="输入查询书名" required>        <input type="submit" value="查询" class="btn btn-primary">    </form></div></code></pre></li><li><p>编写查询的Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">queryBook</span><span class="token punctuation">(</span>String queryBookName<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要查询的书籍:"</span><span class="token operator">+</span>queryBookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//业务逻辑还没有写</span>    <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>由于底层没有实现，所以我们要将底层代码先搞定(根据书名查询的功能)</p></li><li><p>BookMapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span>String bookName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>BookMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--根据书名查询,返回一个Book--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from ssmbuild.books    where bookName = #{ bookName} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>Service接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span>String bookName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Service实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span>String bookName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookByName</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>完善Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">queryBook</span><span class="token punctuation">(</span>String queryBookName<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要查询的书籍:"</span><span class="token operator">+</span>queryBookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookByName</span><span class="token punctuation">(</span>queryBookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Books<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>进行优化！我们发现查询的东西不存在的时候，查出来的页面是空的，我们可以提高一下用户的体验性！</p><ol><li><p>在前端添加一个展示全部书籍的按钮</p><p><img src="/2020/08/02/ssm/image-20200614230916789.png" alt="image-20200614230916789" loading="lazy"></p></li><li><p>并在后台增加一些判断性的代码！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">queryBook</span><span class="token punctuation">(</span>String queryBookName<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要查询的书籍:"</span><span class="token operator">+</span>queryBookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果查询的数据存在空格，则优化</span>    Books books <span class="token operator">=</span>        bookService<span class="token punctuation">.</span><span class="token function">queryBookByName</span><span class="token punctuation">(</span>queryBookName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Books<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果没有查出来书籍，则返回全部书籍列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>books<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>         list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"没有找到本书！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>将错误信息展示在前台页面！完整的查询栏代码</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-inline<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ pageContext.request.contextPath} /book/queryBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span> right</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${ error} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>           <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入查询书名<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>查询<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ol><p><strong>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家</strong><br><strong>需要保证，不看任何东西，自己也可以完整的实现出来！</strong></p><p><strong>项目结构图</strong>:</p><p><img src="/2020/08/02/ssm/image-20200615124723387.png" alt="image-20200615124723387" loading="lazy"></p><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><ol><li><p>无法在web.xml或使用此应用程序部署的jar文件中解析绝对uri：[<a href="http://java.sun.com/jsp/jstl/core]">http://java.sun.com/jsp/jstl/core]</a></p><p><strong>解决方法</strong>：</p><ul><li>修改D:\TomCat\apache-tomcat-8.5.53\conf的catalina.properties文件,可能是jstl包被跳过了</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">tomcat.util.scan.StandardJarScanFilter.jarsToSkip</span><span class="token punctuation">=</span><span class="token attr-value">\taglibs-standard-compat-1.2.5.jar,\taglibs-standard-impl-1.2.5.jar,\taglibs-standard-jstlel-1.2.5.jar,\taglibs-standard-spec-1.2.5,jar,\</span></code></pre><ul><li>如果不行在导入其他依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--jstl--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下面两个standard，试试哪个可以吧--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="2"><li><p>MySQL8的错误</p><ul><li><p>修改url</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true</span></code></pre></li><li><p>修改导入的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springsecurity</title>
      <link href="/2020/08/02/springsecurity/"/>
      <url>/2020/08/02/springsecurity/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><p><img src="/2020/08/02/springsecurity/image-20200802223821529.png" alt="image-20200802223821529" loading="lazy"></p><ul><li>shiro、SpringSecurity</li><li>认证、授权</li></ul><h2 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h2><ol><li><p>新建项目<code>spring-05-security</code></p></li><li><p>导入web模块，thymeleaf模块</p><p><img src="/2020/08/02/springsecurity/image-20200724151057862.png" alt="image-20200724151057862" loading="lazy"></p></li><li><p>导入素材</p></li><li><p>关闭模板引擎的缓存<code>application.properties</code></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 关闭缓存</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre></li><li><p>创建controller文件<code>RouterController</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouterController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/index"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"/views/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level1/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"/views/level1/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level2/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"/views/level2/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level3/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"/views/level3/"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>打开浏览器进行测试</p><p><img src="/2020/08/02/springsecurity/image-20200724155447222.png" alt="image-20200724155447222" loading="lazy"></p></li></ol><h2 id="2、认识SpringSecurity"><a href="#2、认识SpringSecurity" class="headerlink" title="2、认识SpringSecurity"></a>2、认识SpringSecurity</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式，@EnableXXX就是开启某个模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><blockquote><p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a> </p><p>查看我们自己项目中的版本，找到对应的帮助文档：</p><p><a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a>  #servlet-applications 8.16.4</p></blockquote><p><strong>测试</strong></p><ol><li><p>引入 Spring Security 模块</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- security --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果报了如下错误</p><p><img src="/2020/08/02/springsecurity/image-20200724164902647.png" alt="image-20200724164902647" loading="lazy"></p><p>在导入下面这个版本设置即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-security.version</span><span class="token punctuation">></span></span>5.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-security.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建一个<code>config</code>，创建<code>SecurityConfig</code>，这是基本框架</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span> <span class="token comment" spellcheck="true">// 开启WebSecurity模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>定制请求的授权规则</p><p>而定义为<code>.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;vip1&quot;, &quot;vip2&quot;, &quot;vip3&quot;)</code>就可以设置多个值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 定制请求的授权规则</span>    <span class="token comment" spellcheck="true">// 首页所有人可以访问</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试一下：发现除了首页，其他页面进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p><p><img src="/2020/08/02/springsecurity/image-20200724165108454.png" alt="image-20200724165108454" loading="lazy"></p></li><li><p>在<code>configure()</code>方法中加入以下配置，开启自动配置的登录功能！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启自动配置的登录功能</span><span class="token comment" spellcheck="true">// /login 请求来到登录页</span><span class="token comment" spellcheck="true">// /login?error 重定向到这里表示登录失败</span>http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击进去查看源码，下载源码之后可以看到一堆注释，其中就有说明会跳转到 login</p><p><img src="/2020/08/02/springsecurity/image-20200724165622433.png" alt="image-20200724165622433" loading="lazy"></p></li><li><p>、测试一下：发现，没有权限的时候，会跳转到登录的页面（这个页面是自动生成的）</p><p><img src="/2020/08/02/springsecurity/image-20200724165232494.png" alt="image-20200724165232494" loading="lazy"></p></li><li><p>重写<code>configure(AuthenticationManagerBuilder auth)</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义认证规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>   <span class="token comment" spellcheck="true">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span>   <span class="token comment" spellcheck="true">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span>   <span class="token comment" spellcheck="true">//spring security 官方推荐的是使用bcrypt加密方式。</span>   auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"xj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>注意：我们要将前端传过来的密码进行某种方式加密，否则就无法登录，会爆出<code>There is no PasswordEncoder mapped for the id “null”</code>错误</p></li><li><p>测试，发现，登录成功，并且每个角色只能访问自己认证下的规则</p></li></ol><h2 id="3、权限控制和注销"><a href="#3、权限控制和注销" class="headerlink" title="3、权限控制和注销"></a>3、权限控制和注销</h2><ol><li><p>开启自动配置的注销的功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制请求的授权规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//....</span>    <span class="token comment" spellcheck="true">//开启自动配置的注销的功能</span>    <span class="token comment" spellcheck="true">// /logout 注销请求</span>    http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>我们在前端，增加一个注销的按钮，index.html 导航栏中</p><p><code>/logout</code>路径就是注销的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /logout} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试：登录成功后点击注销，发现注销完毕会跳转到登录页面！</p><p><img src="/2020/08/02/springsecurity/image-20200724173618260.png" alt="image-20200724173618260" loading="lazy"></p><p><img src="/2020/08/02/springsecurity/image-20200724173624863.png" alt="image-20200724173624863" loading="lazy"></p></li><li><p>但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// .logoutSuccessUrl("/"); 注销成功来到首页</span>http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>测试，注销完毕后，发现跳转到首页</p></li></ol><h2 id="4、显示内容的控制"><a href="#4、显示内容的控制" class="headerlink" title="4、显示内容的控制"></a>4、显示内容的控制</h2><blockquote><p>用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！</p><p>我们需要结合thymeleaf中的一些功能</p><p>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面</p></blockquote><ol><li><p>导入Maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- thymeleaf-extras-springsecurity4 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>导入命名空间</p><pre class=" language-html"><code class="language-html">xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity5"</code></pre></li><li><p>修改导航栏，增加认证判断</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--登录注销--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--如果未登录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /login} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--如果已登录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          角色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.authorities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /logout} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>重启测试，显示了所有的标签</p><p><img src="/2020/08/02/springsecurity/image-20200724174441109.png" alt="image-20200724174441109" loading="lazy"></p><p>这是因为Thymeleaf的版本原因，只能对应较低版本的SpringBoot，降低SpringBoot的版本</p><p><img src="/2020/08/02/springsecurity/image-20200724174642081.png" alt="image-20200724174642081" loading="lazy"></p><p>也有可能是URI错误</p><p><img src="/2020/08/02/springsecurity/image-20200724182929391.png" alt="image-20200724182929391" loading="lazy"></p><p>点击设置</p><p><img src="/2020/08/02/springsecurity/image-20200724183143139.png" alt="image-20200724183143139" loading="lazy"></p></li></ol><ol start="5"><li><p>重新进行测试，害 原来是忘记导入上面的依赖了<code>thymeleaf-extras-springsecurity4</code></p><p><img src="/2020/08/02/springsecurity/image-20200724220656712.png" alt="image-20200724220656712" loading="lazy"></p><p><img src="/2020/08/02/springsecurity/image-20200724220721574.png" alt="image-20200724220721574" loading="lazy"></p></li><li><p>如果注销404了，就是因为它默认防止<code>csrf</code>跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在springsecurity中关闭csrf功能</p><p><img src="/2020/08/02/springsecurity/image-20200724220739529.png" alt="image-20200724220739529" loading="lazy"></p></li><li><p>在配置中增加 <code>http.csrf().disable();</code>关闭csrf功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span>http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>继续将下面的角色功能块认证完成</p><p>在对应的模块前面增加<code>sec:authorize=&quot;hasRole(&#39;vip1&#39;)&quot;</code>判断条件，<code>hasAnyRole</code>可以加多个判断</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasAnyRole(<span class="token punctuation">'</span>vip1<span class="token punctuation">'</span>,<span class="token punctuation">'</span>vip2<span class="token punctuation">'</span>,<span class="token punctuation">'</span>vip3<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui raised segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Level 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /level1/1} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bullhorn icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Level-1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /level1/2} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bullhorn icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Level-1-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /level1/3} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bullhorn icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Level-1-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><p><img src="/2020/08/02/springsecurity/image-20200724221519267.png" alt="image-20200724221519267" loading="lazy"></p></li></ol><h2 id="5、记住我功能"><a href="#5、记住我功能" class="headerlink" title="5、记住我功能"></a>5、记住我功能</h2><blockquote><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？</p></blockquote><ol><li><p>开启记住我功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制请求的授权规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//记住我</span>   http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！这是因为存放到了Cookie中了</p><p><img src="/2020/08/02/springsecurity/image-20200724221740963.png" alt="image-20200724221740963" loading="lazy"></p></li><li><p>我们点击注销的时候，可以发现，springsecurity 帮我们自动删除了这个 cookie</p><p><img src="/2020/08/02/springsecurity/image-20200724221835131.png" alt="image-20200724221835131" loading="lazy"></p><p><img src="/2020/08/02/springsecurity/image-20200724221953214.png" alt="image-20200724221953214" loading="lazy"></p></li><li><p>登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie</p></li></ol><h2 id="6、定制登录页"><a href="#6、定制登录页" class="headerlink" title="6、定制登录页"></a>6、定制登录页</h2><blockquote><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p></blockquote><ol><li><p>在刚才的登录页配置后面指定 loginpage</p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>然后前端也需要指向我们自己定义的 login请求</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /toLogin} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address card icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试失败：<code>IllegalArgumentException: &#39;toLogin?error&#39; is not a valid redirect URL</code></p><p><img src="/2020/08/02/springsecurity/image-20200724222650135.png" alt="image-20200724222650135" loading="lazy"></p><p>这是因为我刚才少写了斜杠了。。<code>loginPage(&quot;toLogin&quot;);</code></p></li></ol><h3 id="设置登录页"><a href="#设置登录页" class="headerlink" title="设置登录页"></a>设置登录页</h3><ol><li><p>我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:在 loginPage()源码中的注释上有写明：</p><p>主要修改<code>th:action=&quot;@{ /login} &quot; method=&quot;post&quot;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /login} <span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lock icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui blue submit button<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 登陆表单提交请求</span></code></pre></li><li><p>在登录页增加记住我的多选框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 记住我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>后端验证处理</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制记住我的参数！</span>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>测试</p><p><img src="/2020/08/02/springsecurity/image-20200724225243718.png" alt="image-20200724225243718" loading="lazy"></p></li></ol><h2 id="完整的配置代码"><a href="#完整的配置代码" class="headerlink" title="完整的配置代码"></a>完整的配置代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>AuthenticationManagerBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span>BCryptPasswordEncoder<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span> <span class="token comment" spellcheck="true">// 开启WebSecurity模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 定制请求的授权规则</span>        <span class="token comment" spellcheck="true">// 首页所有人可以访问</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启自动配置的登录功能</span>        <span class="token comment" spellcheck="true">// /login 请求来到登录页</span>        <span class="token comment" spellcheck="true">// /login?error 重定向到这里表示登录失败</span>        <span class="token comment" spellcheck="true">// .loginPage("toLogin");指定自己的登录页</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 登陆表单提交请求</span>        <span class="token comment" spellcheck="true">//开启自动配置的注销的功能</span>        <span class="token comment" spellcheck="true">// /logout 注销请求</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记住我</span>        http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//定义认证规则</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>        <span class="token comment" spellcheck="true">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span>        <span class="token comment" spellcheck="true">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span>        <span class="token comment" spellcheck="true">//spring security 官方推荐的是使用bcrypt加密方式</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"xj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro</title>
      <link href="/2020/08/02/shiro/"/>
      <url>/2020/08/02/shiro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、Shiro简介"><a href="#1、Shiro简介" class="headerlink" title="1、Shiro简介"></a>1、Shiro简介</h2><h3 id="1-1、什么是Shiro"><a href="#1-1、什么是Shiro" class="headerlink" title="1.1、什么是Shiro"></a>1.1、什么是Shiro</h3><ul><li><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p></li><li><p>使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p></li><li><p>下载地址：<a href="https://shiro.apache.org/">https://shiro.apache.org/</a></p></li><li><p>文档地址：<a href="https://shiro.apache.org/tutorial.html">https://shiro.apache.org/tutorial.html</a></p><p><img src="/2020/08/02/shiro/image-20200724185658710.png" alt="image-20200724185658710" loading="lazy"></p></li></ul><h3 id="1-2、功能"><a href="#1-2、功能" class="headerlink" title="1.2、功能"></a>1.2、功能</h3><p><img src="/2020/08/02/shiro/image-20200724185922358.png" alt="image-20200724185922358" loading="lazy"></p><h3 id="1-3、Shiro架构"><a href="#1-3、Shiro架构" class="headerlink" title="1.3、Shiro架构"></a>1.3、Shiro架构</h3><p><img src="/2020/08/02/shiro/image-20200725180525995.png" alt="image-20200725180525995" loading="lazy"></p><p><img src="/2020/08/02/shiro/9825bc315c6034a8f93c7d0cce13495408237665.jpg" alt="img" loading="lazy"></p><h2 id="2、shiro程序"><a href="#2、shiro程序" class="headerlink" title="2、shiro程序"></a>2、shiro程序</h2><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><p>快速入门源代码地址：<a href="https://github.com/apache/shiro/tree/master/samples/quickstart">https://github.com/apache/shiro/tree/master/samples/quickstart</a></p><ol><li><p>新建一个普通的Maven项目，<code>springboot-06-shiro</code></p></li><li><p>删除src目录，创建一个模块<code>hello-shiro</code></p></li><li><p>导入maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SLF4J --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置<code>log4j.properties</code>文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m %n</span><span class="token comment" spellcheck="true"># General Apache libraries</span><span class="token attr-name">log4j.logger.org.apache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Spring</span><span class="token attr-name">log4j.logger.org.springframework</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Default Shiro logging</span><span class="token attr-name">log4j.logger.org.apache.shiro</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token comment" spellcheck="true"># Disable verbose logging</span><span class="token attr-name">log4j.logger.org.apache.shiro.util.ThreadContext</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token attr-name">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span></code></pre></li><li><p>创建<code>shiro.ini</code>文件</p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[users]</span><span class="token constant">root</span> <span class="token attr-value"><span class="token punctuation">=</span> secret, admin</span><span class="token constant">guest</span> <span class="token attr-value"><span class="token punctuation">=</span> guest, guest</span><span class="token constant">presidentskroob</span> <span class="token attr-value"><span class="token punctuation">=</span> 12345, president</span><span class="token constant">darkhelmet</span> <span class="token attr-value"><span class="token punctuation">=</span> ludicrousspeed, darklord, schwartz</span><span class="token constant">lonestarr</span> <span class="token attr-value"><span class="token punctuation">=</span> vespa, goodguy, schwartz</span># -----------------------------------------------------------------------------# Roles with assigned permissions# roleName <span class="token attr-value"><span class="token punctuation">=</span> perm1, perm2, ..., permN</span># -----------------------------------------------------------------------------<span class="token selector">[roles]</span><span class="token constant">admin</span> <span class="token attr-value"><span class="token punctuation">=</span> *</span><span class="token constant">schwartz</span> <span class="token attr-value"><span class="token punctuation">=</span> lightsaber:*</span><span class="token constant">goodguy</span> <span class="token attr-value"><span class="token punctuation">=</span> winnebago:drive:eagle5</span></code></pre></li><li><p>安装ini插件</p><p><img src="/2020/08/02/shiro/image-20200725165609447.png" alt="image-20200725165609447" loading="lazy"></p><p><img src="/2020/08/02/shiro/image-20200725165617050.png" alt="image-20200725165617050" loading="lazy"></p><p>完成之后重启即可</p><p>如果还是不亮，就需要进行如下设置</p><p><img src="/2020/08/02/shiro/image-20200725172856203.png" alt="image-20200725172856203" loading="lazy"></p></li><li><p>创建<code>Quickstart.java</code>文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>ini<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span></code></pre></li></ol><p>   /**<br>    * Simple Quickstart application showing how to use Shiro’s API.<br>    *<br>    * @since 0.9 RC2<br>    */<br>   public class Quickstart {</p><pre><code>   private static final transient Logger log = LoggerFactory.getLogger(Quickstart.class);   public static void main(String[] args) {        // The easiest way to create a Shiro SecurityManager with configured       // realms, users, roles and permissions is to use the simple INI config.       // We&#39;ll do that by using a factory that can ingest a .ini file and       // return a SecurityManager instance:       // Use the shiro.ini file at the root of the classpath       // (file: and url: prefixes load from files and urls respectively):       Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);       SecurityManager securityManager = factory.getInstance();       // for this simple example quickstart, make the SecurityManager       // accessible as a JVM singleton.  Most applications wouldn&#39;t do this       // and instead rely on their container configuration or web.xml for       // webapps.  That is outside the scope of this simple quickstart, so       // we&#39;ll just do the bare minimum so you can continue to get a feel       // for things.       SecurityUtils.setSecurityManager(securityManager);       // Now that a simple Shiro environment is set up, let&#39;s see what you can do:       // get the currently executing user:       Subject currentUser = SecurityUtils.getSubject();       // Do some stuff with a Session (no need for a web or EJB container!!!)       Session session = currentUser.getSession();       session.setAttribute(&quot;someKey&quot;, &quot;aValue&quot;);       String value = (String) session.getAttribute(&quot;someKey&quot;);       if (value.equals(&quot;aValue&quot;)) {            log.info(&quot;Retrieved the correct value! [&quot; + value + &quot;]&quot;);       }        // let&#39;s login the current user so we can check against roles and permissions:       if (!currentUser.isAuthenticated()) {            UsernamePasswordToken token = new UsernamePasswordToken(&quot;lonestarr&quot;, &quot;vespa&quot;);           token.setRememberMe(true);           try {                currentUser.login(token);           }  catch (UnknownAccountException uae) {                log.info(&quot;There is no user with username of &quot; + token.getPrincipal());           }  catch (IncorrectCredentialsException ice) {                log.info(&quot;Password for account &quot; + token.getPrincipal() + &quot; was incorrect!&quot;);           }  catch (LockedAccountException lae) {                log.info(&quot;The account for username &quot; + token.getPrincipal() + &quot; is locked.  &quot; +                       &quot;Please contact your administrator to unlock it.&quot;);           }            // ... catch more exceptions here (maybe custom ones specific to your application?           catch (AuthenticationException ae) {                //unexpected condition?  error?           }        }        //say who they are:       //print their identifying principal (in this case, a username):       log.info(&quot;User [&quot; + currentUser.getPrincipal() + &quot;] logged in successfully.&quot;);       //test a role:       if (currentUser.hasRole(&quot;schwartz&quot;)) {            log.info(&quot;May the Schwartz be with you!&quot;);       }  else {            log.info(&quot;Hello, mere mortal.&quot;);       }        //test a typed permission (not instance-level)       if (currentUser.isPermitted(&quot;lightsaber:wield&quot;)) {            log.info(&quot;You may use a lightsaber ring.  Use it wisely.&quot;);       }  else {            log.info(&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;);       }        //a (very powerful) Instance Level permission:       if (currentUser.isPermitted(&quot;winnebago:drive:eagle5&quot;)) {            log.info(&quot;You are permitted to &#39;drive&#39; the winnebago with license plate (id) &#39;eagle5&#39;.  &quot; +                   &quot;Here are the keys - have fun!&quot;);       }  else {            log.info(&quot;Sorry, you aren&#39;t allowed to drive the &#39;eagle5&#39; winnebago!&quot;);       }        //all done - log out!       currentUser.logout();       System.exit(0);   } </code></pre><p>   }</p><pre><code>8. 启动项目，只打印出日志信息。如果报错了，检查一下maven依赖中是否存在`&lt;scope&gt;test&lt;/scope&gt;`，删掉即可。![image-20200725173253571](image-20200725173253571.png)### 2.2、代码分析1. 源代码```javaimport org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.config.IniSecurityManagerFactory;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.Factory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Quickstart {     private static final transient Logger log = LoggerFactory.getLogger(Quickstart.class);    public static void main(String[] args) {         // 这三步固定的        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);        SecurityManager securityManager = factory.getInstance();        SecurityUtils.setSecurityManager(securityManager);        // get the currently executing user:        // 获取当前用户对象 Subject        Subject currentUser = SecurityUtils.getSubject();        // Do some stuff with a Session (no need for a web or EJB container!!!)        // 通过当前用户获取session，然后存值，取值        Session session = currentUser.getSession();        session.setAttribute(&quot;someKey&quot;, &quot;aValue&quot;);        String value = (String) session.getAttribute(&quot;someKey&quot;);        if (value.equals(&quot;aValue&quot;)) {             log.info(&quot;Subject==&gt;session中的取值[&quot; + value + &quot;]&quot;);        }         // let&#39;s login the current user so we can check against roles and permissions:        // 判断当前用户是否被认证        if (!currentUser.isAuthenticated()) {             // 生成Token令牌            UsernamePasswordToken token = new UsernamePasswordToken(&quot;lonestarr&quot;, &quot;vespa&quot;);            // 设置记住我            token.setRememberMe(true);            try {                 // 执行登录操作                currentUser.login(token);            }  catch (UnknownAccountException uae) {                 // 用户不存在                log.info(&quot;There is no user with username of &quot; + token.getPrincipal());            }  catch (IncorrectCredentialsException ice) {                 // 密码错误                log.info(&quot;Password for account &quot; + token.getPrincipal() + &quot; was incorrect!&quot;);            }  catch (LockedAccountException lae) {                 // 用户被锁定                log.info(&quot;The account for username &quot; + token.getPrincipal() + &quot; is locked.  &quot; +                        &quot;Please contact your administrator to unlock it.&quot;);            }             // ... catch more exceptions here (maybe custom ones specific to your application?            catch (AuthenticationException ae) {                 // 认证异常                //unexpected condition?  error?            }         }         /* 以下为权限判断 */        //say who they are:        //print their identifying principal (in this case, a username):        // 打印用户信息        log.info(&quot;User [&quot; + currentUser.getPrincipal() + &quot;] logged in successfully.&quot;);        //test a role:        // 判断角色        if (currentUser.hasRole(&quot;schwartz&quot;)) {             log.info(&quot;May the Schwartz be with you!&quot;);        }  else {             log.info(&quot;Hello, mere mortal.&quot;);        }         // 粗粒度，简单的认证        //test a typed permission (not instance-level)        if (currentUser.isPermitted(&quot;lightsaber:wield&quot;)) {             log.info(&quot;You may use a lightsaber ring.  Use it wisely.&quot;);        }  else {             log.info(&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;);        }         // 细粒度        //a (very powerful) Instance Level permission:        if (currentUser.isPermitted(&quot;winnebago:drive:eagle5&quot;)) {             log.info(&quot;You are permitted to &#39;drive&#39; the winnebago with license plate (id) &#39;eagle5&#39;.  &quot; +                    &quot;Here are the keys - have fun!&quot;);        }  else {             log.info(&quot;Sorry, you aren&#39;t allowed to drive the &#39;eagle5&#39; winnebago!&quot;);        }         //all done - log out!        // 注销        currentUser.logout();        System.exit(0);    } } </code></pre><ol start="2"><li><p>主要方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前用户对象 Subject</span>Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断当前用户是否被认证</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断角色</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 粗粒度，简单的认证</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注销</span>currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="3、在SpringBoot中集成"><a href="#3、在SpringBoot中集成" class="headerlink" title="3、在SpringBoot中集成"></a>3、在SpringBoot中集成</h2><h3 id="3-1、环境搭建"><a href="#3-1、环境搭建" class="headerlink" title="3.1、环境搭建"></a>3.1、环境搭建</h3><ol><li><p>在当前项目中新建一个<code>module</code>，创建<code>shiro-springboot</code>，必须选择Springboot的模板</p><p><img src="/2020/08/02/shiro/image-20200725175251192.png" alt="image-20200725175251192" loading="lazy"></p></li><li><p>导入web模板和Thymeleaf</p></li><li><p>在<code>template</code>目录下创建一个index首页</p></li><li><p>创建controller，<code>MyController</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动浏览器，可以正常访问就环境搭建完成了</p><p><img src="/2020/08/02/shiro/image-20200725200314124.png" alt="image-20200725200314124" loading="lazy"></p></li></ol><h3 id="3-2、整合shiro"><a href="#3-2、整合shiro" class="headerlink" title="3.2、整合shiro"></a>3.2、整合shiro</h3><h4 id="1、测试环境"><a href="#1、测试环境" class="headerlink" title="1、测试环境"></a>1、测试环境</h4><ol><li><p>导入shiro整合包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- shiro-spring --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>自定义一个<code>UserRealm</code>，需要继承<code>AuthorizingRealm</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了授权====》doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了认证====》doGetAuthenticationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写配置类<code>ShiroConfig</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ShiroFilterFactoryBean3</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"getDefaultWebSecurityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>         ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置安全管理器</span>        bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// DefaultWebSecurityManage2</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">getDefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userRealm"</span><span class="token punctuation">)</span> UserRealm userRealm<span class="token punctuation">)</span><span class="token punctuation">{</span>         DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关联userRealm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>userRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 创建realm对象，需要自定义1</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserRealm <span class="token function">userRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在<code>template</code>目录下创建<code>user</code>文件夹</p></li><li><p>创建<code>add.html</code>，<code>update.html</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>执行了add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改controller进行跳转</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"user/add"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"user/update"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在首页增加跳转</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /user/add} <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /user/update} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="2、进行拦截"><a href="#2、进行拦截" class="headerlink" title="2、进行拦截"></a>2、进行拦截</h4><ol><li><p>修改<code>ShiroConfig</code>的代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ShiroFilterFactoryBean3</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"getDefaultWebSecurityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>     ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置安全管理器</span>    bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加shiro的内置过滤器</span>    <span class="token comment" spellcheck="true">/*            anon：无需认证就可以访问            authc：必须认证了才能访问            user：必须拥有 记住我 功能才能用            perms：拥有对某个资源的权限才能访问            role：拥有某个角色权限才能访问        */</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">,</span> <span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置登录的请求</span>    bean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>由于没有默认的登录页面，需要自己进行创建</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /login} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改控制类跳转到登录页</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">tuLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试：现在点击任意一个都会跳转到登录页面</p><p><img src="/2020/08/02/shiro/image-20200725203025834.png" alt="image-20200725203025834" loading="lazy"></p></li></ol><h4 id="3、认证"><a href="#3、认证" class="headerlink" title="3、认证"></a>3、认证</h4><p>在<code>UserRealm</code>中设置</p><ol><li><p>修改控制类，接收登录的信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">tuLogin</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取当前用户</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装用户的登陆数据</span>    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行提交测试</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行登录操作</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> uae<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 用户不存在</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"用户名不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> ice<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 密码错误</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>前端获取错误信息</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ msg} <span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/shiro/image-20200725204111937.png" alt="image-20200725204111937" loading="lazy"></p></li><li><p>测试，发现会经过<code>UserRealm</code>代码的认证功能</p><p><img src="/2020/08/02/shiro/image-20200725204558526.png" alt="image-20200725204558526" loading="lazy"></p></li><li><p>修改<code>UserRealm</code>代码，进行认证，密码不需要我们进行判断</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了认证====》doGetAuthenticationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户名，密码的设置</span>    String name <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    UsernamePasswordToken userToken <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span>token<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户名认证</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>userToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 抛出UnknownAccountException未知用户异常</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 密码认证交给Shiro进行操作</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试，输入<code>UserRealm</code>定义的用户名和密码就可以跳到首页</p></li></ol><h3 id="3-3、shiro整合Mybatis"><a href="#3-3、shiro整合Mybatis" class="headerlink" title="3.3、shiro整合Mybatis"></a>3.3、shiro整合Mybatis</h3><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Druid数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--log4j--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>application.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource <span class="token comment" spellcheck="true"># 自定义数据源</span>    <span class="token comment" spellcheck="true">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span>    <span class="token comment" spellcheck="true">#druid 数据源专有配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span>    <span class="token comment" spellcheck="true">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span>    <span class="token comment" spellcheck="true">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre></li><li><p>在IDEA中连接数据库</p><p><img src="/2020/08/02/shiro/image-20200725211424225.png" alt="image-20200725211424225" loading="lazy"></p><p><img src="/2020/08/02/shiro/image-20200725211507612.png" alt="image-20200725211507612" loading="lazy"></p><p><img src="/2020/08/02/shiro/image-20200725211544973.png" alt="image-20200725211544973" loading="lazy"></p></li><li><p>在<code>application.properties</code>配置文件中配置Mybatis</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.xj.pojo</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span></code></pre></li><li><p>编写实体类<code>User</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写<code>UserMapper</code>接口，需要导入两个注解@Repository，@Mapper</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>     User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在<code>resources</code>目录下创建<code>mapper</code>，然后创建<code>UserMapper.xml</code>，然后编写映射文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.xj.mapper.UserMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"queryUserByName"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>        SELECT <span class="token operator">*</span> from user where name <span class="token operator">=</span> #<span class="token punctuation">{</span> name<span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre></li><li><p>编写业务层<code>Userservice</code>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>业务接口实现类<code>UserserviceImpl</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserserviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span> I    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>需要加上注解@Service才会被Spring接管<img src="/2020/08/02/shiro/image-20200725213203936.png" alt="image-20200725213203936" loading="lazy"></p></li><li><p>编写测试类测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ShiroSpringbootApplicationTests</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/shiro/image-20200725213714132.png" alt="image-20200725213714132" loading="lazy"></p></li><li><p>修改配置类<code>UserRealm</code>，将用户名认证从数据库获取</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了授权====》doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了认证====》doGetAuthenticationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取登录令牌</span>        UsernamePasswordToken userToken <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span>token<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从数据库中获取用户信息</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>userToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户名认证</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 抛出UnknownAccountException未知用户异常</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 密码认证交给Shiro进行操作</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>登录测试：这个时候要启动的是整个SpringBoot服务</p><p><img src="/2020/08/02/shiro/image-20200725214218619.png" alt="image-20200725214218619" loading="lazy"></p><p>可以使用数据库中的用户信息登录即可</p></li></ol><p><strong>注意点：</strong></p><ol><li>在<code>UserMapper</code>接口需要加上：两个注解@Repository，@Mapper</li><li>业务接口实现类<code>UserserviceImpl</code>需要加上：@Service注解</li><li>配置完<code>mapper.xml</code>文件之后需要在总的配置文件中进行声明</li></ol><h3 id="3-4、shiro请求授权的实现"><a href="#3-4、shiro请求授权的实现" class="headerlink" title="3.4、shiro请求授权的实现"></a>3.4、shiro请求授权的实现</h3><blockquote><p>授权是在config中进行的操作</p></blockquote><h4 id="1、授权拦截"><a href="#1、授权拦截" class="headerlink" title="1、授权拦截"></a>1、授权拦截</h4><ol><li><p>编写<code>ShiroConfig</code>的代码</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 授权拦截</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token string">"perms[user:add]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span> <span class="token string">"perms[user:update]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">,</span> <span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/shiro/image-20200726143733094.png" alt="image-20200726143733094" loading="lazy"></p></li><li><p>此时进入add页面会显示401未授权错误</p><p><img src="/2020/08/02/shiro/image-20200726143823324.png" alt="image-20200726143823324" loading="lazy"></p></li><li><p>设置未授权页面</p><p>编写控制类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/unaut"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">unaunt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"未经授权无法访问此页面"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>编写配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 为授权的请求页面</span>bean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/unaut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/shiro/image-20200726144243475.png" alt="image-20200726144243475" loading="lazy"></p></li></ol><h4 id="2、给用户进行授权"><a href="#2、给用户进行授权" class="headerlink" title="2、给用户进行授权"></a>2、给用户进行授权</h4><blockquote><p>进入需要授权的页面就会经过这里</p></blockquote><p><img src="/2020/08/02/shiro/image-20200726144325168.png" alt="image-20200726144325168" loading="lazy"></p><ol><li><p>在<code>UserRealm</code>中进行编写</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了授权====》doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给所有用户授权</span>    SimpleAuthorizationInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>修改数据库，增加用户对应的权限，修改后上传即可</p><p><img src="/2020/08/02/shiro/image-20200726144715955.png" alt="image-20200726144715955" loading="lazy"></p><p><img src="/2020/08/02/shiro/image-20200726144929639.png" alt="image-20200726144929639" loading="lazy"></p></li><li><p>修改实体类，增加权限属性即可</p></li><li><p>获取用户的权限</p><p>修改认证的代码，将用户信息提交到当前用户</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 密码认证交给Shiro进行操作</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在授权那里进行获取</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了授权====》doGetAuthorizationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取用户信息</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到用户对象</span>    User currentUser <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置当前用户的权限</span>    SimpleAuthorizationInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记得返回新的信息</span>    <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/shiro/image-20200726141255589.png" alt="image-20200726141255589" loading="lazy"></p></li></ol><h3 id="3-5、Shiro整合Thymeleaf"><a href="#3-5、Shiro整合Thymeleaf" class="headerlink" title="3.5、Shiro整合Thymeleaf"></a>3.5、Shiro整合Thymeleaf</h3><ol><li><p>导入整合包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- thymeleaf-extras-shiro --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写<code>ShiroConfig</code>代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ShiroDialect：用来整合shiro和thymeleaf</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>修改首页代码，增加命名空间</p><pre class=" language-html"><code class="language-html">xmlns:shiro="http://www.thymeleaf.org/thymeleaf-extras-shiro"</code></pre></li><li><p>执行判断</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /user/add} <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /user/update} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/shiro/image-20200726150449148.png" alt="image-20200726150449148" loading="lazy"></p></li><li><p>登录成功之后在<code>UserRealm</code>获取Session</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 存储认证信息</span>Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Session session <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/shiro/image-20200726142950179.png" alt="image-20200726142950179" loading="lazy"></p></li><li><p>前端判断登录按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ session.loginUser <span class="token punctuation">=</span><span class="token punctuation">=</span> null} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /toLogin} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>增加注销按钮</p><p>修改控制类，增加注销路由</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注销</span>    subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>修改主页，增加注销按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ session.loginUser !<span class="token punctuation">=</span> null} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{ /logout} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><p>现在就可以给不同权限的用户展示不同的内容了~</p><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI和easyExcel</title>
      <link href="/2020/08/02/POI%E5%92%8CeasyExcel/"/>
      <url>/2020/08/02/POI%E5%92%8CeasyExcel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、POI-和-easyExcel-讲解"><a href="#1、POI-和-easyExcel-讲解" class="headerlink" title="1、POI 和 easyExcel 讲解"></a>1、POI 和 easyExcel 讲解</h2><blockquote><p>常用进程</p></blockquote><p>1、将用户信息导出为excel表格（导出数据….）</p><p>2、将Excel表中的信息录入到网站数据库（习题上传….）</p><p>开发中经常会设计到excel的处理，如导出Excel，导入Excel到数据库中！</p><p>操作Excel目前比较流行的就是 <strong>Apache POI</strong> 和 阿里巴巴的 <strong>easyExcel</strong> ！</p><blockquote><p>Apache POI</p></blockquote><p>Apache POI 官网：<a href="https://poi.apache.org/">https://poi.apache.org/</a></p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200421153707641.png" alt="image-20200421153707641" loading="lazy">  </p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200421153734332.png" alt="image-20200421153734332" loading="lazy">  </p><blockquote><p>easyExcel</p></blockquote><p>easyExcel 官网地址：<a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200421154301766.png" alt="image-20200421154301766" loading="lazy">  </p><p>EasyExcel 是阿里巴巴开源的一个excel处理框架，<strong>以使用简单、节省内存著称</strong>。</p><p>EasyExcel 能大大减少占用内存的主要原因是在解析 Excel 时没有将文件数据一次性全部加载到内存中，而是从磁盘上一行行读取数据，逐个解析。</p><p>下图是 EasyExcel 和 POI 在解析Excel时的对比图。</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/e3a3500014c95f7118d8c200a51acab4.png" alt="img" loading="lazy"> </p><p>官方文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel">https://www.yuque.com/easyexcel/doc/easyexcel</a></p><h2 id="2、POI-Excel写"><a href="#2、POI-Excel写" class="headerlink" title="2、POI-Excel写"></a>2、POI-Excel写</h2><blockquote><p>创建新项目</p></blockquote><p>1、建立一个空项目 POI-easyExcel，创建普通Maven的Moudle  poi-easyExcel</p><p>2、引入pom依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--xls(03)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--xlsx(07)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日期格式化工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--test--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><blockquote><p>日期格式化工具的使用<code>String date = new DateTime().toString(&quot;yyyy-MM-dd HH:mm:ss&quot;);</code></p><p>03 | 07 版本的写，就是对象不同，方法一样的！</p></blockquote><p>==需要注意：2003 版本和 2007 版本存在兼容性的问题！03最多只有 65535 行！==</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200421231630486.png" alt="image-20200421231630486" loading="lazy"> </p><p>1、工作簿：  2、工作表：  3、行： 4、列：</p><h3 id="2-1、03版本："><a href="#2-1、03版本：" class="headerlink" title="2.1、03版本："></a>2.1、03版本：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 存放路径</span>String Path <span class="token operator">=</span> <span class="token string">"D:\\IDEA2019\\IdeaProjects\\POI-easyExcel\\"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1、创建一个工作簿(面向接口编程，比较方便维护)</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、创建一个工作表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、创建一个行</span>    Row row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4、创建一个单元格(1,1)</span>    Cell cell11 <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell11<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1,2)</span>    Cell cell12 <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell12<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二行</span>    Row row2 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cell cell21 <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell21<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (2,2)</span>    Cell cell22 <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell22<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成一张表（IO流）  03边的就是使用xls结尾</span>    FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"用户.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭流</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>数据批量导入！</p><blockquote><p>大文件写HSSF</p></blockquote><p>缺点：最多只能处理65536行，否则会抛出异常</p><pre class=" language-bash"><code class="language-bash">java.lang.IllegalArgumentException: Invalid row number <span class="token punctuation">(</span>65536<span class="token punctuation">)</span> outside allowable range <span class="token punctuation">(</span>0<span class="token punctuation">..</span>65535<span class="token punctuation">)</span></code></pre><p>优点：过程中写入缓存，不操作磁盘，最后一次性写入磁盘，速度快</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite03BigData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 时间</span>    <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个薄</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;</span> <span class="token number">65537</span><span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"testWrite03BigData.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="2-2、07版本："><a href="#2-2、07版本：" class="headerlink" title="2.2、07版本："></a>2.2、07版本：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 存放路径</span>String Path <span class="token operator">=</span> <span class="token string">"D:\\IDEA2019\\IdeaProjects\\POI-easyExcel\\"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1、创建一个工作簿(面向接口编程，比较方便维护)</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、创建一个工作表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、创建一个行</span>    Row row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4、创建一个单元格(1,1)</span>    Cell cell11 <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell11<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1,2)</span>    Cell cell12 <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell12<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二行</span>    Row row2 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cell cell21 <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell21<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (2,2)</span>    Cell cell22 <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell22<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成一张表（IO流）  03边的就是使用xls结尾</span>    FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"用户.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭流</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>注意对象的一个区别，文件后缀！</p><blockquote><p>大文件写XSSF</p></blockquote><p>缺点：写数据时速度非常慢，非常耗内存，也会发生内存溢出，如100万条</p><p>优点：可以写较大的数据量，如20万条</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite07BigData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 时间</span>    <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个薄</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"testWrite07BigData.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><blockquote><p>大文件写SXSSF</p></blockquote><p>优点：可以写非常大的数据量，如100万条甚至更多条，写数据速度快，占用更少的内存</p><p><strong>注意：</strong></p><p>过程中会产生临时文件，需要清理临时文件</p><p>默认由100条记录被保存在内存中，如果超过这数量，则最前面的数据被写入临时文件</p><p>如果想自定义内存中数据的数量，可以使用new SXSSFWorkbook ( 数量 )</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite07BigDataS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 时间</span>    <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个薄</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SXSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"testWrite07BigDataS.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清除临时文件！</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>SXSSFWorkbook<span class="token punctuation">)</span> workbook<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>SXSSFWorkbook-来至官方的解释：实现“BigGridDemo”策略的流式XSSFWorkbook版本。这允许写入非常大的文件而不会耗尽内存，因为任何时候只有可配置的行部分被保存在内存中。</p><p>请注意，仍然可能会消耗大量内存，这些内存基于您正在使用的功能，例如合并区域，注释……仍然只存储在内存中，因此如果广泛使用，可能需要大量内存。</p><p>再使用  POI的时候！内存问题 Jprofile！</p><h2 id="3、POI-Excel读"><a href="#3、POI-Excel读" class="headerlink" title="3、POI-Excel读"></a>3、POI-Excel读</h2><h3 id="3-1、03版本"><a href="#3-1、03版本" class="headerlink" title="3.1、03版本"></a>3.1、03版本</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取文件流</span>    FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"用户.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1、创建一个工作簿。 使用excel能操作的这边他都可以操作！</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、得到表</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、得到行</span>    Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4、得到列</span>    Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取值的时候，一定需要注意类型！</span>    <span class="token comment" spellcheck="true">// getStringCellValue 字符串类型</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="3-2、07版本"><a href="#3-2、07版本" class="headerlink" title="3.2、07版本"></a>3.2、07版本</h3><pre class=" language-Java"><code class="language-Java">@Testpublic void testRead07() throws Exception {     // 获取文件流    FileInputStream inputStream = new FileInputStream(Path + "用户.xlsx");    // 1、创建一个工作簿。 使用excel能操作的这边他都可以操作！    Workbook workbook = new XSSFWorkbook(inputStream);    // 2、得到表    Sheet sheet = workbook.getSheetAt(0);    // 3、得到行    Row row = sheet.getRow(0);    // 4、得到列    Cell cell = row.getCell(1);    // 读取值的时候，一定需要注意类型！    // getStringCellValue 字符串类型    System.out.println(cell.getStringCellValue());    inputStream.close();} </code></pre><p>==注意获取值的类型即可==</p><h3 id="3-3、读取不同的数据类型"><a href="#3-3、读取不同的数据类型" class="headerlink" title="3.3、读取不同的数据类型"></a>3.3、读取不同的数据类型</h3><p>（最麻烦的就是这里了！）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取文件流</span>    FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"明细表.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个工作簿。 使用excel能操作的这边他都可以操作！</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取标题内容</span>    Row rowTitle <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowTitle <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 一定要掌握</span>        <span class="token comment" spellcheck="true">// getPhysicalNumberOfCells 获取总列数</span>        <span class="token keyword">int</span> cellCount <span class="token operator">=</span> rowTitle<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> cellCount<span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             Cell cell <span class="token operator">=</span> rowTitle<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cell <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 String cellValue <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cellValue <span class="token operator">+</span> <span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 获取表中的内容</span>    <span class="token comment" spellcheck="true">// getPhysicalNumberOfRows获取总行数</span>    <span class="token keyword">int</span> rowCount <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;</span> rowCount <span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Row rowData <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rowData <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 读取列</span>            <span class="token keyword">int</span> cellCount <span class="token operator">=</span> rowTitle<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> cellCount <span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span><span class="token punctuation">(</span>rowNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cellNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Cell cell <span class="token operator">=</span> rowData<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 匹配列的数据类型</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cell<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">int</span> cellType <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String cellValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cellType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token keyword">case</span> HSSFCell<span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token operator">:</span> <span class="token comment" spellcheck="true">// 字符串</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【String】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            cellValue <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> HSSFCell<span class="token punctuation">.</span>CELL_TYPE_BOOLEAN<span class="token operator">:</span> <span class="token comment" spellcheck="true">// 布尔</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【BOOLEAN】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            cellValue <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> HSSFCell<span class="token punctuation">.</span>CELL_TYPE_BLANK<span class="token operator">:</span> <span class="token comment" spellcheck="true">// 空</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【BLANK】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> HSSFCell<span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token operator">:</span> <span class="token comment" spellcheck="true">// 数字（日期、普通数字）</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【NUMERIC】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>HSSFDateUtil<span class="token punctuation">.</span><span class="token function">isCellDateFormatted</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 日期</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【日期】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                Date date <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getDateCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                cellValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                 <span class="token comment" spellcheck="true">// 不是日期格式，防止数字过长！</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【转换为字符串输出】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                cell<span class="token punctuation">.</span><span class="token function">setCellType</span><span class="token punctuation">(</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>                                cellValue <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                             <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> HSSFCell<span class="token punctuation">.</span>CELL_TYPE_ERROR<span class="token operator">:</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"【数据类型错误】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>注意，类型转换问题；</p><h3 id="3-4、计算公式"><a href="#3-4、计算公式" class="headerlink" title="3.4、计算公式"></a>3.4、计算公式</h3><p>（了解即可！）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Path <span class="token operator">+</span> <span class="token string">"公式.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到计算公司 eval</span>    FormulaEvaluator FormulaEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFFormulaEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HSSFWorkbook<span class="token punctuation">)</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出单元格的内容</span>    <span class="token keyword">int</span> cellType <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cellType<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">case</span> Cell<span class="token punctuation">.</span>CELL_TYPE_FORMULA<span class="token operator">:</span> <span class="token comment" spellcheck="true">// 公式</span>            String formula <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算</span>            CellValue evaluate <span class="token operator">=</span> FormulaEvaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>            String cellValue <span class="token operator">=</span> evaluate<span class="token punctuation">.</span><span class="token function">formatAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h2 id="4、EasyExcel操作"><a href="#4、EasyExcel操作" class="headerlink" title="4、EasyExcel操作"></a>4、EasyExcel操作</h2><blockquote><p>导入依赖</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0-beta2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--test--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><blockquote><p>写入测试</p></blockquote><p><a href="https://www.yuque.com/easyexcel/doc/read">https://www.yuque.com/easyexcel/doc/read</a>    </p><blockquote><p>读取测试</p></blockquote><p><a href="https://www.yuque.com/easyexcel/doc/read">https://www.yuque.com/easyexcel/doc/read</a></p><p>固定套路：</p><p>1、写入，固定类格式进行写入</p><p>2、读取，根据监听器设置的规则进行读取！</p><h2 id="5、学习方式"><a href="#5、学习方式" class="headerlink" title="5、学习方式"></a>5、学习方式</h2><ol><li><p>写数据一般步骤：创建工作簿、创建工作表、创建一行、创建一列、通过文件输出流保存</p></li><li><p>读数据一般步骤：通过文件输入流读取工作簿、得到工作表、得到行、得到列、取出数值（注意类型）</p></li><li><p>了解，面向对象的思想，学会面向接口编程！</p></li><li><p>理解使用测试API！</p></li><li><p>把<strong>EasyExcel</strong> 的所有api都测试一下！</p></li></ol><h2 id="6、总结："><a href="#6、总结：" class="headerlink" title="6、总结："></a>6、总结：</h2><ul><li>创建表格</li></ul><ol><li><p>创建03版的工作簿</p><pre class=" language-java"><code class="language-java">Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建07版的工作簿</p><pre class=" language-java"><code class="language-java">Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建07版的升级版</p><pre class=" language-java"><code class="language-java">Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SXSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>这个需要清除临时文件！</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span>SXSSFWorkbook<span class="token punctuation">)</span> workbook<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>创建工作表</p><pre class=" language-java"><code class="language-java">Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建行</p><pre class=" language-java"><code class="language-java">Row row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>创建列</p><pre class=" language-java"><code class="language-java">Cell cell11 <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>设置值</p><pre class=" language-java"><code class="language-java">cell11<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ul><li>读取表格</li></ul><ol><li><p>通过文件输入流获取工作簿 <code>Workbook workbook = new HSSFWorkbook(inputStream);</code></p></li><li><p>获取工作簿 <code>Sheet sheet = workbook.getSheetAt(0);</code></p></li><li><p>获取行 <code>Row rowTitle= sheet.getRow(0);</code></p></li><li><p>获取总列数 <code>int cellCount = rowTitle.getPhysicalNumberOfCells();</code></p></li><li><p>获取列 <code>Cell cell = rowTitle.getCell(0);</code></p></li><li><p>获取单元格类型 <code>int cellType = cell.getCellType();</code></p><ul><li><code>case HSSFCell.CELL_TYPE_STRING:</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> CELL_TYPE_NUMERIC <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回0为数字</span><span class="token keyword">int</span> CELL_TYPE_STRING <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回1为字符串</span><span class="token keyword">int</span> CELL_TYPE_FORMULA <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回2为公式</span><span class="token keyword">int</span> CELL_TYPE_BLANK <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回3为空</span><span class="token keyword">int</span> CELL_TYPE_BOOLEAN <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回4为布尔</span><span class="token keyword">int</span> CELL_TYPE_ERROR <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回5为错误</span></code></pre></li><li><p>读取公式</p><ol><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 拿到计算公式 eval</span>FormulaEvaluator FormulaEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFFormulaEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HSSFWorkbook<span class="token punctuation">)</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输出公式</span>String formula <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输出计算值</span>CellValue evaluate <span class="token operator">=</span> FormulaEvaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>String cellValue <span class="token operator">=</span> evaluate<span class="token punctuation">.</span><span class="token function">formatAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><ul><li>使用easyExcel</li></ul><ol><li>需要一个实体类DemoData</li><li>一个监听器DemoDataListener extends AnalysisEventListener<DemoData></DemoData></li><li>一个数据访问类DemoDAO</li><li>测试类EasyTest</li></ol><p>最简单的读</p><ul><li>创建excel对应的实体对象 参照{@link DemoData}</li><li>由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照{@link DemoDataListener}</li><li>直接读即可</li></ul><p><a href="https://www.yuque.com/easyexcel/doc">https://www.yuque.com/easyexcel/doc</a></p><h2 id="7、合并Excel工作簿"><a href="#7、合并Excel工作簿" class="headerlink" title="7、合并Excel工作簿"></a>7、合并Excel工作簿</h2><blockquote><p>以后收集成绩等信息就可以这样使用了</p></blockquote><ol><li><p>在当前目录的下创建一个空的Excel表格</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531144705016.png" alt="image-20200531144705016" loading="lazy"></p></li><li><p>开启开发工具</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143418272.png" alt="image-20200531143418272" loading="lazy"></p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143500387.png" alt="image-20200531143500387" loading="lazy"></p></li><li><p>打开编译界面</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143549893.png" alt="image-20200531143549893" loading="lazy"></p></li><li><p>写上如下程序（左侧那里记得选中需要合并到的表中）</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143625465.png" alt="image-20200531143625465" loading="lazy"></p><ul><li><strong>注意：下面的第7行代码<code>MN = Dir(MP &amp; &quot;\&quot; &amp; &quot;*.xlsx&quot;)</code> 用于设置读取的是所有xlxs（07版）的Excel文件</strong></li><li>**如果读取的文件为03版，请设置为<code>MN = Dir(MP &amp; &quot;\&quot; &amp; &quot;*.xls&quot;)</code> **</li><li>*<em>读取全部文件则设置为MN = Dir(MP &amp; “&quot; &amp; “</em>“)**</li></ul><pre class=" language-vb"><code class="language-vb">Sub 合并目录所有工作簿全部工作表()    Dim MP, MN, AW, Wbn, wn    Dim Wb As Workbook    Dim i, a, b, d, c, e    Application.ScreenUpdating = False    MP = ActiveWorkbook.Path    MN = Dir(MP & "\" & "*.xlsx")    AW = ActiveWorkbook.Name    Num = 0    e = 1    Do While MN <> ""        If MN <> AW Then            Set Wb = Workbooks.Open(MP & "\" & MN)                a = a + 1                With Workbooks(1).ActiveSheet                For i = 1 To Sheets.Count                If Sheets(i).Range("a1") <> "" Then                    Wb.Sheets(i).Range("a1").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(1, 1)                    d = Wb.Sheets(i).UsedRange.Columns.Count                    c = Wb.Sheets(i).UsedRange.Rows.Count - 1                    wn = Wb.Sheets(i).Name                    .Cells(1, d + 1) = "表名"                    .Cells(e + 1, d + 1).Resize(c, 1) = MN & wn                    e = e + c                    Wb.Sheets(i).Range("a2").Resize(c, d).Copy .Cells(.Range("a1048576").End(xlUp).Row + 1, 1)        End If    Next    Wbn = Wbn & Chr(13) & Wb.Name    Wb.Close FalseEnd WithEnd IfMN = DirLoopRange("a1").SelectApplication.ScreenUpdating = TrueMsgBox "共合并了" & a & "个工作薄下全部工作表。如下：" & Chr(13) & Wbn, vbInformation, "提示"End Sub</code></pre></li><li><p>然后点回原来的Excel中，选择宏</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143729862.png" alt="image-20200531143729862" loading="lazy"></p></li><li><p>单击执行，然后等待一会就可以了</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143758067.png" alt="image-20200531143758067" loading="lazy"></p></li><li><p>对代码的解释</p><pre class=" language-vb"><code class="language-vb">Sub 合并目录所有工作簿全部工作表()    ' 定义变量    Dim MP, MN, AW, Wbn, wn    Dim Wb As Workbook    Dim i, a, b, d, c, e    Application.ScreenUpdating = False    ' 获取路径MP    MP = ActiveWorkbook.Path    ' 获取所有xlsx文件MN    MN = Dir(MP & "\" & "*.xlsx")    ' 获取工作簿的名字AW    AW = ActiveWorkbook.Name    Num = 0    e = 1    ' 遍历所有文件，如果文件名不为空    Do While MN <> ""       ' 如果文件名不等于当前工作簿的名字        If MN <> AW Then            ' 打开该文件            Set Wb = Workbooks.Open(MP & "\" & MN)                a = a + 1                ' 访问一个工作簿                With Workbooks(1).ActiveSheet                ' 遍历所有的表                For i = 1 To Sheets.Count                ' 如果第一个单元格不为空（A1不为空）                If Sheets(i).Range("a1") <> "" Then                    ' Resize 从第一格到最后一格复制                    ' 下面这一行设置只读一次，a1表示第一行                    Wb.Sheets(i).Range("a1").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(1, 1)                    d = Wb.Sheets(i).UsedRange.Columns.Count                    c = Wb.Sheets(i).UsedRange.Rows.Count - 1                    ' wn就是表名 MN是文件名 Wb是路径加文件名                    wn = Wb.Sheets(i).Name                    .Cells(1, d + 1) = "表名"                    .Cells(e + 1, d + 1).Resize(c, 1) = MN & wn                    ' 上面这部分可省略                    ' e初始为1                    e = e + c                    Wb.Sheets(i).Range("a2").Resize(c, d).Copy .Cells(.Range("a1048576").End(xlUp).Row + 1, 1)        End If    Next    Wbn = Wbn & Chr(13) & Wb.Name    Wb.Close FalseEnd WithEnd IfMN = DirLoop' Wihle循环结束Range("a1").Select' 提示部分Application.ScreenUpdating = TrueMsgBox "共合并了" & a & "个工作薄下全部工作表。如下：" & Chr(13) & Wbn, vbInformation, "提示"End Sub</code></pre><p>平时就需要改这两处地方，上面部分表示只读取一次（比如每个表格都有的标题信息，就不用重复读取了）</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200726115411054.png" alt="image-20200726115411054" loading="lazy"></p><p>对于成绩表这样的多行标题的页面可以这样设置</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200726115613177.png" alt="image-20200726115613177" loading="lazy"></p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200726115626562.png" alt="image-20200726115626562" loading="lazy"></p></li></ol><h2 id="8、合并成绩表"><a href="#8、合并成绩表" class="headerlink" title="8、合并成绩表"></a>8、合并成绩表</h2><ul><li><p>通过修改<code>a1</code>和 <code>Cells(1, 1) </code>可以设置某一行只读取一遍</p><pre class=" language-vb"><code class="language-vb">Wb.Sheets(i).Range("a1").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(1, 1)</code></pre></li></ul><ul><li><p>通过修改<code>Sheets.Count</code>的值可以指定读取哪几张表</p><pre class=" language-vb"><code class="language-vb">For i = 1 To Sheets.Count</code></pre><pre class=" language-vb"><code class="language-vb">Sub 合并目录所有工作簿全部工作表() Dim MP, MN, AW, Wbn, wn Dim Wb As Workbook Dim i, a, b, d, c, e Application.ScreenUpdating = False MP = ActiveWorkbook.Path MN = Dir(MP & "\" & "*.xlsx") AW = ActiveWorkbook.Name Num = 0 e = 1 Do While MN <> ""     If MN <> AW Then         Set Wb = Workbooks.Open(MP & "\" & MN)             a = a + 1             With Workbooks(1).ActiveSheet             For i = 1 To Sheets.Count             If Sheets(i).Range("a1") <> "" Then                 Wb.Sheets(i).Range("a1").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(1, 1)                 Wb.Sheets(i).Range("a2").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(2, 1)                 Wb.Sheets(i).Range("a3").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(3, 1)                 Wb.Sheets(i).Range("a4").Resize(1, Sheets(i).UsedRange.Columns.Count).Copy .Cells(4, 1)                 d = Wb.Sheets(i).UsedRange.Columns.Count                 c = Wb.Sheets(i).UsedRange.Rows.Count - 1                 e = e + c                 Wb.Sheets(i).Range("a5").Resize(c, d).Copy .Cells(.Range("a1048576").End(xlUp).Row + 1, 1)     End If Next Wbn = Wbn & Chr(13) & Wb.Name Wb.Close FalseEnd WithEnd IfMN = DirLoopRange("a1").SelectApplication.ScreenUpdating = TrueMsgBox "共合并了" & a & "个工作薄下全部工作表。如下：" & Chr(13) & Wbn, vbInformation, "提示"End Sub</code></pre></li></ul><ol start="6"><li><p>然后直接返回Excel表格中，选择宏</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143729862.png" alt="image-20200531143729862" loading="lazy"></p></li><li><p>单击执行</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200531143758067.png" alt="image-20200531143758067" loading="lazy"></p></li></ol><h2 id="9、可能遇到的异常"><a href="#9、可能遇到的异常" class="headerlink" title="9、可能遇到的异常"></a>9、可能遇到的异常</h2><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200530225635909.png" alt="image-20200530225635909" loading="lazy"></p><p>解决方法：将jdk版本改为java8即可</p><p><img src="/2020/08/02/POI%E5%92%8CeasyExcel/image-20200530225805284.png" alt="image-20200530225805284" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 实用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb</title>
      <link href="/2020/08/02/javaweb/"/>
      <url>/2020/08/02/javaweb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p><img src="/2020/08/02/javaweb/image-20200802222153316.png" alt="image-20200802222153316" loading="lazy"></p><h3 id="1-2、静态web"><a href="#1-2、静态web" class="headerlink" title="1.2、静态web"></a>1.2、静态web</h3><ul><li>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li></ul><p><img src="/2020/08/02/javaweb/1567822802516.png" alt="1567822802516" loading="lazy"></p><ul><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-2、动态web"><a href="#1-2、动态web" class="headerlink" title="1.2、动态web"></a>1.2、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p><p><img src="/2020/08/02/javaweb/1567823191289.png" alt="1567823191289" loading="lazy"></p><p>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li></ul><p><img src="/2020/08/02/javaweb/1567823350584.png" alt="1567823350584" loading="lazy"></p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>php：</strong></p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><p>**JSP/Servlet : ** </p><p>B/S：浏览和服务器</p><p>C/S:  客户端和服务器</p><ul><li>sun公司主推的B/S架构</li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li><li>可以承载三高问题带来的影响；</li><li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li></ul><p>…..</p><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p><strong>Tomcat</strong></p><p><img src="/2020/08/02/javaweb/1567824446428.png" alt="1567824446428" loading="lazy"></p><p>面向百度编程；</p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、安装tomcat"><a href="#3-1、安装tomcat" class="headerlink" title="3.1、安装tomcat"></a>3.1、安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="/2020/08/02/javaweb/1567825600842.png" alt="1567825600842" loading="lazy"></p><p><img src="/2020/08/02/javaweb/1567825627138.png" alt="1567825627138" loading="lazy"></p><h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p><p><img src="/2020/08/02/javaweb/1567825763180.png" alt="1567825763180" loading="lazy"></p><p><strong>启动。关闭Tomcat</strong></p><p><img src="/2020/08/02/javaweb/1567825840657.png" alt="1567825840657" loading="lazy"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li><p>Java环境变量没有配置</p></li><li><p>闪退问题：需要配置兼容性</p></li><li><p>乱码问题：配置文件中设置</p><p>tomcat窗口出现中文乱码，把tomcat的编码修改和系统一致就解决乱码问题，方法如下：</p><ul><li>找到apache-tomcat-7.0.92/conf/logging.properties</li><li>添加语句：java.util.logging.ConsoleHandler.encoding = GBK</li></ul></li></ol><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="/2020/08/02/javaweb/1567825967256.png" alt="1567825967256" loading="lazy"></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>           <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.qinjiang.com<span class="token punctuation">"</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>      <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p><ol><li><p>输入一个域名；回车</p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>       www<span class="token punctuation">.</span>qinjiang<span class="token punctuation">.</span>com</code></pre></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p></li></ol><p><img src="/2020/08/02/javaweb/1567827057913.png" alt="1567827057913" loading="lazy"></p></li><li><p>可以配置一下环境变量（可选性）</p></li></ol><h3 id="3-4、在IDEA中配置Tomcat"><a href="#3-4、在IDEA中配置Tomcat" class="headerlink" title="3.4、在IDEA中配置Tomcat"></a>3.4、在IDEA中配置Tomcat</h3><p><img src="/2020/08/02/javaweb/image-20200608134548079.png" alt="image-20200608134548079" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608134635700.png" alt="image-20200608134635700" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608134715000.png" alt="image-20200608134715000" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608135250006.png" alt="image-20200608135250006" loading="lazy"></p><p>解决警告问题</p><p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p><p><img src="/2020/08/02/javaweb/image-20200608135544764.png" alt="image-20200608135544764" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608135615437.png" alt="image-20200608135615437" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608135808333.png" alt="image-20200608135808333" loading="lazy"></p><p>到这里就配置完成，进行运行测试</p><p><img src="/2020/08/02/javaweb/image-20200608140219378.png" alt="image-20200608140219378" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608140541709.png" alt="image-20200608140541709" loading="lazy"></p><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~ ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li><li>80端口</li></ul><p>Https：安全的</p><ul><li>443端口</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li><p>http1.0</p><ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul></li><li><p>http2.0</p><ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li></ul></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul><li>客户端—发请求（Request）—服务器</li></ul><p>百度：</p><pre class=" language-java"><code class="language-java">Request URL<span class="token operator">:</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>   请求地址Request Method<span class="token operator">:</span>GET    get方法<span class="token operator">/</span>post方法Status Code<span class="token operator">:</span><span class="token number">200</span> OK    状态码：<span class="token number">200</span>Remote（远程） Address<span class="token operator">:</span><span class="token number">14.215</span><span class="token punctuation">.</span><span class="token number">177.39</span><span class="token operator">:</span><span class="token number">443</span></code></pre><pre class=" language-java"><code class="language-java">Accept<span class="token operator">:</span>text<span class="token operator">/</span>html  Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span>gzip<span class="token punctuation">,</span> deflate<span class="token punctuation">,</span> brAccept<span class="token operator">-</span>Language<span class="token operator">:</span>zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>    语言Cache<span class="token operator">-</span>Control<span class="token operator">:</span>max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Connection<span class="token operator">:</span>keep<span class="token operator">-</span>alive</code></pre><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><pre class=" language-java"><code class="language-java">Accept：告诉浏览器，它所支持的数据类型Accept<span class="token operator">-</span>Encoding：支持哪种编码格式  GBK   UTF<span class="token operator">-</span><span class="token number">8</span>   GB2312  ISO8859<span class="token operator">-</span><span class="token number">1</span>Accept<span class="token operator">-</span>Language：告诉浏览器，它的语言环境Cache<span class="token operator">-</span>Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token punctuation">.</span></code></pre><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul><li>服务器—响应—–客户端</li></ul><p>百度：</p><pre class=" language-java"><code class="language-java">Cache<span class="token operator">-</span>Control<span class="token operator">:</span><span class="token keyword">private</span>    缓存控制Connection<span class="token operator">:</span>Keep<span class="token operator">-</span>Alive    连接Content<span class="token operator">-</span>Encoding<span class="token operator">:</span>gzip    编码Content<span class="token operator">-</span>Type<span class="token operator">:</span>text<span class="token operator">/</span>html   类型</code></pre><h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><pre class=" language-java"><code class="language-java">Accept：告诉浏览器，它所支持的数据类型Accept<span class="token operator">-</span>Encoding：支持哪种编码格式  GBK   UTF<span class="token operator">-</span><span class="token number">8</span>   GB2312  ISO8859<span class="token operator">-</span><span class="token number">1</span>Accept<span class="token operator">-</span>Language：告诉浏览器，它的语言环境Cache<span class="token operator">-</span>Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token punctuation">.</span>Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</code></pre><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功  200</p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源   404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误   500       502:网关错误</p><p><strong>常见面试题：</strong></p><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p><h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="/2020/08/02/javaweb/1567842350606.png" alt="1567842350606" loading="lazy"></p><p>下载完成后，解压即可；</p><h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p><p>配置如下配置：</p><ul><li>M2_HOME     maven目录下的bin目录</li><li>MAVEN_HOME      maven的目录</li><li>在系统的path中配置  %MAVEN_HOME%\bin</li></ul><p><img src="/2020/08/02/javaweb/1567842882993.png" alt="1567842882993" loading="lazy"></p><p>测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="/2020/08/02/javaweb/1567844609399.png" alt="1567844609399" loading="lazy"></p><ul><li>镜像：mirrors<ul><li>作用：加速我们的下载</li></ul></li><li>国内建议使用阿里云的镜像</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*,!jeecg,!jeecg-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p><p><strong>建立一个本地仓库：</strong>localRepository</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span></code></pre><h3 id="5-6-在IDEA中使用Maven"><a href="#5-6-在IDEA中使用Maven" class="headerlink" title="5.6 在IDEA中使用Maven"></a>5.6 在IDEA中使用Maven</h3><ol><li><p>启动IDEA</p></li><li><p>创建一个MavenWeb项目</p><p><img src="/2020/08/02/javaweb/1567844785602.png" alt="1567844785602" loading="lazy"></p><p><img src="/2020/08/02/javaweb/1567844841172.png" alt="1567844841172" loading="lazy"></p><p><img src="/2020/08/02/javaweb/1567844917185.png" alt="1567844917185" loading="lazy"></p></li><li><p>等待项目初始化完毕</p><p><img src="/2020/08/02/javaweb/1567845105970-1591591735908.png" alt="1567845105970" loading="lazy"></p></li><li><p>IDEA中的Maven设置</p><p>注意：IDEA项目创建成功后，看一眼Maven的配置</p><ul><li>但可以在开始界面进行全局设置</li></ul></li></ol><p>   <img src="/2020/08/02/javaweb/1567905247201.png" alt="1567905247201" loading="lazy"></p><p>   <img src="/2020/08/02/javaweb/1567845341956.png" alt="1567845341956" loading="lazy"></p><p>   <img src="/2020/08/02/javaweb/1567845413672.png" alt="1567845413672" loading="lazy"></p><ol start="5"><li><p>修改web.xml文件，替换webapp版本和tomcat一致(查看tomcat中webapps\ROOT\WEB-INF下面的web.xml)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span>  <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li></ol><p>==到这里所有的配置工作就完成了，可以开始进行javaweb开发==</p><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、HelloServlet"><a href="#6-1、HelloServlet" class="headerlink" title="6.1、HelloServlet"></a>6.1、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><ol><li><p>创建一个普通的Maven项目</p></li><li><p>删除src目录，并创建一个MavenWeb模块</p><p><img src="/2020/08/02/javaweb/image-20200608144340809.png" alt="image-20200608144340809" loading="lazy"></p><p><img src="/2020/08/02/javaweb/image-20200608144540543.png" alt="image-20200608144540543" loading="lazy"></p></li><li><p>增加目录</p><p><img src="/2020/08/02/javaweb/image-20200608144821335.png" alt="image-20200608144821335" loading="lazy"></p></li><li><p>在父项目中导入相应maven依赖</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="5"><li><p>Maven环境优化</p><ol><li><p>修改web.xml为最新的</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span>  <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>将maven的结构搭建完整</p></li></ol></li><li><p>编写普通的java类并继承HttpServlet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myservlet_01</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应流</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello,Serlvet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> </code></pre></li><li><p>编写Servlet的映射(在web.xml文件中配置)</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--注册Servlet--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.myservlet_01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--Servlet的请求路径--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Tomcat</p><p>注意：配置项目发布的路径就可以了</p></li><li><p>测试</p><p><img src="/2020/08/02/javaweb/image-20200608150808585.png" alt="image-20200608150808585" loading="lazy"></p></li></ol><h3 id="6-2、Servlet原理"><a href="#6-2、Servlet原理" class="headerlink" title="6.2、Servlet原理"></a>6.2、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="/2020/08/02/javaweb/1567913793252.png" alt="1567913793252" loading="lazy"></p><h3 id="6-3、Mapping问题"><a href="#6-3、Mapping问题" class="headerlink" title="6.3、Mapping问题"></a>6.3、Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.myservlet_01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre></li><li><p>一个Servlet可以指定多个映射路径</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>一个Servlet可以指定通用映射路径</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>默认请求路径(这将取代默认页面)</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--默认请求路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>指定一些后缀或者前缀等等….</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.xj    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.xj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>优先级问题(先匹配现有的，没有就走默认的)<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--404--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.myservlet_01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>在这个Servlet中保存的数据，可以在另外一个servlet中拿到。</p><ol><li><p>设置ServletContext中的属性和值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet_02</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//this.getInitParameter()   初始化参数</span>        <span class="token comment" spellcheck="true">//this.getServletConfig()   Servlet配置</span>        <span class="token comment" spellcheck="true">//this.getServletContext()  Servlet上下文</span>        ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> <span class="token string">"晓江"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将一个数据保存在了ServletContext中，名字为：username, 值 username</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>获取ServletContex中的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet_03</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置编码方式</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"名字: "</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写Servlet映射</p><ul><li><strong>web.xml中配置属性也需要按照顺序</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册Servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>setd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.MyServlet_02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>getd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.MyServlet_03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Servlet的请求路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>setd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/setd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>getd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/getd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动tomcat测试</p><p>需要先进入setc页面设置数值之后，getc页面才能得到数值（否则显示null）</p><p><img src="/2020/08/02/javaweb/image-20200608200227073.png" alt="image-20200608200227073" loading="lazy"></p></li></ol><h4 id="2、获取初始化数据"><a href="#2、获取初始化数据" class="headerlink" title="2、获取初始化数据"></a>2、获取初始化数据</h4><ol><li>设置初始数据</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置一些web应用初始化参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>获取初始化数据<ul><li><strong>注意是使用context.getInitParameter(“url”);</strong></li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 设置编码</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String url <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"获取到的数据为："</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ol start="3"><li><p>编写servlet映射</p></li><li><p>测试</p><p><img src="/2020/08/02/javaweb/image-20200608201449597.png" alt="image-20200608201449597" loading="lazy"></p><p>读取不到初始化数据。</p><p>==错误原因：获取初始化数据是使用<code>context.getInitParameter(&quot;url&quot;);</code>，而原来使用了<code>context.getAttribute(&quot;url&quot;);</code>==</p><p><img src="/2020/08/02/javaweb/image-20200608221329503.png" alt="image-20200608221329503" loading="lazy"></p></li></ol><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了MyServlet_05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//RequestDispatcher requestDispatcher = context.getRequestDispatcher("/gp"); // 转发的请求路径</span>    <span class="token comment" spellcheck="true">//requestDispatcher.forward(req,resp);  // 调用forward实现请求转发；</span>    context<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><ol><li><p>在resources目录下新建properties</p><p>或者在java目录下</p></li><li><p>启动Tomcat的时候会自动加载文件到tartget目录下</p><ul><li>在resource下创建：导出到/WEB-INF/classes</li><li>在java/com/xj/servlet/中创建：导出到/WEB-INF/classes/com/xj/servlet/</li></ul><p><img src="/2020/08/02/javaweb/image-20200608225403945.png" alt="image-20200608225403945" loading="lazy"></p></li><li><p>编写servlet</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 读取文件</span>    InputStream is <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数值</span>    String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String pwd <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写servlet映射</p></li><li><p>测试</p></li></ol><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><p><strong>response对浏览器的操作</strong></p><ol><li><p>让浏览器能够支持(Content-Disposition)下载我们需要的东西</p><pre class=" language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span>                URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>让浏览器每3秒刷新一次</p><pre class=" language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>把图片写给浏览器</p><pre class=" language-java"><code class="language-java">ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="1、下载文件"><a href="#1、下载文件" class="headerlink" title="1、下载文件"></a>1、下载文件</h4><ol><li><p>要获取下载文件的路径（从target目录下复制路径）</p></li><li><p>下载的文件名是啥？(最后一个“\\”的序号再加一)</p></li><li><p>设置想办法让浏览器能够支持下载我们需要的东西</p><pre class=" language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取下载文件的输入流</p></li><li><p>创建缓冲区</p></li><li><p>获取OutputStream对象</p></li><li><p>将FileOutputStream流写入到buffer缓冲区</p></li><li><p>使用OutputStream将缓冲区中的数据输出到客户端！</p></li></ol><ul><li><p>测试</p><ol><li>新建模块（response），需要配置一下Tomcat</li><li>修改web.xml文件</li><li>编写servlet</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//1. 要获取下载文件的路径（从target目录下复制路径）</span>    String realPath <span class="token operator">=</span> <span class="token string">"D:\\IDEA2019\\IdeaProjects\\JavaWeb_02\\Response\\target\\classes\\电脑.jpg"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 下载的文件名是啥？(最后一个\\的序号再加一)</span>    String fileName <span class="token operator">=</span> realPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>realPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4. 获取下载文件的输入流</span>    FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5. 创建缓冲区</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6. 获取OutputStream对象</span>    ServletOutputStream out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//8.关闭流</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ol start="4"><li>编写servlet映射</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>down<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>down<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/down<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><ol start="5"><li>测试</li></ol><p><img src="/2020/08/02/javaweb/image-20200609115441521.png" alt="image-20200609115441521" loading="lazy"></p></li></ul><h4 id="2、验证码功能"><a href="#2、验证码功能" class="headerlink" title="2、验证码功能"></a>2、验证码功能</h4><p>验证怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><ol><li>实现代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 让浏览器每3秒刷新一次</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在内存中创建一张图片</span>        BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到图片的画笔</span>        Graphics2D g <span class="token operator">=</span> <span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置背景颜色</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给图片写数据</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//告诉浏览器，这个请求用图片的方式打开</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//网站存在缓存，不让浏览器缓存</span>        resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"expires"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把图片写给浏览器</span>        ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//生成随机数</span>    <span class="token keyword">private</span> String <span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9999999</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保证产生的随机数是7为，不是的话就前面加 0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token operator">-</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         num <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><ol start="2"><li><p>测试</p><p><img src="/2020/08/02/javaweb/image-20200609122825999.png" alt="image-20200609122825999" loading="lazy"></p></li></ol><h4 id="3、实现重定向"><a href="#3、实现重定向" class="headerlink" title="3、实现重定向"></a>3、实现重定向</h4><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p><p>常见场景：</p><p><img src="/2020/08/02/javaweb/1567931587955.png" alt="1567931587955" loading="lazy"></p><pre class=" language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/r/img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重定向</span></code></pre><p>面试题：请你聊聊重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li><p>请求转发的时候，url不会产生变化；307</p><p>resp.sendRedirect(“/r/img”);</p></li><li><p>重定向时候，url地址栏会发生变化；302</p><p>req.getRequestDispatcher(“/success.jsp”).forward(req,resp);</p></li></ul><p><img src="/2020/08/02/javaweb/1567932163430.png" alt="1567932163430" loading="lazy"></p><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><p><strong>获取参数，请求转发</strong></p><ul><li>请求转发：<code> req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 设置接收和发送的编码</span>    req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobbys <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobbys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后台接收中文乱码问题</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobbys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过请求转发</span>    <span class="token comment" spellcheck="true">// 这里的 / 代表当前的web应用</span>    req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；开启浏览器到关闭的这个过程。</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端              服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术   （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="/2020/08/02/javaweb/1568344447291.png" alt="1568344447291" loading="lazy"></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得Cookie</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得cookie中的key</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得cookie中的vlaue</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新建一个cookie， System.currentTimeMillis()+""获取当前时间</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置cookie的有效期</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 响应给客户端一个cookie</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>一个网站cookie是否存在上限！</p><ul><li>一个Cookie只能保存一个信息（字符串）；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie为浏览器上限</li></ul><p><strong>删除Cookie；</strong></p><ul><li><strong>不设置有效期，关闭浏览器，自动失效；</strong></li><li>设置有效期时间为 0 ；</li></ul><p><strong>编码解码(防止中文乱码)：</strong></p><pre class=" language-java"><code class="language-java">URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span></code></pre><p><strong>测试</strong></p><ol><li><p>保存上次访问的时间（不设置有效期的话，浏览器关闭就失效）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintWriter out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务器从客户端获取cookie</span>    Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断cookie是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果存在</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你的上次访问时间："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历所有cookie</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 获取cookie中的值，将字符串转为Date类型</span>                <span class="token keyword">long</span> lastTime <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lastTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是你第一次访问该网站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 服务器给客户一个cookie</span>    Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置有效期，一分钟</span>    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>保存中文用户名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 设置编码</span>    req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintWriter out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个cookie</span>    <span class="token comment" spellcheck="true">// URLEncoder.encode() 为URL编码</span>    Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取出信息</span>    Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie1 <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// URLDecoder.decode() 为URL解码</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="/2020/08/02/javaweb/1568344560794.png" alt="1568344560794" loading="lazy"></p><p>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li></ul><p><img src="/2020/08/02/javaweb/1568342773861.png" alt="1568342773861" loading="lazy"></p><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中（只有一个），服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建</li><li>设置值的时候cookie只能存放字符串类型，而session可以存放任意类型</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p><strong>测试</strong></p><ol><li><p>创建一个Session</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 设置编码</span>    req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取session</span>    HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给session存数据</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取sessionID</span>    String sessionID <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断session是不是新建的</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Session创建成功，ID："</span> <span class="token operator">+</span> sessionID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Session已经创建，ID："</span> <span class="token operator">+</span> sessionID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>其中<code>session.setAttribute(&quot;username&quot;, &quot;晓江&quot;);</code>可以存放Object类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 给session存自定义类</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取session中的数据</span>person user <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>   <strong>Session创建的时候做了什么事情？</strong></p><ul><li><p>将session中的值添加到cookie中</p><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ol start="2"><li><p>Session中的主要内容</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到Session</span>HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手动注销Session</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>会话手动过期</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取Session</span>HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使Session失效</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>会话自动过期：web.xml配置</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--设置Session默认的失效时间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--15分钟后Session自动失效，以分钟为单位--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/javaweb/1568344679763-1591774212672.png" alt="1568344679763" loading="lazy"></p></li></ol><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li><p>写JSP就像在写HTML</p></li><li><p>区别：</p><ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li><li><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><p><strong>JSP 本质上就是一个Servlet</strong></p></li></ul><p><img src="/2020/08/02/javaweb/1568347078207.png" alt="1568347078207" loading="lazy"></p><h3 id="8-2、JSP基础语法"><a href="#8-2、JSP基础语法" class="headerlink" title="8.2、JSP基础语法"></a>8.2、JSP基础语法</h3><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><pre class=" language-jsp"><code class="language-jsp">  <%--JSP表达式  作用：用来将程序的输出，输出到客户端  <%= 变量或者表达式%>  --%>  <%= new java.util.Date()%></code></pre><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><pre class=" language-jsp"><code class="language-jsp"><%--jsp脚本片段--%><%    int sum = 0;    for (int i = 1; i <=100 ; i++) {         sum+=i;    }     out.println("<h1>Sum="+sum+"</h1>");%></code></pre><p><strong>脚本片段的再实现</strong></p><pre class=" language-jsp"><code class="language-jsp"><%    int x = 10;    out.println(x);%>    <p>这是一个JSP文档</p><%    int y = 2;    out.println(y);%><hr><%--在代码嵌入HTML元素--%><%    for (int i = 0; i < 5; i++) { %>    <h1>Hello,World  <%= i %> </h1><%} %></code></pre><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><pre class=" language-jsp"><code class="language-jsp">  <%!    static {       System.out.println("Loading Servlet!");    }     private int globalVar = 0;    public void kuang(){       System.out.println("进入了方法Kuang！");    }   %></code></pre><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><pre class=" language-jsp"><code class="language-jsp"><% %><%= %><%! %><%--注释--%></code></pre><p>JSP的注释，不会在客户端显示，HTML就会！</p><h3 id="8-3、9大内置对象"><a href="#8-3、9大内置对象" class="headerlink" title="8.3、9大内置对象"></a>8.3、9大内置对象</h3><ul><li>PageContext    存东西</li><li>Request     存东西</li><li>Response</li><li>Session      存东西</li><li>Application   【SerlvetContext】   存东西</li><li>config    【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><pre class=" language-java"><code class="language-java">pageContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token string">"晓江1号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存的数据只在一个页面中有效</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span><span class="token string">"晓江2号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name3"</span><span class="token punctuation">,</span><span class="token string">"晓江3号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name4"</span><span class="token punctuation">,</span><span class="token string">"晓江4号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></code></pre><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- JSTL表达式的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- standard标签库 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>EL表达式：  ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><p><strong>JSP标签</strong></p><pre class=" language-jsp"><code class="language-jsp"><%--jsp:include--%><%--等价于http://localhost:8080/jsptag.jsp?name=xj&age=12--%><jsp:forward page="/jsptag2.jsp">    <jsp:param name="name" value="xj"></jsp:param>    <jsp:param name="age" value="12"></jsp:param></jsp:forward></code></pre><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> （掌握部分）</p><ul><li><p>需要添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/jsp/jstl/core<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre></li></ul><p><img src="/2020/08/02/javaweb/1568362473764.png" alt="1568362473764" loading="lazy"></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p>c：if</p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><head>    <title>Title</title></head><body><h4>if测试</h4><hr><form action="coreif.jsp" method="get">    <%--    EL表达式获取表单中的数据    ${ param.参数名}     --%>    <input type="text" name="username" value="${ param.username} ">    <input type="submit" value="登录"></form><%--判断如果提交的用户名是管理员，则登录成功--%><c:if test="${ param.username=='admin'} " var="isAdmin">    <c:out value="管理员欢迎您！"/></c:if><%--自闭合标签--%><c:out value="${ isAdmin} "/></body></code></pre><p>c:choose   c:when</p><pre class=" language-jsp"><code class="language-jsp"><body><%--定义一个变量score，值为85--%><c:set var="score" value="55"/><c:choose>    <c:when test="${ score>=90} ">        你的成绩为优秀    </c:when>    <c:when test="${ score>=80} ">        你的成绩为一般    </c:when>    <c:when test="${ score>=70} ">        你的成绩为良好    </c:when>    <c:when test="${ score<=60} ">        你的成绩为不及格    </c:when></c:choose></body></code></pre><p>c:forEach</p><pre class=" language-jsp"><code class="language-jsp"><%    ArrayList<String> people = new ArrayList<>();    people.add(0,"张三");    people.add(1,"李四");    people.add(2,"王五");    people.add(3,"赵六");    people.add(4,"田六");    request.setAttribute("list",people);%><%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%><c:forEach var="people" items="${ list} ">    <c:out value="${ people} "/> <br></c:forEach><hr><c:forEach var="people" items="${ list} " begin="1" end="3" step="1" >    <c:out value="${ people} "/> <br></c:forEach></code></pre><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射  ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>晓江1号</td><td>3</td><td>潮州</td></tr><tr><td>2</td><td>晓江2号</td><td>18</td><td>潮州</td></tr><tr><td>3</td><td>晓江3号</td><td>100</td><td>潮州</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token string">"潮州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token string">"潮州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token string">"潮州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p><h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="/2020/08/02/javaweb/1568423664332.png" alt="1568423664332" loading="lazy"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><pre class=" language-java"><code class="language-java">servlet<span class="token operator">--</span>CRUD<span class="token operator">--</span><span class="token operator">></span>数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用<span class="token operator">|</span>JDBC<span class="token operator">|</span>Mysql Oracle SqlServer <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="/2020/08/02/javaweb/1568424227281.png" alt="1568424227281" loading="lazy"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD   （Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller  （Servlet）</p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p></li><li><p>交给业务层处理对应的代码 </p></li><li><p>控制视图的跳转  </p><pre class=" language-java"><code class="language-java">登录<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>接收用户的登录请求<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>处理用户的请求（获取用户登录的参数，username，password）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>交给业务层处理登录业务（判断用户名密码是否正确：事务）<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>Dao层查询用户名和密码是否正确<span class="token operator">--</span><span class="token operator">></span>数据库</code></pre></li></ul><h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p><img src="/2020/08/02/javaweb/1568424858708.png" alt="1568424858708" loading="lazy"></p><p>Filter开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ol><li><p>导包不要错</p><p><img src="/2020/08/02/javaweb/1568425162525.png" alt="1568425162525" loading="lazy"></p><p>实现Filter接口，重写对应的方法即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterEncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CharacterEncodingFilter初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//Chain : 链</span>    <span class="token comment" spellcheck="true">/*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>         request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CharacterEncodingFilter执行前...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CharacterEncodingFilter执行后...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//销毁：web服务器关闭的时候，过滤会销毁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CharacterEncodingFilter销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol></li><li><p>在web.xml中配置 Filter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xj.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;url-pattern>/*&lt;/url-pattern>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//统计网站在线人数 ： 统计session</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnlineCountListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//创建session监听： 看你的一举一动</span>    <span class="token comment" spellcheck="true">//一旦创建Session就会触发一次这个事件！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ServletContext ctx <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer onlineCount <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onlineCount<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">int</span> count <span class="token operator">=</span> onlineCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         ctx<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">,</span>onlineCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//销毁session监听</span>    <span class="token comment" spellcheck="true">//一旦销毁Session就会触发一次这个事件！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ServletContext ctx <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer onlineCount <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onlineCount<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">int</span> count <span class="token operator">=</span> onlineCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         ctx<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">,</span>onlineCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> </code></pre></li></ol><pre><code>   /*   Session销毁：   1. 手动销毁  getSession().invalidate();   2. 自动销毁    */</code></pre><p>   }</p><pre><code>2. web.xml中注册监听器```xml&lt;!--注册监听器--&gt;&lt;listener&gt;    &lt;listener-class&gt;com.xj.listener.OnlineCountListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre><ol start="3"><li>看情况是否使用！</li></ol><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPanel</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"快乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//新建一个窗体</span>        Panel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//面板</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置窗体的布局</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背景颜色</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背景颜色</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//监听事件，监听关闭事件</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">windowClosing</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取session和request</span>HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">;</span>HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> resp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>USER_SESSION<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>     response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/error.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>   什么是JDBC ： Java连接数据库！</p><p>   <img src="/2020/08/02/javaweb/1568439601825.png" alt="1568439601825" loading="lazy"></p><p>   需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java…  连接驱动（必须要导入）</li></ul><p>   <strong>实验环境搭建</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span>email<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'zs@qq.com'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span>email<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'ls@qq.com'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span>email<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'ww@qq.com'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span></code></pre><p>   导入数据库依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mysql的驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>   IDEA中连接数据库：</p><p>   <img src="/2020/08/02/javaweb/1568440926845.png" alt="1568440926845" loading="lazy"></p><p>   <strong>JDBC 固定步骤：</strong></p><pre><code>  1. 加载驱动  2. 连接数据库,代表数据库  3. 向数据库发送SQL的对象Statement : CRUD  4. 编写SQL （根据业务，不同的SQL）  5. 执行SQL  6. 关闭连接</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJdbc</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//配置信息</span>        <span class="token comment" spellcheck="true">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.连接数据库,代表数据库</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span>        Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.编写SQL</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from users"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span>        ResultSet rs <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id="</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password="</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"email="</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"birthday="</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//6.关闭连接，释放资源（一定要做） 先开后关</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>   <strong>预编译SQL</strong></p><ul><li><p>使用preparedStatement比Statement安全</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC2</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//配置信息</span>        <span class="token comment" spellcheck="true">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.连接数据库,代表数据库</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.编写SQL</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.预编译</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给第一个占位符？ 的值赋值为1；</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给第二个占位符？ 的值赋值为狂神说Java；</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给第三个占位符？ 的值赋值为123456；</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"24736743@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给第四个占位符？ 的值赋值为1；</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span>        <span class="token comment" spellcheck="true">//5.执行SQL</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//6.关闭连接，释放资源（一定要做） 先开后关</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2020/08/02/springboot/"/>
      <url>/2020/08/02/springboot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Spring"><a href="#1-1、什么是Spring" class="headerlink" title="1.1、什么是Spring"></a>1.1、什么是Spring</h3><p><img src="/2020/08/02/springboot/image-20200802220924037.png" alt="image-20200802220924037" loading="lazy"></p><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson </p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h3 id="1-2、Spring是如何简化Java开发的"><a href="#1-2、Spring是如何简化Java开发的" class="headerlink" title="1.2、Spring是如何简化Java开发的"></a>1.2、Spring是如何简化Java开发的</h3><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><ol><li>基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</li><li>通过IOC，依赖注入（DI）和面向接口实现松耦合；</li><li>基于切面（AOP）和惯例进行声明式编程；</li><li>通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</li></ol><h3 id="1-3、什么是SpringBoot"><a href="#1-3、什么是SpringBoot" class="headerlink" title="1.3、什么是SpringBoot"></a>1.3、什么是SpringBoot</h3><p>​    学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>​    言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，<strong>约定大于配置</strong>，  you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</p><p>​    所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><blockquote><p>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p></blockquote><p>​    随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>​    Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>​    简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p>​    Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h2 id="2、第一个Spring-Boot"><a href="#2、第一个Spring-Boot" class="headerlink" title="2、第一个Spring Boot"></a>2、第一个Spring Boot</h2><blockquote><p>准备工作</p></blockquote><p>我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p><p>我的环境准备：</p><ul><li>java version “1.8.0_181”</li><li>Maven-3.6.1</li><li>SpringBoot 2.x 最新版</li></ul><p>开发工具：</p><ul><li>IDEA</li></ul><h3 id="2-1、创建基础项目说明"><a href="#2-1、创建基础项目说明" class="headerlink" title="2.1、创建基础项目说明"></a>2.1、创建基础项目说明</h3><p>Spring官方提供了非常方便的工具让我们快速构建应用</p><p>Spring Initializr：<a href="https://start.spring.io/">https://start.spring.io/</a></p><h4 id="1、项目创建方式一"><a href="#1、项目创建方式一" class="headerlink" title="1、项目创建方式一"></a>1、项目创建方式一</h4><p>使用Spring Initializr 的 Web页面创建项目</p><ol><li><p>打开  <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>或直接进行Spring官网，点击Spring Boot</p><p><img src="/2020/08/02/springboot/image-20200719180427482.png" alt="image-20200719180427482" loading="lazy"></p><p>点击下方的快速开始</p><p><img src="/2020/08/02/springboot/image-20200719180513214.png" alt="image-20200719180513214" loading="lazy"></p><p>这里有官方用法教程，同样也是点击<a href="https://start.spring.io/">start.spring.io</a>网页进行创建</p><p><img src="/2020/08/02/springboot/image-20200719180541966.png" alt="image-20200719180541966" loading="lazy"></p></li><li><p>填写项目信息</p><p><img src="/2020/08/02/springboot/image-20200719181054653.png" alt="image-20200719181054653" loading="lazy"></p><p>导入Web模板</p><p><img src="/2020/08/02/springboot/image-20200719181538488.png" alt="image-20200719181538488" loading="lazy"></p></li><li><p>点击<code>Generate Project</code>按钮生成项目；下载此项目</p></li><li><p>解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p><img src="/2020/08/02/springboot/image-20200719181255497.png" alt="image-20200719181255497" loading="lazy"></p><p>使用IDEA导入项目（注意不是打开），选择Maven，然后其他的默认即可</p><p><img src="/2020/08/02/springboot/image-20200719181642130.png" alt="image-20200719181642130" loading="lazy"></p></li><li><p>如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。(真的好慢！)</p><p><img src="/2020/08/02/springboot/image-20200719181734041.png" alt="image-20200719181734041" loading="lazy"></p></li><li><p>完成之后，可以将多余的项目删除，这就成为一个简洁的<code>Maven</code>项目了</p><p><img src="/2020/08/02/springboot/image-20200719184007159.png" alt="image-20200719184007159" loading="lazy"></p></li></ol><h4 id="2、项目创建方式二"><a href="#2、项目创建方式二" class="headerlink" title="2、项目创建方式二"></a>2、项目创建方式二</h4><p>使用 IDEA 直接创建项目</p><ol><li><p>创建一个新项目</p></li><li><p>选择<code>spring initalizr</code> ， 可以看到默认就是去官网的快速构建工具那里实现</p><p><img src="/2020/08/02/springboot/image-20200719202324251.png" alt="image-20200719202324251" loading="lazy"></p></li><li><p>填写项目信息</p><p><img src="/2020/08/02/springboot/image-20200719202434088.png" alt="image-20200719202434088" loading="lazy"></p><p><strong>然后报错了</strong>（Artifact contains illegal characters即包含非法字符，<strong>将名称中的字母改为小写即可</strong>）</p><p><img src="/2020/08/02/springboot/image-20200719202936439.png" alt="image-20200719202936439" loading="lazy"></p></li><li><p>选择初始化的组件（初学勾选 Web 即可）</p><p><img src="/2020/08/02/springboot/image-20200719203444139.png" alt="image-20200719203444139" loading="lazy"></p></li><li><p>填写项目路径</p></li><li><p>等待项目构建成功，第二次创建的项目就快很多了！然后将不需要的文件夹删除简化一下。</p><p><img src="/2020/08/02/springboot/image-20200719203551546.png" alt="image-20200719203551546" loading="lazy"><img src="/2020/08/02/springboot/image-20200719203708881.png" alt="image-20200719203708881" loading="lazy"></p></li></ol><h3 id="2-2、项目结构分析"><a href="#2-2、项目结构分析" class="headerlink" title="2.2、项目结构分析"></a>2.2、项目结构分析</h3><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><p><img src="/2020/08/02/springboot/image-20200719184106890.png" alt="image-20200719184106890" loading="lazy"></p><ul><li>程序的主启动类</li><li>一个 application.properties 配置文件</li><li>一个 测试类</li><li>一个 pom.xml</li></ul><h4 id="1、pom-xml分析"><a href="#1、pom-xml分析" class="headerlink" title="1、pom.xml分析"></a>1、pom.xml分析</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 父依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- web场景启动器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- springboot单元测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 剔除依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打包插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h3 id="2-3、编写一个http接口"><a href="#2-3、编写一个http接口" class="headerlink" title="2.3、编写一个http接口"></a>2.3、编写一个http接口</h3><ol><li><p>在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p></li><li><p>在包中新建一个HelloController类，跟<code>SpringMVC</code>的作用一样，但是省略了很多配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 不经过视图解析器</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写完毕后，<strong>从主程序启动项目</strong>，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p><p><img src="/2020/08/02/springboot/image-20200719184329128.png" alt="image-20200719184329128" loading="lazy"></p><p>运行效果</p><p><img src="/2020/08/02/springboot/image-20200719184418387.png" alt="image-20200719184418387" loading="lazy"></p></li><li><p>打开浏览器，访问成功</p><p><img src="/2020/08/02/springboot/image-20200719184447831.png" alt="image-20200719184447831" loading="lazy"></p></li></ol><p>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目！</p><h3 id="2-4、将项目打成jar包"><a href="#2-4、将项目打成jar包" class="headerlink" title="2.4、将项目打成jar包"></a>2.4、将项目打成jar包</h3><ol><li><p>双击 maven的 package</p><p><img src="/2020/08/02/springboot/image-20200719184533256.png" alt="image-20200719184533256" loading="lazy"></p></li><li><p>如果打包成功，则会在target目录下生成一个 jar 包</p><p><img src="/2020/08/02/springboot/image-20200719184649839.png" alt="image-20200719184649839" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200719184701953.png" alt="image-20200719184701953" loading="lazy"></p></li><li><p>如果打包错误，可以配置打包时 跳过项目运行测试用例</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    在工作中,很多情况下我们打包是不想执行测试用例的    可能是测试用例不完事,或是测试用例会影响数据库数据    跳过测试用例执    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--跳过项目运行测试用例--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre></li><li><p>打成了jar包后，就可以在任何地方运行了，不需要开启Tomcat。 </p><p>运行jar包：</p><ul><li>切换到文件路径</li><li>输入 java -jar 文件名.jar</li></ul><p><img src="/2020/08/02/springboot/image-20200719201453591.png" alt="image-20200719201453591" loading="lazy"></p></li></ol><h3 id="2-5、修改启动时的字符"><a href="#2-5、修改启动时的字符" class="headerlink" title="2.5、修改启动时的字符"></a>2.5、修改启动时的字符</h3><blockquote><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案</p></blockquote><p>只需一步：到项目下的 <code>resources </code>目录下新建一个<code>banner.txt</code> 即可，注意图标右下角有符号。</p><p><img src="/2020/08/02/springboot/image-20200719201710543.png" alt="image-20200719201710543" loading="lazy"></p><p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><p>像这样：</p><pre class=" language-tex"><code class="language-tex">                       _____________________________________________________                      |                                                     |             _______  |                                                     |            / _____ | |                       ACME MOO-VERS                 |           / /(__) || |                                                     |  ________/ / |OO| || |                                                     | |         |-------|| |                                                     |(|         |     -.|| |_______________________                              | |  ____   \       ||_________||____________  |             ____      ____  |/| / __ \   |______||     / __ \   / __ \   | |            / __ \    / __ \ |\\|| /  \ |_______________| /  \ |_| /  \ |__| |___________| /  \ |__| /  \|_|/   | () |                 | () |   | () |                  | () |    | () |    \__/                   \__/     \__/                    \__/      \__/</code></pre><p><strong>运行效果</strong></p><p><img src="/2020/08/02/springboot/image-20200719201751896.png" alt="image-20200719201751896" loading="lazy"></p><h3 id="2-6、application-properties配置文件"><a href="#2-6、application-properties配置文件" class="headerlink" title="2.6、application.properties配置文件"></a>2.6、application.properties配置文件</h3><blockquote><p>参考网站：application.properties</p></blockquote><p>修改端口号：修改之后必须访问8081端口才有效</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span></code></pre><p>系统属性/变量</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span></code></pre><p>配置首页的目录</p><pre class=" language-properties"><code class="language-properties"></code></pre><h2 id="3、SpringBoot运行原理初探"><a href="#3、SpringBoot运行原理初探" class="headerlink" title="3、SpringBoot运行原理初探"></a>3、SpringBoot运行原理初探</h2><p>参考网站：<a href="https://www.cnblogs.com/milicool/p/11718099.html">https://www.cnblogs.com/milicool/p/11718099.html</a></p><blockquote><p>我们之前写的HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件探究起</p></blockquote><h3 id="3-1、pom-xml"><a href="#3-1、pom-xml" class="headerlink" title="3.1、pom.xml"></a>3.1、pom.xml</h3><blockquote><h4 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h4></blockquote><p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>点进去，发现还有一个父依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p><blockquote><h4 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h4></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p><h3 id="3-2、主启动类"><a href="#3-2、主启动类" class="headerlink" title="3.2、主启动类"></a>3.2、主启动类</h3><blockquote><p>分析完了 pom.xml 来看看这个启动类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@SpringBootApplication 来标注一个主程序类</span><span class="token comment" spellcheck="true">//说明这是一个Spring Boot应用</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//以为是启动了一个方法，没想到启动了一个服务</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>但是<strong>一个简单的启动类并不简单！</strong>我们来分析一下这些注解都干了什么</p><blockquote><p><code>@SpringBootApplication</code></p></blockquote><p>作用：标注在某个类上说明这个类是SpringBoot的<strong>主配置类</strong> ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><p>进入这个注解：可以看到上面还有很多其他注解！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span> </code></pre><ul><li><p><code>@ComponentScan</code></p><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p></li><li><p><code>@SpringBootConfiguration</code></p><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p><p>我们继续进去这个注解查看</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 点进去得到下面的 @Component</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre><p>这里的 <code>@Configuration</code>，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p><p>里面的<code> @Component</code> 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p><p>我们回到 <code>SpringBootApplication </code>注解中继续看。</p></li><li><p><code>@EnableAutoConfiguration</code>：开启自动配置功能</p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；</p><p><code>@EnableAutoConfiguration</code>告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p><p>点进注解接续查看：</p><ul><li><p><code>@AutoConfigurationPackage</code> ：自动配置包</p></li><li><p><code>@import</code> ：Spring底层注解@import ， 给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p><p>这个分析完了，退到上一步，继续看</p><p><code>@Import({ AutoConfigurationImportSelector.class} )</code> ：给容器导入组件 ；</p><ul><li><p><code>AutoConfigurationImportSelector</code> ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p><p>1、这个类中有一个这样的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得候选的配置</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span>    <span class="token comment" spellcheck="true">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200719233041862.png" alt="image-20200719233041862" loading="lazy"></p><p>2、这个方法又调用了 <code> SpringFactoriesLoader</code> 类的静态方法！我们进入<code>SpringFactoriesLoader</code>类<code>loadFactoryNames() </code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里它又调用了 loadSpringFactories 方法</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>3、我们继续点击查看<code>loadSpringFactories</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>MultiValueMap<span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//去获取一个资源 "META-INF/spring.factories"</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span> <span class="token operator">:</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LinkedMultiValueMap result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的资源遍历，封装成为一个Properties</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 URL url <span class="token operator">=</span> <span class="token punctuation">(</span>URL<span class="token punctuation">)</span>urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UrlResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator var6 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>var6<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String factoryClassName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> var9 <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> var10 <span class="token operator">=</span> var9<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var11 <span class="token operator">&lt;</span> var10<span class="token punctuation">;</span> <span class="token operator">++</span>var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         String factoryName <span class="token operator">=</span> var9<span class="token punctuation">[</span>var11<span class="token punctuation">]</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> factoryName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location [META-INF/spring.factories]"</span><span class="token punctuation">,</span> var13<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>其中 <code>FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</code></p><p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p><p><img src="/2020/08/02/springboot/image-20200719234658500.png" alt="image-20200719234658500" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200719234733885.png" alt="image-20200719234733885" loading="lazy"></p><p>我们在上面的自动配置类随便找一个打开看看，比如 ：<code>WebMvcAutoConfiguration</code></p><p><img src="/2020/08/02/springboot/image-20200719234824109.png" alt="image-20200719234824109" loading="lazy"></p><p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p><p>所以，自动配置真正实现是从<code>classpath</code>中搜寻所有的<code>META-INF/spring.factories</code>配置文件 ，并将其中对应的 <code>org.springframework.boot.autoconfigure</code> 包下的配置项，通过反射实例化为对应标注了 <code>@Configuration</code>的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p></li></ul></li></ul></li><li><p><strong>结论：</strong></p><ol><li>SpringBoot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在<code>springboot-autoconfigure</code>的jar包中；</li><li>它会给容器中导入非常多的自动配置类 <code>（xxxAutoConfiguration）</code>, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><p><strong>现在大家应该大概的了解了下，SpringBoot的运行原理，后面我们还会深化一次！</strong></p></li></ul><h3 id="3-3、SpringApplication"><a href="#3-3、SpringApplication" class="headerlink" title="3.3、SpringApplication"></a>3.3、SpringApplication</h3><blockquote><p>不简单的方法</p></blockquote><p>我最初以为就是运行了一个main方法，没想到却开启了一个服务；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><strong>SpringApplication.run分析</strong></p><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行;</p><blockquote><p>SpringApplication</p></blockquote><p><strong>这个类主要做了以下四件事情：</strong></p><ol><li>推断应用的类型是普通的项目还是Web项目</li><li>查找并加载所有可用初始化器 ， 设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ol><p>查看构造器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ......</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><blockquote><p>run方法流程分析</p></blockquote><p>跟着源码和这幅图就可以一探究竟了！</p><p><img src="/2020/08/02/springboot/image-20200719235554613.png" alt="image-20200719235554613" loading="lazy"></p><h2 id="4、yaml配置注入"><a href="#4、yaml配置注入" class="headerlink" title="4、yaml配置注入"></a>4、yaml配置注入</h2><h3 id="4-1、yaml语法学习"><a href="#4-1、yaml语法学习" class="headerlink" title="4.1、yaml语法学习"></a>4.1、yaml语法学习</h3><blockquote><p>配置文件</p></blockquote><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span></code></pre><h4 id="1、yaml概述"><a href="#1、yaml概述" class="headerlink" title="1、yaml概述"></a>1、yaml概述</h4><blockquote><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p></blockquote><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><ul><li><p>传统xml配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre></li><li><p>yaml配置：(<strong>冒号后必须有空格！</strong>)</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>   <span class="token key atrule">prot</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre></li></ul><h4 id="2、yaml基础语法"><a href="#2、yaml基础语法" class="headerlink" title="2、yaml基础语法"></a>2、yaml基础语法</h4><p>说明：语法要求严格！</p><ol><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</li><li>属性和值的大小写都是十分敏感的。</li></ol><blockquote><h5 id="字面量：普通的值-数字，布尔值，字符串"><a href="#字面量：普通的值-数字，布尔值，字符串" class="headerlink" title="字面量：普通的值  [ 数字，布尔值，字符串  ]"></a>字面量：普通的值  [ 数字，布尔值，字符串  ]</h5></blockquote><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">K</span><span class="token punctuation">:</span> v</code></pre><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “xj \n shen”  输出 ：xj 换行  shen</p></li><li><p>‘ ‘ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘xj \n shen’  输出 ：xj \n  shen</p></li></ul><blockquote><h5 id="对象、Map（键值对）"><a href="#对象、Map（键值对）" class="headerlink" title="对象、Map（键值对）"></a>对象、Map（键值对）</h5></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#对象、Map格式</span><span class="token key atrule">k</span><span class="token punctuation">:</span>     <span class="token key atrule">v1</span><span class="token punctuation">:</span>    v2<span class="token punctuation">:</span></code></pre><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> xj    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> xj<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> </code></pre><blockquote><h5 id="数组（-List、set-）"><a href="#数组（-List、set-）" class="headerlink" title="数组（ List、set ）"></a>数组（ List、set ）</h5></blockquote><p>用 - 值表示数组中的一个元素,比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span></code></pre><h3 id="4-2、注入配置文件"><a href="#4-2、注入配置文件" class="headerlink" title="4.2、注入配置文件"></a>4.2、注入配置文件</h3><blockquote><p>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</p></blockquote><h4 id="1、yaml注入配置文件"><a href="#1、yaml注入配置文件" class="headerlink" title="1、yaml注入配置文件"></a>1、yaml注入配置文件</h4><p>​    java程序都需要注册bean到容器中，即添加<code>@Component</code>注解</p><ol><li><p>在springboot项目中的resources目录下新建一个文件 application.yml</p></li><li><p>编写一个实体类 Dog；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有参无参构造、get、set方法、toString()方法  </span><span class="token punctuation">}</span> </code></pre></li><li><p>思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在SpringBoot的测试类下注入狗狗输出一下；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span> <span class="token comment" spellcheck="true">//将狗狗自动注入进来</span>    Dog dog<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印看下狗狗对象</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>结果成功输出，@Value注入成功，这是我们原来的办法</p></li><li><p>我们在编写一个复杂一点的实体类：Person 类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有参无参构造、get、set方法、toString()方法  </span><span class="token punctuation">}</span> </code></pre></li><li><p>我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> xj  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2020/07/20  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>   <span class="token key atrule">lists</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> code   <span class="token punctuation">-</span> girl   <span class="token punctuation">-</span> music  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 旺财    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre></li><li><p>我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*@ConfigurationProperties作用：将配置文件中配置的每一个属性的值，映射到这个组件中；告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应*/</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>确认以上配置都OK之后，我们去测试类中测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    Person person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将person自动注入进来</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印person信息</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>结果：所有值全部注入成功！</p></li></ol><p><strong>yaml配置注入到实体类完全OK！</strong></p><p>课堂测试：</p><ol><li>将配置文件的key 值 和 属性的值设置为不一样，则结果输出为null，注入失败</li><li>在配置一个person2，然后将 @ConfigurationProperties(prefix = “person2”) 指向我们的person2；</li></ol><h4 id="2、加载指定的配置文件"><a href="#2、加载指定的配置文件" class="headerlink" title="2、加载指定的配置文件"></a>2、加载指定的配置文件</h4><ul><li><strong>@PropertySource ：</strong>加载指定的配置文件；</li><li><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</li></ul><ol><li><p>我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">xj</span></code></pre></li><li><p>然后在我们的代码中指定加载person.properties文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:person.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${ name} "</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用EL表达式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span> </code></pre></li><li><p>再次输出测试一下：指定配置文件绑定成功！</p></li></ol><h4 id="3、配置文件占位符"><a href="#3、配置文件占位符" class="headerlink" title="3、配置文件占位符"></a>3、配置文件占位符</h4><blockquote><p>配置文件还可以编写占位符生成随机数</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang$<span class="token punctuation">{</span> random.uuid<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 随机uuid</span>    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span> random.int<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true"># 随机int</span>    <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>     <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> code      <span class="token punctuation">-</span> girl      <span class="token punctuation">-</span> music    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span> person.hello<span class="token punctuation">:</span>other<span class="token punctuation">}</span> _旺财      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><h4 id="4、回顾properties配置"><a href="#4、回顾properties配置" class="headerlink" title="4、回顾properties配置"></a>4、回顾properties配置</h4><blockquote><p>我们上面采用的yaml方法都是最简单的方式，开发中最常用的；也是springboot所推荐的！那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties 。</p></blockquote><p>【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>settings–&gt;FileEncodings 中配置；</p><p><img src="/2020/08/02/springboot/image-20200720174242762.png" alt="image-20200720174242762" loading="lazy"></p><p>测试步骤：</p><ol><li><p>新建一个实体类User</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编辑配置文件 user.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user1.name</span><span class="token punctuation">=</span><span class="token attr-value">xj</span><span class="token attr-name">user1.age</span><span class="token punctuation">=</span><span class="token attr-value">18</span><span class="token attr-name">user1.sex</span><span class="token punctuation">=</span><span class="token attr-value">男</span></code></pre></li><li><p>我们在User类上使用@Value来进行注入！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:user.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//直接使用@value</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${ user.name} "</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从配置文件中取值</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ 9*2} "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// #{ SPEL}  Spring表达式</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 字面量</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>Springboot测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>结果正常输出：</p></li></ol><h3 id="4-3、对比小结"><a href="#4-3、对比小结" class="headerlink" title="4.3、对比小结"></a>4.3、对比小结</h3><blockquote><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p></blockquote><p><img src="/2020/08/02/springboot/image-20200720123346097.png" alt="image-20200720123346097" loading="lazy"></p><ol><li>@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</li><li>松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</li><li>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</li></ol><p><strong>结论：</strong></p><ul><li>配置yml和配置properties都可以获取到值，强烈推荐 yml；</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</li><li>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</li></ul><h2 id="5、JSR303数据校验及多环境切换"><a href="#5、JSR303数据校验及多环境切换" class="headerlink" title="5、JSR303数据校验及多环境切换"></a>5、JSR303数据校验及多环境切换</h2><blockquote><p>Springboot中可以用<code>@validated</code>来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">//数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//name必须是邮箱格式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>运行结果 ：default message [不是一个合法的电子邮件地址];</p><p><strong>使用数据校验，可以保证数据的正确性；</strong> </p><h3 id="5-1、常见参数"><a href="#5-1、常见参数" class="headerlink" title="5.1、常见参数"></a>5.1、常见参数</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"名字不能为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"年龄最大不能查过120"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 空检查</span><span class="token annotation punctuation">@Null</span>       <span class="token comment" spellcheck="true">// 验证对象是否为null</span><span class="token annotation punctuation">@NotNull</span>    <span class="token comment" spellcheck="true">// 验证对象是否不为null, 无法查检长度为0的字符串</span><span class="token annotation punctuation">@NotBlank</span>   <span class="token comment" spellcheck="true">// 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><span class="token annotation punctuation">@NotEmpty</span>   <span class="token comment" spellcheck="true">// 检查约束元素是否为NULL或者是EMPTY.</span><span class="token comment" spellcheck="true">// Booelan检查</span><span class="token annotation punctuation">@AssertTrue</span>     <span class="token comment" spellcheck="true">// 验证 Boolean 对象是否为 true  </span><span class="token annotation punctuation">@AssertFalse</span>    <span class="token comment" spellcheck="true">// 验证 Boolean 对象是否为 false  </span><span class="token comment" spellcheck="true">// 长度检查</span><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string is between min and max included.</span><span class="token comment" spellcheck="true">// 日期检查</span><span class="token annotation punctuation">@Past</span>       <span class="token comment" spellcheck="true">// 验证 Date 和 Calendar 对象是否在当前时间之前  </span><span class="token annotation punctuation">@Future</span>     <span class="token comment" spellcheck="true">// 验证 Date 和 Calendar 对象是否在当前时间之后  </span><span class="token annotation punctuation">@Pattern</span>    <span class="token comment" spellcheck="true">// 验证 String 对象是否符合正则表达式的规则</span><span class="token comment" spellcheck="true">// .......等等</span><span class="token comment" spellcheck="true">// 除此以外，我们还可以自定义一些数据校验规则</span></code></pre><h3 id="5-2、多环境切换"><a href="#5-2、多环境切换" class="headerlink" title="5.2、多环境切换"></a>5.2、多环境切换</h3><blockquote><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p></blockquote><h4 id="1、多配置文件"><a href="#1、多配置文件" class="headerlink" title="1、多配置文件"></a>1、多配置文件</h4><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><ul><li><strong>application-test.properties</strong> 代表测试环境配置</li><li><strong>application-dev.properties</strong> 代表开发环境配置</li></ul><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><span class="token comment" spellcheck="true">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><h4 id="2、yaml的多文档块"><a href="#2、yaml的多文档块" class="headerlink" title="2、yaml的多文档块"></a>2、yaml的多文档块</h4><blockquote><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true">#选择要激活那个环境块</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#配置环境的名称</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#配置环境的名称</span></code></pre><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h3 id="5-3、配置文件加载位置"><a href="#5-3、配置文件加载位置" class="headerlink" title="5.3、配置文件加载位置"></a>5.3、配置文件加载位置</h3><blockquote><p>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</p></blockquote><p>springboot 启动会扫描以下位置的<code>application.properties</code>或者<code>application.yml</code>文件作为SpringBoot的默认配置文件：</p><pre class=" language-properties"><code class="language-properties">优先级1：项目路径下的config文件夹配置文件优先级2：项目路径下配置文件优先级3：资源路径下的config文件夹配置文件优先级4：资源路径下配置文件</code></pre><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置项目的访问路径</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/xj</span></code></pre><h3 id="5-4、拓展，运维小技巧"><a href="#5-4、拓展，运维小技巧" class="headerlink" title="5.4、拓展，运维小技巧"></a>5.4、拓展，运维小技巧</h3><p>指定位置加载配置文件</p><p>我们还可以通过<code>spring.config.location</code>来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><pre class=" language-cmd"><code class="language-cmd">java -jar spring-boot-config.jar --spring.config.location=D:/application.properties</code></pre><h2 id="6、自动配置原理"><a href="#6、自动配置原理" class="headerlink" title="6、自动配置原理"></a>6、自动配置原理</h2><h3 id="6-1、自动配置原理"><a href="#6-1、自动配置原理" class="headerlink" title="6.1、自动配置原理"></a>6.1、自动配置原理</h3><blockquote><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；</span>  <span class="token comment" spellcheck="true">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span>  <span class="token comment" spellcheck="true">//并把HttpProperties加入到ioc容器中</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解</span>  <span class="token comment" spellcheck="true">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span>  <span class="token comment" spellcheck="true">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span>  <span class="token comment" spellcheck="true">//如果不存在，判断也是成立的</span>  <span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span>    value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"enabled"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Encoding properties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>    <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//。。。。。。。</span><span class="token punctuation">}</span> </code></pre><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProperties</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// .....</span><span class="token punctuation">}</span> </code></pre><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="/2020/08/02/springboot/image-20200720125329518.png" alt="image-20200720125329518" loading="lazy"></p><p><strong>这就是自动装配的原理！</strong></p><h3 id="6-2、了解-Conditional"><a href="#6-2、了解-Conditional" class="headerlink" title="6.2、了解@Conditional"></a>6.2、了解@Conditional</h3><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><ul><li><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p></li></ul><p><img src="/2020/08/02/springboot/image-20200720125519708.png" alt="image-20200720125519708" loading="lazy"></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><ul><li><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#开启springboot的调试类</span><span class="token attr-name">debug</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><ul><li><p>Positive matches:（自动配置类启用的：正匹配）</p></li><li><p>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</p></li><li><p>Unconditional classes: （没有条件的类）</p></li></ul><p>【演示：查看输出的日志】</p><p>掌握吸收理解原理，即可以不变应万变！</p></li></ul><h3 id="6-3、小结"><a href="#6-3、小结" class="headerlink" title="6.3、小结"></a>6.3、小结</h3><ol><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</li><li>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</li></ol><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h2 id="7、SpringBoot-Web开发"><a href="#7、SpringBoot-Web开发" class="headerlink" title="7、SpringBoot Web开发"></a>7、SpringBoot Web开发</h2><blockquote><p>一般都是可以直接双击<code>Shift</code>按键，进行XXX Properties进行搜索查看</p></blockquote><h3 id="7-1、导入静态资源"><a href="#7-1、导入静态资源" class="headerlink" title="7.1、导入静态资源"></a>7.1、导入静态资源</h3><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><ol><li>新建项目<code>springboot-03-web</code></li><li>环境测试</li></ol><h4 id="2、分析源码"><a href="#2、分析源码" class="headerlink" title="2、分析源码"></a>2、分析源码</h4><p>进入<code>WebMvvcAutoConfiguration.java</code>程序，找到读取资源的方法</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><blockquote><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p></blockquote><p>有一个方法：<code>addResourceHandlers </code>添加资源处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 已禁用默认资源处理</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 缓存控制</span>    Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// webjars 配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 静态资源配置</span>    String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200720180309065.png" alt="image-20200720180309065" loading="lazy"></p><p>读一下源代码：比如所有的<code> /webjars/**</code> ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</p><blockquote><p>什么是webjars 呢？</p></blockquote><p><code>Webjars</code>本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p><p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> </p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p><img src="/2020/08/02/springboot/image-20200720163323208.png" alt="image-20200720163323208" loading="lazy"></p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：</p><pre><code>http://localhost:8080/webjars/jquery/3.4.1/jquery.js</code></pre><p><img src="/2020/08/02/springboot/image-20200720163335697.png" alt="image-20200720163335697" loading="lazy"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote><p>那我们项目中要是使用自己的静态资源该怎么导入呢？</p></blockquote><p>我们去找<code>staticPathPattern</code>发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 <code>resourceProperties </code>这个类，我们可以点进去看一下分析：</p><p>（也可以直接双击<code>Shift</code>按键，搜索<code>ResourceProperties</code>进行查看）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 进入方法</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 找到对应的值</span><span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> CLASSPATH_RESOURCE_LOCATIONS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 找到路径</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/springboot/image-20200720180445254.png" alt="image-20200720180445254" loading="lazy"></p><p><code>ResourceProperties </code>可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><pre class=" language-java"><code class="language-java"><span class="token string">"classpath:/META-INF/resources/"</span><span class="token string">"classpath:/resources/"</span><span class="token string">"classpath:/static/"</span><span class="token string">"classpath:/public/"</span></code></pre><p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><blockquote><h4 id="即resoures在目录下的（可以在每个目录下创建1-js-进行访问测试一下）"><a href="#即resoures在目录下的（可以在每个目录下创建1-js-进行访问测试一下）" class="headerlink" title="即resoures在目录下的（可以在每个目录下创建1.js 进行访问测试一下）"></a>即<code>resoures</code>在目录下的（可以在每个目录下创建1.js 进行访问测试一下）</h4></blockquote><p><img src="/2020/08/02/springboot/image-20200720154331009.png" alt="image-20200720154331009" loading="lazy"></p><ul><li>public （优先级最低）</li><li>resources （优先级最高）</li><li>static  （优先级第二）</li></ul><p>优先级：resources &gt; static  &gt; public </p><h3 id="7-2、设置首页和图标"><a href="#7-2、设置首页和图标" class="headerlink" title="7.2、设置首页和图标"></a>7.2、设置首页和图标</h3><blockquote><p>首页</p></blockquote><ol><li><p>依然进入<code>WebMvvcAutoConfiguration.java</code>程序查找</p></li><li><p>寻找到关于<code>index</code>的代码块</p><p><img src="/2020/08/02/springboot/image-20200720180801273.png" alt="image-20200720180801273" loading="lazy"></p></li><li><p>然后点进去<code>ResourceLoader</code>进行查看，只需要放在<strong>静态资源文件夹下即可</strong></p><p><img src="/2020/08/02/springboot/image-20200720180942141.png" alt="image-20200720180942141" loading="lazy"></p></li><li><p><strong>所以只需要在静态资源文件夹上创建<code>index.html</code>页面即可</strong></p><p><img src="/2020/08/02/springboot/image-20200720181757995.png" alt="image-20200720181757995" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200720181807117.png" alt="image-20200720181807117" loading="lazy"></p></li></ol><blockquote><p>图标（新版本已经不存在了）</p></blockquote><p>图标需要在2.1.7版本中使用，在新版本中找不到需要降级</p><p><img src="/2020/08/02/springboot/image-20200720155229678.png" alt="image-20200720155229678" loading="lazy"></p><ol><li><p>依然进入<code>WebMvvcAutoConfiguration.java</code>程序，找到关于<code>icon</code>的代码块</p><p><img src="/2020/08/02/springboot/image-20200720155340531.png" alt="image-20200720155340531" loading="lazy"></p></li><li><p>所以只需要在静态资源文件夹下面创建一个名为<code>favicon.icon</code>图片文件即可</p></li><li><p>然后关闭使用默认的图标</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 关闭默认图标</span><span class="token attr-name">spring.mvc.favicon.enable</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre></li><li><p>启动浏览器进行查看</p></li></ol><blockquote><p>图标新方法</p></blockquote><ol><li><p>将一个图片命名为favicon.ico</p></li><li><p>将ico图标放在<code>resources/static</code>目录下，名字是favicon.ico</p></li><li><p>在html文件中引入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>搞定。现在发现还挺简单的（在配置文件中更改spring.mvc.favicon.enbaled=false现在已经不能用了）</p><p><img src="/2020/08/02/springboot/image-20200720182327589.png" alt="image-20200720182327589" loading="lazy"></p></li></ol><h3 id="7-3、模板引擎Thymeleaf"><a href="#7-3、模板引擎Thymeleaf" class="headerlink" title="7.3、模板引擎Thymeleaf"></a>7.3、模板引擎Thymeleaf</h3><h4 id="1、引入Thymeleaf"><a href="#1、引入Thymeleaf" class="headerlink" title="1、引入Thymeleaf"></a>1、引入Thymeleaf</h4><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--thymeleaf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2、Thymeleaf分析"><a href="#2、Thymeleaf分析" class="headerlink" title="2、Thymeleaf分析"></a>2、Thymeleaf分析</h4><blockquote><p>通过全局搜索 <code>ThymeleafProperties</code>进入对应程序查看</p></blockquote><ol><li><p>查看源码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplateLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String prefix <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String suffix <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String mode <span class="token operator">=</span> <span class="token string">"HTML"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset encoding<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200720183252414.png" alt="image-20200720183252414" loading="lazy"></p><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p></li><li><p>模板放在<code>templatees</code>目录下即可</p></li></ol><h4 id="3、跳转测试"><a href="#3、跳转测试" class="headerlink" title="3、跳转测试"></a>3、跳转测试</h4><ol><li><p>编写一个TestController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写一个测试页面  test.html 放在 templates 目录下</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动项目请求测试</p><p><img src="/2020/08/02/springboot/image-20200720184621181.png" alt="image-20200720184621181" loading="lazy"></p></li></ol><h4 id="4、Thymeleaf-语法学习"><a href="#4、Thymeleaf-语法学习" class="headerlink" title="4、Thymeleaf 语法学习"></a>4、Thymeleaf 语法学习</h4><blockquote><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p></blockquote><p><img src="/2020/08/02/springboot/image-20200721124028997-1595341657328.png" alt="image-20200721124028997" loading="lazy"></p><ol><li><p>使用方法<code>th:元素类</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ home.welcome} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to our grocery store!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><p><img src="/2020/08/02/springboot/image-20200720162358140.png" alt="image-20200720162358140" loading="lazy"></p><p><strong>类别：</strong></p><ol><li><p>th:text  输出字符串</p></li><li><p>th:utext  可以转换html标签</p></li><li><p>遍历：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:${ users} <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ user} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li><li><p>行外写法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:${ users} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[ ${ user}  ]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li><li><p>国际语言</p><pre class=" language-html"><code class="language-html">#{ login.remember} </code></pre></li><li><p>判断是否为空</p><pre class=" language-html"><code class="language-html">th:if="${ not #strings.isEmpty(msg)} "</code></pre></li><li><p>提取公共列表</p><ul><li><p><code>th:fragment=&quot;sidebar&quot;</code></p></li><li><p><code>th:replace=&quot;~{ commons/commons::sidebar} &quot;</code></p><p><code>~{ 路径/文件名 ::  定义的名称} </code></p></li></ul></li><li><p>设置时间格式<code>${ #dates.format(emp.getBirth(), &#39;yyyy-MM-dd HH:mm:ss&#39;)} </code></p></li></ol><h4 id="5、带参数测试"><a href="#5、带参数测试" class="headerlink" title="5、带参数测试"></a>5、带参数测试</h4><ol><li><p>只带一个参数</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>获取参数</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ msg} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>带数组</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token string">"小黄"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>获取数组</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:${ users} <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ user} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="7-4、装配扩展SpringMVC"><a href="#7-4、装配扩展SpringMVC" class="headerlink" title="7.4、装配扩展SpringMVC"></a>7.4、装配扩展SpringMVC</h3><h4 id="1、官网阅读"><a href="#1、官网阅读" class="headerlink" title="1、官网阅读"></a>1、官网阅读</h4><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><p><img src="/2020/08/02/springboot/image-20200720165111519.png" alt="image-20200720165111519" loading="lazy"></p><h4 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h4><ol><li><p>在<code>config</code>目录下创建一个<code>MyMvcConfig.java</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扩展SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre></li><li><p>写一个视图解析器，实现<code>ViewResolver</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扩展SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//放到bean中</span>    <span class="token keyword">public</span> ViewResolver <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>怎么看我们自己写的视图解析器有没有起作用呢？</p><p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="/2020/08/02/springboot/image-20200720212047046.png" alt="image-20200720212047046" loading="lazy"></p></li><li><p>我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；找到this</p><p><img src="/2020/08/02/springboot/image-20200720170148662.png" alt="image-20200720170148662" loading="lazy"></p><p>找到视图解析器，我们看到我们自己定义的就在这里了；在<code>viewResolvers</code>目录下</p><p><img src="/2020/08/02/springboot/image-20200720212359063.png" alt="image-20200720212359063" loading="lazy"></p><p>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p></li></ol><h4 id="3、转换器和格式化器"><a href="#3、转换器和格式化器" class="headerlink" title="3、转换器和格式化器"></a>3、转换器和格式化器</h4><ol><li><p>找到格式化转换器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FormattingConversionService <span class="token function">mvcConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 拿到配置文件中的格式化规则</span>    WebConversionService conversionService <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">WebConversionService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addFormatters</span><span class="token punctuation">(</span>conversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200720220132963.png" alt="image-20200720220132963" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200720220428144.png" alt="image-20200720220428144" loading="lazy"></p></li><li><p>点击去：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span><span class="token annotation punctuation">@DeprecatedConfigurationProperty</span><span class="token punctuation">(</span>replacement <span class="token operator">=</span> <span class="token string">"spring.mvc.format.date"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDateFormat</span><span class="token punctuation">(</span>String dateFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*** Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.*/</span><span class="token keyword">private</span> String dateTime<span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/springboot/image-20200720220526096.png" alt="image-20200720220526096" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200720220352754.png" alt="image-20200720220352754" loading="lazy"></p></li></ol><p>   可以看到在我们的Properties文件中，我们可以进行自动配置它！</p><p>   如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：(奇怪的是这没有生效)</p><p>   <img src="/2020/08/02/springboot/image-20200720222511746.png" alt="image-20200720222511746" loading="lazy"></p><h4 id="4、视图跳转"><a href="#4、视图跳转" class="headerlink" title="4、视图跳转"></a>4、视图跳转</h4><blockquote><p>我们要做的就是编写一个<code>@Configuration</code>注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p></blockquote><ol><li>使用<code>@Configuration</code>注解</li><li>实现<code>WebMvcConfigurer</code>接口</li><li>实现<code>addViewControllers</code>方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span><span class="token comment" spellcheck="true">//可以使用自定义类扩展MVC的功能</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig02</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 浏览器发送/test,就会跳转到test页面；</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>我们去浏览器访问一下：</p><p><img src="/2020/08/02/springboot/image-20200720231843551.png" alt="image-20200720231843551" loading="lazy"></p><p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><h4 id="5、全面接管SpringMVC"><a href="#5、全面接管SpringMVC" class="headerlink" title="5、全面接管SpringMVC"></a>5、全面接管SpringMVC</h4><p>官方文档：</p><pre class=" language-tex"><code class="language-tex">If you want to take complete control of Spring MVCyou can add your own @Configuration annotated with @EnableWebMvc.</code></pre><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p><p>只需在我们的配置类中要加一个<code>@EnableWebMvc</code>。</p><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p><blockquote><h4 id="不加注解之前，访问首页："><a href="#不加注解之前，访问首页：" class="headerlink" title="不加注解之前，访问首页："></a>不加注解之前，访问首页：</h4></blockquote><p><img src="/2020/08/02/springboot/image-20200720232107383.png" alt="image-20200720232107383" loading="lazy"></p><blockquote><h4 id="给配置类加上注解：-EnableWebMvc"><a href="#给配置类加上注解：-EnableWebMvc" class="headerlink" title="给配置类加上注解：@EnableWebMvc"></a>给配置类加上注解：<code>@EnableWebMvc</code></h4></blockquote><p><img src="/2020/08/02/springboot/image-20200720232021334.png" alt="image-20200720232021334" loading="lazy"></p><p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p><p><strong>原因：</strong></p><ol><li><p>点进去<code>@EnableWebMvc</code>这里发现它是导入了一个类，我们可以继续进去看</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre></li><li><p>它继承了一个父类 <code>WebMvcConfigurationSupport</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span> </code></pre></li><li><p>我们来回顾一下Webmvc自动配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> TaskExecutionAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200720232502878.png" alt="image-20200720232502878" loading="lazy"></p><p>总结一句话：<code>@EnableWebMvc</code>将<code>WebMvcConfigurationSupport</code>组件导入进来了；所以自动配置就失效了。</p><p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p><p><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~</strong></p></li></ol><h2 id="8、整合JDBC"><a href="#8、整合JDBC" class="headerlink" title="8、整合JDBC"></a>8、整合JDBC</h2><h3 id="8-1、SpringData简介"><a href="#8-1、SpringData简介" class="headerlink" title="8.1、SpringData简介"></a>8.1、SpringData简介</h3><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器 ：可以参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><h3 id="8-2、整合JDBC"><a href="#8-2、整合JDBC" class="headerlink" title="8.2、整合JDBC"></a>8.2、整合JDBC</h3><ol><li><p>新建SpringBoot项目<code>springboot-04-jdbc</code>，导入相应模块</p><p><img src="/2020/08/02/springboot/image-20200724123329817.png" alt="image-20200724123329817" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200724123353460.png" alt="image-20200724123353460" loading="lazy"></p></li><li><p>清理项目文件</p><p><img src="/2020/08/02/springboot/image-20200724123602683.png" alt="image-20200724123602683" loading="lazy"></p></li><li><p>编写<code>application.yml</code>文件接数据库，报了如下错误</p><p><img src="/2020/08/02/springboot/image-20200724124804713.png" alt="image-20200724124804713" loading="lazy"></p><p>其实这个问题是由于MySQL 这个jar 包依赖类型默认是runtime ，也就是说只有运行时生效，所以虽然这里报错，但是不影响你代码运行。参考网站：<a href="https://blog.csdn.net/hadues/article/details/82354658">https://blog.csdn.net/hadues/article/details/82354658</a></p><p>解决方法：修改导入的依赖</p><p><img src="/2020/08/02/springboot/image-20200724125302673.png" alt="image-20200724125302673" loading="lazy"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04JdbcApplicationTests</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 看一下默认的数据源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200724125715138.png" alt="image-20200724125715138" loading="lazy"></p><p>默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource</p></li><li><p>全局搜索进入<code>DataSourceAutoConfiguration</code>，查看<code>PooledDataSourceConfiguration</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  DataSourceConfiguration<span class="token punctuation">.</span>Hikari<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceConfiguration<span class="token punctuation">.</span>Dbcp2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceJmxConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PooledDataSourceConfiguration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre><blockquote><p>可以看到，这里默认实用的是<code>DataSourceConfiguration.Hikari.class</code>数据源，HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</p><p>可以使用 spring.datasource.type 指定自定义的数据源类型</p></blockquote></li></ol><h3 id="8-3、JDBCTemplate"><a href="#8-3、JDBCTemplate" class="headerlink" title="8.3、JDBCTemplate"></a>8.3、JDBCTemplate</h3><ol><li>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</li><li>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</li><li>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</li><li>SpringBoot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</li><li>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</li></ol><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。 </li></ul><p><strong>测试</strong></p><ol><li><p>编写一个Controllerr，注入 jdbcTemplate，编写测试方法进行访问测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">jdbcController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate     * JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作     * 还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接     */</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全部用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 新增一个用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         String sql <span class="token operator">=</span> <span class="token string">"insert into user(id, name, pwd) values(9, '晓江', '1234')"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"insert ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 修改用户信息</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"update/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         String sql <span class="token operator">=</span> <span class="token string">"update user set name=?,pwd=? where id="</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"晓江2"</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"delete/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         String sql <span class="token operator">=</span> <span class="token string">"delete from user where id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试请求，结果正常</p><p><img src="/2020/08/02/springboot/image-20200724131917857.png" alt="image-20200724131917857" loading="lazy"></p><p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p></li></ol><h2 id="9、整合Druid"><a href="#9、整合Druid" class="headerlink" title="9、整合Druid"></a>9、整合Druid</h2><h3 id="9-1、Druid简介"><a href="#9-1、Druid简介" class="headerlink" title="9.1、Druid简介"></a>9.1、Druid简介</h3><blockquote><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p></blockquote><p>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</p><p><img src="/2020/08/02/springboot/640.webp" alt="img" loading="lazy"></p><p><img src="/2020/08/02/springboot/640-1595568918456.webp" alt="img" loading="lazy"></p><p><img src="/2020/08/02/springboot/640-1595568924094.webp" alt="img" loading="lazy"></p><h3 id="9-2、配置数据源"><a href="#9-2、配置数据源" class="headerlink" title="9.2、配置数据源"></a>9.2、配置数据源</h3><ol><li><p>添加上Druid数据源依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>切换数据源，因为Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以通过 <code>spring.datasource.type</code> 指定数据源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource <span class="token comment" spellcheck="true"># 自定义数据源</span></code></pre></li><li><p>数据源切换之后，运行刚才的测试程序，获取<code>DataSource</code></p><p><img src="/2020/08/02/springboot/image-20200724134253131.png" alt="image-20200724134253131" loading="lazy"></p><p>可以看到已经切换到Druid</p></li><li><p>设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource <span class="token comment" spellcheck="true"># 自定义数据源</span>    <span class="token comment" spellcheck="true">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span>    <span class="token comment" spellcheck="true">#druid 数据源专有配置</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span>    <span class="token comment" spellcheck="true">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span>    <span class="token comment" spellcheck="true">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre></li><li><p>导入Log4j 的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*    将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建    绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效    @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中    前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中  */</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>去测试类中测试一下；看是否成功！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04JdbcApplicationTests</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 看一下默认的数据源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DruidDataSource<span class="token punctuation">)</span>dataSource<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源最大连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getMaxActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源初始化连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getInitialSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springboot/image-20200724135806742.png" alt="image-20200724135806742" loading="lazy"></p></li></ol><h3 id="9-3、配置Druid数据源监控"><a href="#9-3、配置Druid数据源监控" class="headerlink" title="9.3、配置Druid数据源监控"></a>9.3、配置Druid数据源监控</h3><blockquote><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p></blockquote><ol><li><p>所以第一步需要在<code>config</code>中设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置 Druid 监控管理后台的Servlet；</span><span class="token comment" spellcheck="true">//内置 Servlet 容器时没有web.xml文件，所以使用 SpringBoot 的注册 Servlet 方式</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet</span>    <span class="token comment" spellcheck="true">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录账号</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录密码</span>    <span class="token comment" spellcheck="true">//后台允许谁可以访问</span>    <span class="token comment" spellcheck="true">//initParams.put("allow", "localhost")：表示只有本机可以访问</span>    <span class="token comment" spellcheck="true">//为空或者为null时，表示允许所有访问</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//deny：Druid 后台拒绝谁访问</span>    <span class="token comment" spellcheck="true">//initParams.put("lxj", "192.168.1.20");表示禁止此ip访问</span>    <span class="token comment" spellcheck="true">//设置初始化参数</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>配置完毕后，我们可以访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="/2020/08/02/springboot/image-20200724140727180.png" alt="image-20200724140727180" loading="lazy"></p><p><img src="/2020/08/02/springboot/image-20200724140807518.png" alt="image-20200724140807518" loading="lazy"></p></li><li><p>当我们再次运行sql查询的时候，这里可以检测到</p><p><img src="/2020/08/02/springboot/image-20200724140929304.png" alt="image-20200724140929304" loading="lazy"></p></li><li><p>配置 Druid web 监控 filter 过滤器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置 Druid 监控 之  web 监控的 filter</span><span class="token comment" spellcheck="true">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*,/jdbc/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"/*" 表示过滤所有请求</span>    bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h2 id="10、整合MyBatis"><a href="#10、整合MyBatis" class="headerlink" title="10、整合MyBatis"></a>10、整合MyBatis</h2><blockquote><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1</a></p></blockquote><p><img src="/2020/08/02/springboot/image-20200724141412283.png" alt="image-20200724141412283" loading="lazy"></p><p><strong>整合测试</strong></p><ol><li><p>导入 MyBatis 的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置数据库连接信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true</code></pre></li><li><p>测试数据库是否连接成功</p></li><li><p>创建实体类，导入 Lombok</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>创建<code>mapper</code>目录以及对应的 Mapper 接口，需要导入两个注解@Mapper、@Repository</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 先获取Mapper</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全部用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUsers"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 根据id查询用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUserById/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUserById/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         userMapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 增加用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个用户</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"addUser ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 修改用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个用户</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在<code>resources</code>目录下创建<code>mybatis</code>文件夹，然后创建<code>mapper</code>文件夹，最后在里面创建对应的<code>UserMapper.xml</code>映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id = #{ id}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from user where id = #{ id}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user(id, name, pwd) values (#{ id} , #{ name} , #{ pwd} )    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set name = #{ name} , pwd = #{ pwd}  where id = #{ id}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>在<code>application.yml</code>配置文件中，增加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 整合MyBatis</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xj.pojo  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml</code></pre></li><li><p>编写Controller类进行测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 先获取Mapper</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全部用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUsers"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 根据id查询用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUserById/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUserById/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>         userMapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 增加用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个用户</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"addUser ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 修改用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个用户</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"晓江4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>项目结构</p><p><img src="/2020/08/02/springboot/image-20200724150106195.png" alt="image-20200724150106195" loading="lazy"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docsify</title>
      <link href="/2020/08/02/docsify/"/>
      <url>/2020/08/02/docsify/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h2><h2 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p>可以将本地的MarkDown文件转换成一个在线文档的形式，可以方便的同步自己的笔记。</p><h3 id="1-2、环境搭建"><a href="#1-2、环境搭建" class="headerlink" title="1.2、环境搭建"></a>1.2、环境搭建</h3><h4 id="1、nodejs安装"><a href="#1、nodejs安装" class="headerlink" title="1、nodejs安装"></a>1、nodejs安装</h4><ol><li><p>Node.js:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="/2020/08/02/docsify/image-20200717142611420.png" alt="image-20200717142611420" loading="lazy"></p></li><li><p>下载之后一直点下一步就可以了</p></li><li><p>确定安装成功</p><ul><li>cmd下输入<code>node -v</code>，查看是否打印出版本号即可</li><li>cmd下输入<code>npm -v</code>，查看是否打印出版本号即可</li></ul></li></ol><h4 id="2、docsify安装和使用"><a href="#2、docsify安装和使用" class="headerlink" title="2、docsify安装和使用"></a>2、docsify安装和使用</h4><blockquote><p>以下命令都是在命令窗口运行</p></blockquote><ol><li><p>建议<code>docsify-cli</code>全局安装，这有助于在本地初始化和预览网站。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i docsify-cli -g</code></pre></li><li><p><strong>切换到需要存放文件的目录下</strong>，要在<code>./docs</code>子目录中编写文档，则可以使用<code>init</code>命令。</p><pre class=" language-bash"><code class="language-bash">docsify init ./docs</code></pre></li><li><p>启动服务，使用运行本地服务器<code>docsify serve</code>。您可以在上的浏览器中预览站点<code>http://localhost:3000</code>。</p><pre class=" language-bash"><code class="language-bash">docsify serve docs</code></pre></li><li><p>然后就可以在浏览器上看到目录下<code>README.md</code>的内容了</p><p><img src="/2020/08/02/docsify/image-20200722120515205.png" alt="image-20200722120515205" loading="lazy"></p></li></ol><h3 id="1-3、指令用法"><a href="#1-3、指令用法" class="headerlink" title="1.3、指令用法"></a>1.3、指令用法</h3><h4 id="init-命令"><a href="#init-命令" class="headerlink" title="init 命令"></a><code>init</code> 命令</h4><p>使用<code>init</code>生成您的文档。</p><pre class=" language-bash"><code class="language-bash">docsify init <span class="token operator">&lt;</span>路径<span class="token operator">></span> <span class="token punctuation">[</span>--local false<span class="token punctuation">]</span> <span class="token punctuation">[</span>--theme vue<span class="token punctuation">]</span>＃证明我<span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">[</span>--local false<span class="token punctuation">]</span> <span class="token punctuation">[</span>--theme vue<span class="token punctuation">]</span></code></pre><p>路径<code>&lt;path&gt;</code>默认为当前目录。使用相对路径，例如<code>./docs</code>（或<code>docs</code>）。</p><p><code>--local</code>选项：</p><ul><li>速记： <code>-l</code></li><li>类型：布尔值</li><li>默认： <code>false</code></li><li>说明：复制<code>docsify</code>文件的文档路径，默认为<code>false</code>使用<code>unpkg.com</code>作为内容递送网络（CDN）。要明确将此选项设置为<code>false</code>use <code>--no-local</code>。</li></ul><p><code>--theme</code>选项：</p><ul><li>速记： <code>-t</code></li><li>类型：字符串</li><li>默认： <code>vue</code></li><li>说明：选择一个主题，默认为<code>vue</code>，其他的选择是<code>buble</code>，<code>dark</code>和<code>pure</code>。</li></ul><h4 id="serve-命令"><a href="#serve-命令" class="headerlink" title="serve 命令"></a><code>serve</code> 命令</h4><p><code>localhost</code>使用livereload 运行服务器。</p><pre class=" language-bash"><code class="language-bash">docsify serve <span class="token operator">&lt;</span>路径<span class="token operator">></span> <span class="token punctuation">[</span>- 打开false<span class="token punctuation">]</span> <span class="token punctuation">[</span>-端口3000<span class="token punctuation">]</span>＃ docsify小号<span class="token operator">&lt;</span>路径<span class="token operator">></span> <span class="token punctuation">[</span>--open假<span class="token punctuation">]</span> <span class="token punctuation">[</span>--port 3000<span class="token punctuation">]</span></code></pre><p><code>--open</code> 选项：</p><ul><li>速记： <code>-o</code></li><li>类型：布尔值</li><li>默认： <code>false</code></li><li>说明：在默认浏览器中打开文档，默认为<code>false</code>。要明确将此选项设置为<code>false</code>use <code>--no-open</code>。</li></ul><p><code>--port</code>选项：</p><ul><li>速记： <code>-p</code></li><li>类型：数字</li><li>默认： <code>3000</code></li><li>描述：选择一个监听端口，默认为<code>3000</code>。</li></ul><h3 id="1-4、配置左侧导航栏"><a href="#1-4、配置左侧导航栏" class="headerlink" title="1.4、配置左侧导航栏"></a>1.4、配置左侧导航栏</h3><ol><li><p>在目录下新建一个<code>_sidebar.md</code> 的md文件，内容如下(下列的md文件也是自己导入的)：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> SSM框架  <span class="token list punctuation">-</span> <span class="token url">[Spring](blog/Spring.md)</span>  <span class="token list punctuation">-</span> <span class="token url">[SpringMVC](blog/SpringMVC.md)</span>  <span class="token list punctuation">-</span> <span class="token url">[MyBatis](blog/MyBatis.md)</span>  <span class="token list punctuation">-</span> <span class="token url">[SSM整合](blog/SSM.md)</span></code></pre></li><li><p>在<code>index.html</code>文件中配置一下。在内嵌的js脚本中加上下面这句：</p><pre class=" language-bash"><code class="language-bash">loadSidebar: <span class="token boolean">true</span></code></pre></li><li><p>效果</p><p><img src="/2020/08/02/docsify/image-20200722134910095.png" alt="image-20200722134910095" loading="lazy"></p></li></ol><h3 id="1-5、配置封面"><a href="#1-5、配置封面" class="headerlink" title="1.5、配置封面"></a>1.5、配置封面</h3><ol><li><p>新建一个 <code>_coverpage.md</code> 的md文件，这里面的内容就是你封面的内容。</p><p><img src="/2020/08/02/docsify/image-20200729145437447.png" alt="image-20200729145437447" loading="lazy"></p></li><li><p>然后在<code>index.xml</code>文件中修改js脚本配置，添加一句：</p><pre class=" language-bash"><code class="language-bash">coverpage: <span class="token boolean">true</span></code></pre></li><li><p>效果如下</p><p><img src="/2020/08/02/docsify/image-20200722135105439.png" alt="image-20200722135105439" loading="lazy"></p></li></ol><h3 id="1-6、首页设置"><a href="#1-6、首页设置" class="headerlink" title="1.6、首页设置"></a>1.6、首页设置</h3><blockquote><p>默认的首页为<code>README.md</code></p><p>如果主页面不想使用README.md里的内容，可以设置homepage=”*.md”</p></blockquote><p><img src="/2020/08/02/docsify/image-20200722135228784.png" alt="image-20200722135228784" loading="lazy"></p><h3 id="1-7、设置图标"><a href="#1-7、设置图标" class="headerlink" title="1.7、设置图标"></a>1.7、设置图标</h3><blockquote><p>直接在页面中导入即可</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="1-8、设置加载文字"><a href="#1-8、设置加载文字" class="headerlink" title="1.8、设置加载文字"></a>1.8、设置加载文字</h3><p>初始化时会显示 <code>Loading...</code> 内容，你可以自定义提示信息。</p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- index.html --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9、增加评论区功能"><a href="#1-9、增加评论区功能" class="headerlink" title="1.9、增加评论区功能"></a>1.9、增加评论区功能</h3><p>参考网站：<a href="https://www.jianshu.com/p/536421eec50c">https://www.jianshu.com/p/536421eec50c</a></p><ol><li><p>申请Gitalk</p><p>申请网址：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p><img src="/2020/08/02/docsify/image-20200726113642846.png" alt="image-20200726113642846" loading="lazy"></p></li><li><p>注册完毕之后，会进入这个界面</p><p><img src="/2020/08/02/docsify/17569167-a0b507528f3b147f.webp" alt="img" loading="lazy"></p></li><li><p>填写对应的信息，修改index文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/gitalk/dist/gitalk.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/docsify/lib/plugins/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/gitalk/dist/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     clientID<span class="token punctuation">:</span> <span class="token string">'刚刚申请下来的ID'</span><span class="token punctuation">,</span>    clientSecret<span class="token punctuation">:</span> <span class="token string">'刚刚申请下来的密码'</span><span class="token punctuation">,</span>    repo<span class="token punctuation">:</span><span class="token string">'仓库名字，用于保存你博客评论的仓库，可以和你的博客是一个仓库'</span><span class="token punctuation">,</span>    owner<span class="token punctuation">:</span>你的Github名字<span class="token punctuation">,</span>    admin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'你的Github名字和其他管理员的名字'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// facebook-like distraction free mode</span>    distractionFreeMode<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span> <span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开<code>index.html</code>文件，把<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</code>，这行代码，添加到<code>&lt;head&gt;...&lt;/head&gt;</code>中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/docsify/lib/themes/vue.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/gitalk/dist/gitalk.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>然后把其他代码，插入到<code>&lt;body&gt;...&lt;/body&gt;</code>中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>正在努力加载中~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'Blog'</span><span class="token punctuation">,</span>      repo<span class="token punctuation">:</span> <span class="token string">'https://github.com/yangyang0126'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//开启github图标</span>     <span class="token operator">**</span><span class="token operator">**</span>    <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--插入“gitalk评论”模块--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/docsify/lib/plugins/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/gitalk/dist/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/md5.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       clientID<span class="token punctuation">:</span> <span class="token string">'1****************6'</span><span class="token punctuation">,</span>      clientSecret<span class="token punctuation">:</span> <span class="token string">'9****************************d'</span><span class="token punctuation">,</span>      repo<span class="token punctuation">:</span> <span class="token string">'blog'</span><span class="token punctuation">,</span>      owner<span class="token punctuation">:</span> <span class="token string">'yangyang0126'</span><span class="token punctuation">,</span>      admin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yangyang0126'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Ensure uniqueness and length less than 50</span>      distractionFreeMode<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// Facebook-like distraction free mode</span>    <span class="token punctuation">}</span> <span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p>网页预览</p><p><img src="/2020/08/02/docsify/image-20200726114010304.png" alt="image-20200726114010304" loading="lazy"></p></li></ol><h3 id="1-10、字数统计"><a href="#1-10、字数统计" class="headerlink" title="1.10、字数统计"></a>1.10、字数统计</h3><p>它提供了统计中文汉字和英文单词的功能，并且排除了一些markdown语法的特殊字符例如*、-等</p><p><strong>Add JS</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/docsify-count/dist/countable.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>Add settings</strong></p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   count<span class="token punctuation">:</span><span class="token punctuation">{</span>     countable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    fontsize<span class="token punctuation">:</span><span class="token string">'0.9em'</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span><span class="token string">'rgb(90,90,90)'</span><span class="token punctuation">,</span>    language<span class="token punctuation">:</span><span class="token string">'chinese'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="1-11、代码块复制"><a href="#1-11、代码块复制" class="headerlink" title="1.11、代码块复制"></a>1.11、代码块复制</h3><p>在所有的代码块上添加一个简单的<code>Click to copy</code>按钮来允许用户从你的文档中轻易地复制代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify-copy-code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>详情可参考 <a href="https://github.com/jperasmus/docsify-copy-code/blob/master/README.md">README.md</a> 。</p><h2 id="2、部署到Github"><a href="#2、部署到Github" class="headerlink" title="2、部署到Github"></a>2、部署到Github</h2><h3 id="2-1、Git安装和使用"><a href="#2-1、Git安装和使用" class="headerlink" title="2.1、Git安装和使用"></a>2.1、Git安装和使用</h3><ol><li><p>下载Git  官方地址为：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p><img src="/2020/08/02/docsify/image-20200722141356002.png" alt="image-20200722141356002" loading="lazy"></p><p>下载速度真的慢啊</p><p><img src="/2020/08/02/docsify/image-20200722141519233.png" alt="image-20200722141356002" loading="lazy"></p></li><li><p>改用百度网盘下载</p><p>链接：<a href="https://pan.baidu.com/s/1xYzeRhAnrv2I6aoEtSp1dw">https://pan.baidu.com/s/1xYzeRhAnrv2I6aoEtSp1dw</a><br>提取码：t3oh</p></li><li><p>下载完之后，双击安装</p><p><img src="/2020/08/02/docsify/image-20200722144545974.png" alt="image-20200722141356002" loading="lazy"></p></li><li><p>选择安装目录</p><p><img src="/2020/08/02/docsify/image-20200722144758193.png" alt="image-20200722144758193" loading="lazy"></p></li><li><p>选择默认即可</p><p><img src="/2020/08/02/docsify/image-20200722144857280.png" alt="image-20200722144857280" loading="lazy"></p></li><li><p>开始菜单目录名设置</p><p><img src="/2020/08/02/docsify/image-20200722144924840.png" alt="image-20200722144924840" loading="lazy"></p></li><li><p>继续下一步</p><p><img src="/2020/08/02/docsify/image-20200722144958349.png" alt="image-20200722144958349" loading="lazy"></p></li><li><p>选择命令行环境</p><p><img src="/2020/08/02/docsify/image-20200722145025001.png" alt="image-20200722145025001" loading="lazy"></p></li><li><p>然后一路默认即可</p><p><img src="/2020/08/02/docsify/image-20200722145104890.png" alt="image-20200722145104890" loading="lazy"></p></li><li><p>安装完成</p><p><img src="/2020/08/02/docsify/image-20200722145146614.png" alt="image-20200722145146614" loading="lazy"></p></li><li><p>检验是否安装成功</p><p>回到电脑桌面，鼠标右击如果看到有两个git单词则安装成功</p><p><img src="/2020/08/02/docsify/image-20200722145237404.png" alt="image-20200722145146614" loading="lazy"></p></li></ol><h3 id="2-2、配置环境变量"><a href="#2-2、配置环境变量" class="headerlink" title="2.2、配置环境变量"></a>2.2、配置环境变量</h3><ol><li><p>打开电脑的高级设置</p></li><li><p>在path环境中添加如下两个环境</p><p><img src="/2020/08/02/docsify/image-20200722150047022.png" alt="image-20200722150047022" loading="lazy"></p><p><img src="/2020/08/02/docsify/image-20200722145948366.png" alt="image-20200722145948366" loading="lazy"></p></li></ol><h3 id="2-3、部署到Github"><a href="#2-3、部署到Github" class="headerlink" title="2.3、部署到Github"></a>2.3、部署到Github</h3><blockquote><p>参考网站：<a href="https://blog.csdn.net/idog149tao/article/details/64123886">https://blog.csdn.net/idog149tao/article/details/64123886</a></p><p>报错参考：<a href="https://blog.csdn.net/qq_36275889/article/details/87968719">https://blog.csdn.net/qq_36275889/article/details/87968719</a></p><p>​                    <a href="https://blog.csdn.net/qq_37811638/article/details/79789647">https://blog.csdn.net/qq_37811638/article/details/79789647</a></p></blockquote><ol><li><p>登录github账号，创建一个仓库<code>myblogs</code></p><p><img src="/2020/08/02/docsify/image-20200722140114598.png" alt="image-20200722140114598" loading="lazy"></p></li><li><p>填写仓库名，选择证书</p><p><img src="/2020/08/02/docsify/image-20200722164705726.png" alt="image-20200722164705726" loading="lazy"></p></li><li><p>复制地址</p><p><img src="/2020/08/02/docsify/image-20200722164744538.png" alt="image-20200722164744538" loading="lazy"></p></li><li><p>在项目目录下右击，选择<code>Git Bash Here</code></p><p><img src="/2020/08/02/docsify/image-20200722173300486.png" alt="image-20200722173300486" loading="lazy"></p></li><li><p>输入一下指令（需要刚才自己复制的网站）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/***/myblog.git</code></pre><p><img src="/2020/08/02/docsify/image-20200722173420877.png" alt="image-20200722173420877" loading="lazy"></p></li><li><p>发现多了一个文件夹</p><p><img src="/2020/08/02/docsify/image-20200722173517380.png" alt="image-20200722173517380" loading="lazy"></p></li><li><p>将原来的文件夹移动到<code>myblog</code>文件夹中</p><p><img src="/2020/08/02/docsify/image-20200722173620414.png" alt="image-20200722173620414" loading="lazy"></p></li><li><p>接着继续输入命令 <code>cd myblog</code>，进入Test文件夹</p><p><img src="/2020/08/02/docsify/image-20200722173705544.png" alt="image-20200722173705544" loading="lazy"></p></li><li><p>接下来依次输入以下代码即可完成其他剩余操作：</p><ul><li><p>git config –global core.autocrlf false</p></li><li><p>git add . </p><p><img src="/2020/08/02/docsify/image-20200722173817967.png" alt="image-20200722173817967" loading="lazy"></p></li><li><p>git config –global user.email “你的注册邮箱”</p></li><li><p>git config –global user.name “用户名”</p></li><li><p>git commit -m “project initialized”</p><p>这时候就会提交一堆文件</p><p><img src="/2020/08/02/docsify/image-20200722174148138.png" alt="image-20200722174148138" loading="lazy"></p></li><li><p>git push -u origin master</p><p>此操作目的是把本地仓库push到github上面，此步骤需要输入帐号和密码</p><p><img src="/2020/08/02/docsify/image-20200722174329959.png" alt="image-20200722174329959" loading="lazy"></p></li></ul></li><li><p>这样只就完成啦，到Github仓库刷新查看，看到文件都成功上传就OK了</p><p><img src="/2020/08/02/docsify/image-20200722174458366.png" alt="image-20200722174458366" loading="lazy"></p></li></ol><h3 id="2-4、使用Github-Pages功能建立站点"><a href="#2-4、使用Github-Pages功能建立站点" class="headerlink" title="2.4、使用Github Pages功能建立站点"></a>2.4、使用Github Pages功能建立站点</h3><ol><li><p>在自己的仓库下，选中 <code>Settings</code> 选项，</p><p><img src="/2020/08/02/docsify/image-20200722162838024.png" alt="image-20200722162838024" loading="lazy"></p></li><li><p>然后鼠标一直向下滚动，直到看到 <code>GitHub Pages</code> 页签，在Source下面选择<code>master branch / docs folder</code> 选项。</p><p><img src="/2020/08/02/docsify/image-20200722163151485.png" alt="image-20200722163151485" loading="lazy"></p></li><li><p>站点访问</p><p><img src="/2020/08/02/docsify/image-20200722163208912.png" alt="image-20200722163208912" loading="lazy"></p></li></ol><h3 id="2-5、绑定SSH公钥"><a href="#2-5、绑定SSH公钥" class="headerlink" title="2.5、绑定SSH公钥"></a>2.5、绑定SSH公钥</h3><ol><li><p>运行git指令</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"19868558241"</span>    // 注册的邮箱或者手机号码</code></pre></li><li><p>然后一直按回车就可以了</p></li><li><p>打开文件夹<code>C:\Users\小江\.ssh</code></p></li><li><p>粘贴自己的公钥</p><p><img src="/2020/08/02/docsify/image-20200801204651491.png" alt="image-20200801204651491" loading="lazy"></p></li><li><p>输入密码确定之后，这个帐户就跟自己的电脑进行绑定了</p><p><img src="/2020/08/02/docsify/image-20200801204740487.png" alt="image-20200801204740487" loading="lazy"></p></li><li><p>有绑定的话，我们就可以使用shh进行连接和上传代码了，这个就无需验证</p><p><img src="/2020/08/02/docsify/image-20200801204849885.png" alt="image-20200801204849885" loading="lazy"></p></li></ol><h3 id="2-6、GitHub删除仓库"><a href="#2-6、GitHub删除仓库" class="headerlink" title="2.6、GitHub删除仓库"></a>2.6、GitHub删除仓库</h3><ol><li><p>进入仓库，点击setting</p></li><li><p>滑动到最下方</p><p><img src="/2020/08/02/docsify/image-20200722163823465.png" alt="image-20200722163823465" loading="lazy"></p></li><li><p>输入指定文字进行删除</p><p><img src="/2020/08/02/docsify/image-20200722163856516.png" alt="image-20200722163856516" loading="lazy"></p></li></ol><h2 id="3、站点域名解析（可以不用）"><a href="#3、站点域名解析（可以不用）" class="headerlink" title="3、站点域名解析（可以不用）"></a>3、站点域名解析（可以不用）</h2><blockquote><p>如果以上步骤之后还出来404错误的时候，我们可以通过自己的域名进行解析使用（需要自己事先购买域名）</p><p>参考网站：<a href="https://blog.csdn.net/tr1912/article/details/80673610">https://blog.csdn.net/tr1912/article/details/80673610</a></p></blockquote><ol><li><p>复制原来的域名</p><p><img src="/2020/08/02/docsify/image-20200722181054157.png" alt="image-20200722181054157" loading="lazy"></p></li><li><p>对域名进行ping</p><p><img src="/2020/08/02/docsify/image-20200722181127067.png" alt="image-20200722181127067" loading="lazy"></p></li><li><p>对自己的域名进行解析</p><p><img src="/2020/08/02/docsify/image-20200722181156976.png" alt="image-20200722181156976" loading="lazy"></p></li><li><p>填入自己的域名，然后进行保存即可</p><p><img src="/2020/08/02/docsify/image-20200722181232338.png" alt="image-20200722181232338" loading="lazy"></p></li><li><p>效果</p><p><img src="/2020/08/02/docsify/image-20200722181247840.png" alt="image-20200722181247840" loading="lazy"></p></li></ol><h2 id="4、更新站点内容"><a href="#4、更新站点内容" class="headerlink" title="4、更新站点内容"></a>4、更新站点内容</h2><blockquote><p>参考网站：<a href="https://blog.csdn.net/weixin_44831963/article/details/105576540">https://blog.csdn.net/weixin_44831963/article/details/105576540</a></p><p><a href="https://blog.csdn.net/weixin_42762089/article/details/87969619">https://blog.csdn.net/weixin_42762089/article/details/87969619</a></p></blockquote><blockquote><p>git pull origin master –allow-unrelated-histories  // 同步本地的内容（反正报错就执行这句然后再按照下面的步骤）</p></blockquote><p>进入仓库目录后按照上面的方法进行即可，修改之后具有延迟</p><ul><li><p>git remote add origin <a href="https://github.com/***/myblog.git">https://github.com/***/myblog.git</a>        // 连接到自己的仓库</p></li><li><p>git add .</p></li><li><p>git status</p></li><li><p>git commit -m “update”</p></li><li><p>git push origin master</p></li><li><p>完成</p><p><img src="/2020/08/02/docsify/image-20200722215104260.png" alt="image-20200722215104260" loading="lazy"></p></li></ul><p><strong>提交报错：</strong>如果出现在路径后面出现类似这样(master|REBASE 1/9)的时候，一般会提交失败，只需要全部跳过即可，这是停留在一个变基的中间，你已经合并了所有的路径，一直使用<code>git rebase --continue</code>跳过即可</p><h2 id="5、Docsify的使用"><a href="#5、Docsify的使用" class="headerlink" title="5、Docsify的使用"></a>5、Docsify的使用</h2><h3 id="5-1、多页文档"><a href="#5-1、多页文档" class="headerlink" title="5.1、多页文档"></a>5.1、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E5%A4%9A%E9%A1%B5%E6%96%87%E6%A1%A3">多页文档</a></h3><p>如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 <code>guide.md</code> 文件，那么对应的路由就是 <code>/#/guide</code>。</p><p>假设你的目录结构如下：</p><pre class=" language-text"><code class="language-text">.└── docs    ├── README.md    ├── guide.md    └── zh-cn        ├── README.md        └── guide.md</code></pre><p>那么对应的访问页面将是</p><pre class=" language-text"><code class="language-text">docs/README.md        => http://domain.comdocs/guide.md         => http://domain.com/guidedocs/zh-cn/README.md  => http://domain.com/zh-cn/docs/zh-cn/guide.md   => http://domain.com/zh-cn/guide</code></pre><h3 id="5-2、定制侧边栏"><a href="#5-2、定制侧边栏" class="headerlink" title="5.2、定制侧边栏"></a>5.2、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E5%AE%9A%E5%88%B6%E4%BE%A7%E8%BE%B9%E6%A0%8F">定制侧边栏</a></h3><p>为了获得侧边栏，您需要创建自己的_sidebar.md，你也可以自定义加载的文件名。默认情况下侧边栏会通过 Markdown 文件自动生成，效果如当前的文档的侧边栏。</p><p>首先配置 <code>loadSidebar</code> 选项，具体配置规则见<a href="https://docsify.js.org/#/zh-cn/configuration?id=loadsidebar">配置项#loadSidebar</a>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     loadSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>接着创建 <code>_sidebar.md</code> 文件，内容如下</p><pre class=" language-markdown"><code class="language-markdown"><span class="token comment" spellcheck="true">&lt;!-- docs/_sidebar.md --></span><span class="token list punctuation">*</span> <span class="token url">[首页](zh-cn/)</span><span class="token list punctuation">*</span> <span class="token url">[指南](zh-cn/guide)</span></code></pre><h3 id="5-3、嵌套的侧边栏"><a href="#5-3、嵌套的侧边栏" class="headerlink" title="5.3、嵌套的侧边栏"></a>5.3、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E5%B5%8C%E5%A5%97%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F">嵌套的侧边栏</a></h3><p><strong>你可能想要浏览到一个目录时，只显示这个目录自己的侧边栏，这可以通过在每个文件夹中添加一个 <code>_sidebar.md</code> 文件来实现。</strong></p><p><code>_sidebar.md</code> 的加载逻辑是从每层目录下获取文件，如果当前目录不存在该文件则回退到上一级目录。例如当前路径为 <code>/zh-cn/more-pages</code> 则从 <code>/zh-cn/_sidebar.md</code> 获取文件，如果不存在则从 <code>/_sidebar.md</code> 获取。</p><p>当然你也可以配置 <code>alias</code> 避免不必要的回退过程。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     loadSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token string">'/.*/_sidebar.md'</span><span class="token punctuation">:</span> <span class="token string">'/_sidebar.md'</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>你可以在一个子目录中创建一个 <code>README.md</code> 文件来作为路由的默认网页。</p><h3 id="5-4、用侧边栏中选定的条目名称作为页面标题"><a href="#5-4、用侧边栏中选定的条目名称作为页面标题" class="headerlink" title="5.4、用侧边栏中选定的条目名称作为页面标题"></a>5.4、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E7%94%A8%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%AD%E9%80%89%E5%AE%9A%E7%9A%84%E6%9D%A1%E7%9B%AE%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E9%A1%B5%E9%9D%A2%E6%A0%87%E9%A2%98">用侧边栏中选定的条目名称作为页面标题</a></h3><p>一个页面的 <code>title</code> 标签是由侧边栏中选中条目的名称所生成的。为了更好的 SEO ，你可以在文件名后面指定页面标题。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token comment" spellcheck="true">&lt;!-- docs/_sidebar.md --></span><span class="token list punctuation">*</span> <span class="token url">[Home](/)</span><span class="token list punctuation">*</span> <span class="token url">[Guide](guide.md <span class="token string">"The greatest guide in the world"</span>)</span></code></pre><h3 id="5-5、显示目录"><a href="#5-5、显示目录" class="headerlink" title="5.5、显示目录"></a>5.5、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E6%98%BE%E7%A4%BA%E7%9B%AE%E5%BD%95">显示目录</a></h3><p>自定义侧边栏同时也可以开启目录功能。设置 <code>subMaxLevel</code> 配置项，具体介绍见 <a href="https://docsify.js.org/#/zh-cn/configuration?id=sub-max-level">配置项#sub-max-level</a>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     loadSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    subMaxLevel<span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="5-6、忽略副标题"><a href="#5-6、忽略副标题" class="headerlink" title="5.6、忽略副标题"></a>5.6、<a href="https://docsify.js.org/#/zh-cn/more-pages?id=%E5%BF%BD%E7%95%A5%E5%89%AF%E6%A0%87%E9%A2%98">忽略副标题</a></h3><p>当设置了 <code>subMaxLevel</code> 时，默认情况下每个标题都会自动添加到目录中。如果你想忽略特定的标题，可以给它添加 <code>{ docsify-ignore} </code> 。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Getting Started</span><span class="token title important"><span class="token punctuation">##</span> Header { docsify-ignore} </span>该标题不会出现在侧边栏的目录中。</code></pre><p>要忽略特定页面上的所有标题，你可以在页面的第一个标题上使用 <code>{ docsify-ignore-all} </code> 。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 入门 { docsify-ignore-all} </span><span class="token title important"><span class="token punctuation">##</span> 标题</span>该标题不会出现在侧边栏的目录中。</code></pre><p>在使用时， <code>{ docsify-ignore} </code> 和 <code>{ docsify-ignore-all} </code> 都不会在页面上呈现。</p><h3 id="5-7、自定义导航栏"><a href="#5-7、自定义导航栏" class="headerlink" title="5.7、自定义导航栏"></a>5.7、自定义导航栏</h3><ol><li><p><a href="https://docsify.js.org/#/zh-cn/custom-navbar?id=html">HTML</a></p><p>如果你需要定制导航栏，可以用 HTML 创建一个导航栏。</p><p>注意：文档的链接都要以 <code>#/</code> 开头。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>EN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/zh-cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p><a href="https://docsify.js.org/#/zh-cn/custom-navbar?id=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a></p><p>那我们可以通过 Markdown 文件来配置导航。首先配置 <code>loadNavbar</code>，默认加载的文件为 <code>_navbar.md</code>。具体配置规则见<a href="https://docsify.js.org/#/configuration?id=loadnavbar">配置项#loadNavbar</a>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     loadNavbar<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- _navbar.md --></span></code></pre></li></ol><pre class=" language-markdown"><code class="language-markdown">   <span class="token list punctuation">*</span> <span class="token url">[En](/)</span>   <span class="token list punctuation">*</span> <span class="token url">[中文](/zh-cn/)</span></code></pre><h4 id="导航栏嵌套"><a href="#导航栏嵌套" class="headerlink" title="导航栏嵌套"></a><a href="https://docsify.js.org/#/zh-cn/custom-navbar?id=%E5%B5%8C%E5%A5%97">导航栏嵌套</a></h4><p>   如果导航内容过多，可以写成嵌套的列表，会被渲染成下拉列表的形式。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token comment" spellcheck="true">&lt;!-- _navbar.md --></span><span class="token list punctuation">*</span> 入门  <span class="token list punctuation">*</span> <span class="token url">[快速开始](zh-cn/quickstart.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[多页文档](zh-cn/more-pages.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[定制导航栏](zh-cn/custom-navbar.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[封面](zh-cn/cover.md)</span><span class="token list punctuation">*</span> 配置  <span class="token list punctuation">*</span> <span class="token url">[配置项](zh-cn/configuration.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[主题](zh-cn/themes.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[使用插件](zh-cn/plugins.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[Markdown 配置](zh-cn/markdown.md)</span>  <span class="token list punctuation">*</span> <span class="token url">[代码高亮](zh-cn/language-highlight.md)</span></code></pre><h4 id="整合自定义导航栏与-emoji-插件"><a href="#整合自定义导航栏与-emoji-插件" class="headerlink" title="整合自定义导航栏与 emoji 插件"></a><a href="https://docsify.js.org/#/zh-cn/custom-navbar?id=%E6%95%B4%E5%90%88%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%8E-emoji-%E6%8F%92%E4%BB%B6">整合自定义导航栏与 emoji 插件</a></h4><p>如果你使用 <a href="https://docsify.js.org/#/plugins?id=emoji">emoji 插件</a>:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/plugins/emoji.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>例如，你可以在自定义导航栏 Markdown 文件中使用旗帜表情：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token comment" spellcheck="true">&lt;!-- _navbar.md --></span><span class="token list punctuation">*</span> <span class="token url">[:us:, :uk:](/)</span><span class="token list punctuation">*</span> <span class="token url">[:cn:](/zh-cn/)</span></code></pre><h3 id="5-8、封面的设置"><a href="#5-8、封面的设置" class="headerlink" title="5.8、封面的设置"></a>5.8、封面的设置</h3><blockquote><p>通过设置 <code>coverpage</code> 参数，可以开启渲染封面的功能。具体用法见<a href="https://docsify.js.org/#/configuration?id=coverpage">配置项#coverpage</a>。</p></blockquote><p>封面的生成同样是从 markdown 文件渲染来的。开启渲染封面功能后在文档根目录创建 <code>_coverpage.md</code> 文件。渲染效果如本文档。</p><p><em>index.html</em></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>     coverpage<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token comment" spellcheck="true">&lt;!-- _coverpage.md --></span><span class="token url">![logo](_media/icon.svg)</span><span class="token title important"><span class="token punctuation">#</span> docsify &lt;small>3.5&lt;/small></span><span class="token blockquote punctuation">></span> 一个神奇的文档网站生成器。<span class="token list punctuation">-</span> 简单、轻便 (压缩后 ~21kB)<span class="token list punctuation">-</span> 无需生成 html 文件<span class="token list punctuation">-</span> 众多主题<span class="token url">[GitHub](https://github.com/docsifyjs/docsify/)</span><span class="token url">[Get Started](#docsify)</span></code></pre><h4 id="自定义背景"><a href="#自定义背景" class="headerlink" title="自定义背景"></a><a href="https://docsify.js.org/#/zh-cn/cover?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%83%8C%E6%99%AF">自定义背景</a></h4><p>目前的背景是随机生成的渐变色，我们自定义背景色或者背景图。在文档末尾用添加图片的 Markdown 语法设置背景。</p><pre class=" language-markdown"><code class="language-markdown">_coverpage.md<span class="token comment" spellcheck="true">&lt;!-- _coverpage.md --></span><span class="token title important"><span class="token punctuation">#</span> docsify &lt;small>3.5&lt;/small></span><span class="token url">[GitHub](https://github.com/docsifyjs/docsify/)</span><span class="token url">[Get Started](#quick-start)</span><span class="token comment" spellcheck="true">&lt;!-- 背景图片 --></span>![](_media/bg.png)<span class="token comment" spellcheck="true">&lt;!-- 背景色 --></span><span class="token url">![color](#f0f0f0)</span></code></pre><h4 id="封面当作首页"><a href="#封面当作首页" class="headerlink" title="封面当作首页"></a>封面当作首页</h4><p>使用<a href="https://docsify.js.org/#/zh-cn/configuration?id=onlycover">onlyCover</a>进行设置</p><ul><li>类型: <code>Boolean</code></li></ul><p>只在访问主页时加载封面。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   onlyCover<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h4 id="多个封面"><a href="#多个封面" class="headerlink" title="多个封面"></a><a href="https://docsify.js.org/#/zh-cn/cover?id=%E5%A4%9A%E4%B8%AA%E5%B0%81%E9%9D%A2">多个封面</a></h4><p>如果你的文档网站是多语言的，或许你需要设置多个封面。</p><p>例如你的文档目录结构如下</p><pre class=" language-text"><code class="language-text">.└── docs    ├── README.md    ├── guide.md    ├── _coverpage.md    └── zh-cn        ├── README.md        └── guide.md        └── _coverpage.md</code></pre><p>那么你可以这么配置</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   coverpage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/zh-cn/'</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p>或者指定具体的文件名</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   coverpage<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'cover.md'</span><span class="token punctuation">,</span>    <span class="token string">'/zh-cn/'</span><span class="token punctuation">:</span> <span class="token string">'cover.md'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h2 id="6、Docsify配置项"><a href="#6、Docsify配置项" class="headerlink" title="6、Docsify配置项"></a>6、Docsify配置项</h2><h3 id="6-1、repo设置挂件"><a href="#6-1、repo设置挂件" class="headerlink" title="6.1、repo设置挂件"></a>6.1、<a href="https://docsify.js.org/#/zh-cn/configuration?id=repo">repo</a>设置挂件</h3><ul><li>类型：<code>String</code></li><li>默认值: <code>null</code></li></ul><p>配置仓库地址或者 <code>username/repo</code> 的字符串，会在页面右上角渲染一个 <a href="http://tholman.com/github-corners/">GitHub Corner</a> 挂件。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 可以输入自己的网站</span>  repo<span class="token punctuation">:</span> <span class="token string">'docsifyjs/docsify'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// or</span>  repo<span class="token punctuation">:</span> <span class="token string">'https://github.com/docsifyjs/docsify/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-2、maxLevel标题层数"><a href="#6-2、maxLevel标题层数" class="headerlink" title="6.2、maxLevel标题层数"></a>6.2、<a href="https://docsify.js.org/#/zh-cn/configuration?id=maxlevel">maxLevel</a>标题层数</h3><ul><li>类型：<code>Number</code></li><li>默认值: <code>6</code></li></ul><p>默认情况下会抓取文档中所有标题渲染成目录，可配置最大支持渲染的标题层级。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   maxLevel<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-3、loadNavbar导航栏"><a href="#6-3、loadNavbar导航栏" class="headerlink" title="6.3、loadNavbar导航栏"></a>6.3、<a href="https://docsify.js.org/#/zh-cn/configuration?id=loadnavbar">loadNavbar</a>导航栏</h3><ul><li>类型：<code>Boolean|String</code></li><li>默认值: <code>false</code></li></ul><p>加载自定义导航栏，参考<a href="https://docsify.js.org/#/zh-cn/custom-navbar">定制导航栏</a> 了解用法。设置为 <code>true</code> 后会加载 <code>_navbar.md</code> 文件，也可以自定义加载的文件名。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 加载 _navbar.md</span>  loadNavbar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 加载 nav.md</span>  loadNavbar<span class="token punctuation">:</span> <span class="token string">'nav.md'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-4、loadSidebar多页文档"><a href="#6-4、loadSidebar多页文档" class="headerlink" title="6.4、loadSidebar多页文档"></a>6.4、<a href="https://docsify.js.org/#/zh-cn/configuration?id=loadsidebar">loadSidebar</a>多页文档</h3><ul><li>类型：<code>Boolean|String</code></li><li>默认值: <code>false</code></li></ul><p>加载自定义侧边栏，参考<a href="https://docsify.js.org/#/zh-cn/more-pages">多页文档</a>。设置为 <code>true</code> 后会加载 <code>_sidebar.md</code> 文件，也可以自定义加载的文件名。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 加载 _sidebar.md</span>  loadSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 加载 summary.md</span>  loadSidebar<span class="token punctuation">:</span> <span class="token string">'summary.md'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-5、hideSidebar隐藏侧边栏"><a href="#6-5、hideSidebar隐藏侧边栏" class="headerlink" title="6.5、hideSidebar隐藏侧边栏"></a>6.5、<a href="https://docsify.js.org/#/zh-cn/configuration?id=hidesidebar">hideSidebar</a>隐藏侧边栏</h3><ul><li>类型 : <code>Boolean</code></li><li>默认值: <code>true</code></li></ul><p>这个选项用来完全隐藏侧边栏，侧边栏的任何内容都不会被渲染。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   hideSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-6、auto2top跳转到顶部"><a href="#6-6、auto2top跳转到顶部" class="headerlink" title="6.6、auto2top跳转到顶部"></a>6.6、<a href="https://docsify.js.org/#/zh-cn/configuration?id=auto2top">auto2top</a>跳转到顶部</h3><ul><li>类型：<code>Boolean</code></li><li>默认值: <code>false</code></li></ul><p>切换页面后是否自动跳转到页面顶部。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   auto2top<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-7、homepage设置首页"><a href="#6-7、homepage设置首页" class="headerlink" title="6.7、homepage设置首页"></a>6.7、<a href="https://docsify.js.org/#/zh-cn/configuration?id=homepage">homepage</a>设置首页</h3><ul><li>类型：<code>String</code></li><li>默认值: <code>README.md</code></li></ul><p>设置首页文件加载路径。适合不想将 <code>README.md</code> 作为入口文件渲染，或者是文档存放在其他位置的情况使用。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 入口文件改为 /home.md</span>  homepage<span class="token punctuation">:</span> <span class="token string">'home.md'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 文档和仓库根目录下的 README.md 内容一致</span>  homepage<span class="token punctuation">:</span>    <span class="token string">'https://raw.githubusercontent.com/docsifyjs/docsify/master/README.md'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-8、coverpage设置封面"><a href="#6-8、coverpage设置封面" class="headerlink" title="6.8、coverpage设置封面"></a>6.8、<a href="https://docsify.js.org/#/zh-cn/configuration?id=coverpage">coverpage</a>设置封面</h3><ul><li>类型：<code>Boolean|String</code></li><li>默认值: <code>false</code></li></ul><p>启用<a href="https://docsify.js.org/#/zh-cn/cover">封面页</a>。开启后是加载 <code>_coverpage.md</code> 文件，也可以自定义文件名。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   coverpage<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自定义文件名</span>  coverpage<span class="token punctuation">:</span> <span class="token string">'cover.md'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 多个封面页</span>  coverpage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/zh-cn/'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 多个封面页，并指定文件名</span>  coverpage<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'cover.md'</span><span class="token punctuation">,</span>    <span class="token string">'/zh-cn/'</span><span class="token punctuation">:</span> <span class="token string">'cover.md'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-9、logo图标"><a href="#6-9、logo图标" class="headerlink" title="6.9、logo图标"></a>6.9、<a href="https://docsify.js.org/#/zh-cn/configuration?id=logo">logo</a>图标</h3><ul><li>类型: <code>String</code></li></ul><p>在侧边栏中出现的网站图标，你可以使用<code>CSS</code>来更改大小</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   logo<span class="token punctuation">:</span> <span class="token string">'/_media/icon.svg'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-10、name文档标题"><a href="#6-10、name文档标题" class="headerlink" title="6.10、name文档标题"></a>6.10、<a href="https://docsify.js.org/#/zh-cn/configuration?id=name">name</a>文档标题</h3><ul><li>类型：<code>String</code></li></ul><p>文档标题，会显示在侧边栏顶部。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token string">'docsify'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p>name 项也可以包含自定义 HTML 代码来方便地定制。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token string">'&lt;span>docsify&lt;/span>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-11、themeColor主题颜色"><a href="#6-11、themeColor主题颜色" class="headerlink" title="6.11、themeColor主题颜色"></a>6.11、<a href="https://docsify.js.org/#/zh-cn/configuration?id=themecolor">themeColor</a>主题颜色</h3><ul><li>类型：<code>String</code></li></ul><p>替换主题色。利用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables">CSS3 支持变量</a>的特性，对于老的浏览器有 polyfill 处理。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   themeColor<span class="token punctuation">:</span> <span class="token string">'#3F51B5'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-12、autoHeader自动标题"><a href="#6-12、autoHeader自动标题" class="headerlink" title="6.12、autoHeader自动标题"></a>6.12、<a href="https://docsify.js.org/#/zh-cn/configuration?id=autoheader">autoHeader</a>自动标题</h3><ul><li>类型：<code>Boolean</code></li></ul><p>同时设置 <code>loadSidebar</code> 和 <code>autoHeader</code> 后，可以根据 <code>_sidebar.md</code> 的内容自动为每个页面增加标题。<a href="https://github.com/docsifyjs/docsify/issues/78">#78</a></p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   loadSidebar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  autoHeader<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-13、mergeNavbar合并导航栏"><a href="#6-13、mergeNavbar合并导航栏" class="headerlink" title="6.13、mergeNavbar合并导航栏"></a>6.13、<a href="https://docsify.js.org/#/zh-cn/configuration?id=mergenavbar">mergeNavbar</a>合并导航栏</h3><ul><li>类型: <code>Boolean</code></li></ul><p>小屏设备下合并导航栏到侧边栏。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   mergeNavbar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-14、formatUpdated更新日期"><a href="#6-14、formatUpdated更新日期" class="headerlink" title="6.14、formatUpdated更新日期"></a>6.14、<a href="https://docsify.js.org/#/zh-cn/configuration?id=formatupdated">formatUpdated</a>更新日期</h3><ul><li>类型: <code>String|Function</code></li></ul><p>我们可以通过 <strong>{docsify-updated}</strong> 变量显示文档更新日期. 并且通过 <code>formatUpdated</code>配置日期格式。参考 <a href="https://github.com/lukeed/tinydate#patterns">https://github.com/lukeed/tinydate#patterns</a></p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   formatUpdated<span class="token punctuation">:</span> <span class="token string">'{ MM} /{ DD}  { HH} :{ mm} '</span><span class="token punctuation">,</span>  formatUpdated<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> time<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-15、链接打开方式"><a href="#6-15、链接打开方式" class="headerlink" title="6.15、链接打开方式"></a>6.15、链接打开方式</h3><p><a href="https://docsify.js.org/#/zh-cn/configuration?id=externallinktarget">externalLinkTarget</a></p><ul><li>类型: <code>String</code></li><li>默认: <code>_blank</code></li></ul><p>外部链接的打开方式。默认为 <code>_blank</code> （在新窗口或者标签页中打开）</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   externalLinkTarget<span class="token punctuation">:</span> <span class="token string">'_self'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default: '_blank'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p><a href="https://docsify.js.org/#/zh-cn/configuration?id=cornerexternallinktarget">cornerExternalLinkTarget</a></p><ul><li>类型:<code>String</code></li><li>默认值:<code>_blank</code></li></ul><p>右上角链接的打开方式。默认为 <code>_blank</code> （在新窗口或者标签页中打开）</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   cornerExternalLinkTarget<span class="token punctuation">:</span> <span class="token string">'_self'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default: '_blank'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-16、routerMode路由模式"><a href="#6-16、routerMode路由模式" class="headerlink" title="6.16、routerMode路由模式"></a>6.16、<a href="https://docsify.js.org/#/zh-cn/configuration?id=routermode">routerMode</a>路由模式</h3><ul><li>类型: <code>String</code></li><li>默认: <code>hash</code></li></ul><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   routerMode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default: 'hash'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-17、onlyCover"><a href="#6-17、onlyCover" class="headerlink" title="6.17、onlyCover"></a>6.17、<a href="https://docsify.js.org/#/zh-cn/configuration?id=onlycover">onlyCover</a></h3><ul><li>类型: <code>Boolean</code></li></ul><p>只在访问主页时加载封面。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   onlyCover<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-18、requestHeaders设置缓存"><a href="#6-18、requestHeaders设置缓存" class="headerlink" title="6.18、requestHeaders设置缓存"></a>6.18、<a href="https://docsify.js.org/#/zh-cn/configuration?id=requestheaders">requestHeaders</a>设置缓存</h3><ul><li>类型: <code>Object</code></li></ul><p>设置请求资源的请求头。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   requestHeaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'x-token'</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p>例如设置缓存</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   requestHeaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 单位为秒</span>    <span class="token string">'cache-control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=600'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-19、notFoundPage404页面"><a href="#6-19、notFoundPage404页面" class="headerlink" title="6.19、notFoundPage404页面"></a>6.19、<a href="https://docsify.js.org/#/zh-cn/configuration?id=notfoundpage">notFoundPage</a>404页面</h3><ul><li>类型: <code>Boolean</code> | <code>String</code> | <code>Object</code></li></ul><p>在找不到指定页面时加载<code>_404.md</code>:</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   notFoundPage<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p>加载自定义404页面:</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   notFoundPage<span class="token punctuation">:</span> <span class="token string">'my404.md'</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><p>加载正确的本地化过的404页面:</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   notFoundPage<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'_404.md'</span><span class="token punctuation">,</span>    <span class="token string">'/de'</span><span class="token punctuation">:</span> <span class="token string">'de/_404.md'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h3 id="6-20、topMargin距离页面"><a href="#6-20、topMargin距离页面" class="headerlink" title="6.20、topMargin距离页面"></a>6.20、<a href="https://docsify.js.org/#/zh-cn/configuration?id=topmargin">topMargin</a>距离页面</h3><ul><li>类型: <code>Number</code></li><li>默认值: <code>0</code></li></ul><p>让你的内容页在滚动到指定的锚点时，距离页面顶部有一定空间。当你使用 <code>固定页头</code> 布局时这个选项很有用，可以让你的锚点对齐标题栏。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$docsify <span class="token operator">=</span> <span class="token punctuation">{</span>   topMargin<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default: 0</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> 站点 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax和Json</title>
      <link href="/2020/08/02/Ajax%E5%92%8CJson/"/>
      <url>/2020/08/02/Ajax%E5%92%8CJson/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、JSON"><a href="#1、JSON" class="headerlink" title="1、JSON"></a>1、JSON</h2><h3 id="1-1、什么是JSON"><a href="#1-1、什么是JSON" class="headerlink" title="1.1、什么是JSON"></a>1.1、什么是JSON</h3><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200802213616813.png" alt="image-20200802213616813" loading="lazy"></p><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p><strong>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</strong></p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"QinJiang"</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span> </code></pre><p><strong>JSON 和 JavaScript 对象</strong></p><ul><li><p>Json本质是字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一个对象，注意键名也是可以使用引号包裹的</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{ "a": "Hello", "b": "World"} '</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一个 JSON 字符串，本质是一个字符串</span></code></pre></li><li><p>JSON 和 JavaScript 对象互转</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{ "a": "Hello", "b": "World"} '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果是 { a: 'Hello', b: 'World'} </span><span class="token comment" spellcheck="true">//要实现从JavaScript对象转换为JSON字符串，使用 JSON.stringify() 方法</span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果是 '{ "a": "Hello", "b": "World"} '</span></code></pre></li></ul><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a><strong>代码测试</strong></h4><ol><li><p>新建一个module ，SpringMVC_04_Json ， 添加web的支持</p></li><li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSON_晓江<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//编写一个js的对象</span>            <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>                 name<span class="token punctuation">:</span><span class="token string">"晓江"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>                sex<span class="token punctuation">:</span><span class="token string">"男"</span>            <span class="token punctuation">}</span> <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将js对象转换成json字符串</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将json字符串转换为js对象</span>            <span class="token keyword">var</span> user2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>age<span class="token punctuation">,</span>user2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>user2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="1-2、Controller返回JSON数据"><a href="#1-2、Controller返回JSON数据" class="headerlink" title="1.2、Controller返回JSON数据"></a>1.2、Controller返回JSON数据</h3><ol><li><p>Jackson应该是目前比较好的json解析工具了</p></li><li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p></li><li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置SpringMVC需要的配置<br>web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个SpringMVC的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--过滤器，处理Web乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>springmvc-servlet.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC不处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写一个实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>这里我们需要两个新东西，一个是@ResponseBody（不走视图解析器），一个是ObjectMapper对象，我们看下具体的用法编写一个Controller；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">json1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象转为JSON格式</span>        String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不会经过视图解析器，直接显示出来</span>        <span class="token comment" spellcheck="true">// 由于@ResponseBody注解，这里会将str转成json格式返回</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试（出现乱码）</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614144143284-1595425401176.png" alt="image-20200614144143284" loading="lazy"></p><ul><li>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</li><li>通过@RequestMaping的produces属性来实现，修改下代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//produces:指定响应体返回类型和编码</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/json1"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span></code></pre><ul><li><p>测试结果正常</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614144502259-1595425401177.png" alt="image-20200614144502259" loading="lazy"></p></li><li><p>如果没有使用注解@ResponseBody会经过视图解析器处理</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614144613903-1595425401177.png" alt="image-20200614144613903" loading="lazy"></p></li></ul></li></ol><p><strong>【注意：使用json记得处理乱码问题】</strong></p><h3 id="1-3、代码优化"><a href="#1-3、代码优化" class="headerlink" title="1.3、代码优化"></a>1.3、代码优化</h3><h4 id="乱码统一解决"><a href="#乱码统一解决" class="headerlink" title="乱码统一解决"></a>乱码统一解决</h4><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样<br>就不用每次都去处理了！</p><ul><li><p><strong>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--统一处理JSON乱码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>返回json字符串统一解决</strong><br>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一<br>个都添加**@ResponseBody** ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController2</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">json2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个jackson的对象映射器来解析数据</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象解析为JSON格式</span>        String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>重新启动tomcat测试，结果都正常输出！</p></li></ul><h3 id="1-4、测试集合输出"><a href="#1-4、测试集合输出" class="headerlink" title="1.4、测试集合输出"></a>1.4、测试集合输出</h3><ul><li><p>添加一个新方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>    ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个对象</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试正常</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614145904789-1595425401177.png" alt="image-20200614145904789" loading="lazy"></p></li></ul><h3 id="1-5、输出时间对象"><a href="#1-5、输出时间对象" class="headerlink" title="1.5、输出时间对象"></a>1.5、输出时间对象</h3><ul><li><p>增加一个新方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建时间一个对象，java.util.Date</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614150154130-1595425401177.png" alt="image-20200614150154130" loading="lazy"></p></li><li><p>默认日期格式会变成一个数字，<strong>是1970年1月1日到当前日期的毫秒数</strong>！Jackson 默认是会把时间转成timestamps形式</p></li><li><p><strong>解决方案</strong>：取消timestamps形式 ， 自定义时间格式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不使用时间戳的方式</span>    mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义日期格式对象</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定日期格式</span>    mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建时间一个对象</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614150639474-1595425401177.png" alt="image-20200614150639474" loading="lazy"></p></li></ul><h3 id="1-6、抽取为工具类"><a href="#1-6、抽取为工具类" class="headerlink" title="1.6、抽取为工具类"></a>1.6、抽取为工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializationFeature<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtils</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 重构方法，只有一个参数的格式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getJson</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span>String dateFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不使用时间差的方式</span>        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自定义日期格式对象</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定日期格式</span>        mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>使用工具类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String json <span class="token operator">=</span> JsonUtils<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> json<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>测试</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200614151100556-1595425401177.png" alt="image-20200614151100556" loading="lazy"></p><h3 id="7-7、FastJson"><a href="#7-7、FastJson" class="headerlink" title="7.7、FastJson"></a>7.7、FastJson</h3><p>​    fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转<br>换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法<br>很多，最后的实现结果都是一样的。</p><ul><li><p><strong>fastjson 的 pom依赖！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.70<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>fastjson 三个主要的类：</strong></p><ol><li>【JSONObject 代表 json 对象 】<ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用<br>诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map<br>接口并调用接口中的方法完成的。</li></ul></li><li>【JSONArray 代表 json 对象数组】<ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li>【JSON 代表 JSONObject和JSONArray的转化】<ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间<br>的相互转化。</li></ul></li></ol></li><li><p><strong>使用</strong></p><ol><li><p>我们新建一个FastJsonDemo 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个对象</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******Java对象 转 JSON字符串*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(list)==>"</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(user1)==>"</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON字符串 转 Java对象*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User jp_user1<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(str2,User.class)==>"</span><span class="token operator">+</span>jp_user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** Java对象 转 JSON对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject1 <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(JSONObject)SON.toJSON(user2)==>"</span><span class="token operator">+</span>jsonObject1<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON对象 转 Java对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User to_java_user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJavaObject(jsonObject1,User.class)==>"</span><span class="token operator">+</span>to_java_user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>控制台输出</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Java对象 转 JSON字符串<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">]</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> JSON字符串 转 Java对象<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>晓江<span class="token number">1</span>号<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sex<span class="token operator">=</span>男<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> Java对象 转 JSON对象 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span>SON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span>晓江<span class="token number">2</span>号<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> JSON对象 转 Java对象 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>晓江<span class="token number">2</span>号<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sex<span class="token operator">=</span>男<span class="token punctuation">)</span></code></pre></li></ol></li></ul><h2 id="2、Ajax"><a href="#2、Ajax" class="headerlink" title="2、Ajax"></a>2、Ajax</h2><h3 id="2-1、简介"><a href="#2-1、简介" class="headerlink" title="2.1、简介"></a>2.1、简介</h3><ul><li><p><strong>A JAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>A JAX 是一种在<strong>无需重新加载整个网页</strong>的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 A JAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 A JAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，</p></li><li><p>JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样：</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620181845202-1595425401177.png" alt="image-20200620181845202" loading="lazy"></p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><h3 id="2-2、伪造Ajax"><a href="#2-2、伪造Ajax" class="headerlink" title="2.2、伪造Ajax"></a>2.2、伪造Ajax</h3><blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子，使用 iframe标签制作出一个窗口。</p></blockquote><ol><li><p>新建一个module ： sspringmvc-05-ajax ， 导入web支持！</p></li><li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentTime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span>                    myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token punctuation">;</span>            <span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">var</span> targetUrl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframePosition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>请输入要加载的地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LoadPage()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>加载页面位置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframePosition<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用浏览器进行测试</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620210854240-1595425401177.png" alt="image-20200620210854240" loading="lazy"></p></li></ol><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除等等。</li></ul><h3 id="2-3、jQuery-ajax"><a href="#2-3、jQuery-ajax" class="headerlink" title="2.3、jQuery.ajax"></a>2.3、jQuery.ajax</h3><ul><li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li><li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li><strong>jQuery 提供多个与 A JAX 有关的方法。</strong></li><li>通过 jQuery A JAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li><strong>jQuery 不是生产者，而是大自然搬运工。</strong></li><li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><pre class=" language-java"><code class="language-java">jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>部分参数：url：请求地址type：请求方式，GET、POST（<span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">0</span>之后用method）headers：请求头data：要发送的数据contentType：即将发送信息至服务器的内容编码类型<span class="token punctuation">(</span>默认<span class="token operator">:</span> <span class="token string">"application/x-wwwform-urlencoded; charset=UTF-8"</span><span class="token punctuation">)</span>async：是否异步timeout：设置请求超时时间（毫秒）beforeSend：发送请求前执行的函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>complete：完成之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>success：成功之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>error：失败之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型dataType：将服务器端返回的数据转换成指定类型<span class="token string">"xml"</span><span class="token operator">:</span> 将服务器端返回的内容转换成xml格式<span class="token string">"text"</span><span class="token operator">:</span> 将服务器端返回的内容转换成普通文本格式<span class="token string">"html"</span><span class="token operator">:</span> 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<span class="token string">"script"</span><span class="token operator">:</span> 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<span class="token string">"json"</span><span class="token operator">:</span> 将服务器端返回的内容转换成相应的JavaScript对象<span class="token string">"jsonp"</span><span class="token operator">:</span> JSONP 格式使用 JSONP 形式调用函数时，如 <span class="token string">"myurl?callback=?"</span>jQuery 将自动替换 <span class="token operator">?</span> 为正确的函数名，以执行回调函数</code></pre><ol><li><p><strong>jQuery下载</strong></p><p>下载地址：<a href="https://jquery.com/">https://jquery.com/</a></p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620182720053-1595425401177.png" alt="image-20200620182720053" loading="lazy"></p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620183045913-1595425401177.png" alt="image-20200620183045913" loading="lazy"></p></li><li><p>配置web.xml 和 springmvc的配置文件 【记得静态资源过滤和注解驱动配置上】</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个SpringMVC的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--过滤器，处理web乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--统一处理JSON乱码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        &lt;mvc:message-converters register-defaults= "true">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写一个AjaxController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ajax1</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span>        IOException <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>             response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>导入jquery ，可以使用在线的CDN ，也可以下载导入(<strong>将刚才下载的文件放到statics/js目录下)</strong></p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620212650079-1595425401177.png" alt="image-20200620212650079" loading="lazy"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ pageContext.request.contextPath} /statics/js/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写index.jsp测试</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>$Title$</title>        <%--<script src="https://code.jquery.com/jquery-3.1.1.min.js">    </script>--%>        <script src="${ pageContext.request.contextPath} /statics/js/jquery-                     3.1.1.min.js"></script>        <script>            function a1(){                 $.post({                     url:"${ pageContext.request.contextPath} /a1",                    data:{ 'name':$("#txtName").val()} ,                    success:function (data,status) {                         alert(data);                        alert(status);                    }                 } );            }         </script>    </head>    <body>        <%--onblur：失去焦点触发事件--%>        用户名:<input type="text" id="txtName" onblur="a1()"/>    </body></html></code></pre></li><li><p>启动tomcat测试！ </p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620212159832-1595425401177.png" alt="image-20200620212159832" loading="lazy"></p></li><li><p>打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620212634151-1595425401177.png" alt="image-20200620212634151" loading="lazy"></p></li></ol><h3 id="2-4、Springmvc实现"><a href="#2-4、Springmvc实现" class="headerlink" title="2.4、Springmvc实现"></a>2.4、Springmvc实现</h3><ol><li><p>实体类user</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>我们来获取一个集合对象，展示到前端页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//由于@RestController注解，将list转成json格式返回</span>    <span class="token keyword">return</span> users<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>前端页面</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title>    <script src="${ pageContext.request.contextPath} /statics/js/jquery-3.5.1.js"></script>    <script>        $(function () {             $("#btn").click(function () {                 $.post("${ pageContext.request.contextPath} /a2",function (data) {                     console.log(data)                    var html="";                    for (var i = 0; i <data.length ; i++) {                         html+= "<tr>" +                            "<td>" + data[i].name + "</td>" +                            "<td>" + data[i].age + "</td>" +                            "<td>" + data[i].sex + "</td>" +                            "</tr>"                    }                     $("#content").html(html);                } );            } )        } )    </script></head><body>    <input type="button" id="btn" value="获取数据" />    <table width="80%" align="center">        <tr>            <td>姓名</td>            <td>年龄</td>            <td>性别</td>        </tr>        <tbody id="content">        </tbody>    </table></body></html></code></pre></li><li><p>测试</p><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200620220239744-1595425401177.png" alt="image-20200620220239744" loading="lazy"></p></li></ol><h3 id="2-5、注册提示效果"><a href="#2-5、注册提示效果" class="headerlink" title="2.5、注册提示效果"></a>2.5、注册提示效果</h3><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><ol><li><p>我们写一个Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ajax3</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>     String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模拟数据库中存在数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             msg <span class="token operator">=</span> <span class="token string">"用户名输入错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             msg <span class="token operator">=</span> <span class="token string">"密码输入有误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> msg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于@RestController注解，将msg转成json格式返回</span><span class="token punctuation">}</span> </code></pre></li><li><p>前端页面 login.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>ajax</title>        <script src="${ pageContext.request.contextPath} /statics/js/jquery-                     3.1.1.min.js"></script>        <script>            function a1(){                 $.post({                     url:"${ pageContext.request.contextPath} /a3",                    data:{ 'name':$("#name").val()} ,                    success:function (data) {                         if (data.toString()=='OK'){                             $("#userInfo").css("color","green");                        } else {                             $("#userInfo").css("color","red");                        }                         $("#userInfo").html(data);                    }                 } );            }             function a2(){                 $.post({                     url:"${ pageContext.request.contextPath} /a3",                    data:{ 'pwd':$("#pwd").val()} ,                    success:function (data) {                         if (data.toString()=='OK'){                             $("#pwdInfo").css("color","green");                        } else {                             $("#pwdInfo").css("color","red");                        }                         $("#pwdInfo").html(data);                    }                 } );            }         </script>    </head>    <body>        <p>            用户名:<input type="text" id="name" onblur="a1()"/>            <span id="userInfo"></span>        </p>        <p>            密码:<input type="text" id="pwd" onblur="a2()"/>            <span id="pwdInfo"></span>        </p>    </body></html></code></pre><p>【记得处理JSON的乱码问题，在SpringMVC中导入处理】</p></li><li><p>测试效果</p></li></ol><h3 id="2-6、获取baidu接口Demo"><a href="#2-6、获取baidu接口Demo" class="headerlink" title="2.6、获取baidu接口Demo"></a>2.6、获取baidu接口Demo</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSONP百度搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token id">#q</span></span><span class="token punctuation">{</span>                 <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token selector"><span class="token id">#ul</span></span><span class="token punctuation">{</span>                 <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">520</span>px<span class="token punctuation">;</span>                <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>                <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token selector"><span class="token id">#ul</span> li</span><span class="token punctuation">{</span>                 <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token selector"><span class="token id">#ul</span> li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>                 <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f60</span><span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 2.步骤二</span>            <span class="token comment" spellcheck="true">// 定义demo函数 (分析接口、数据)</span>            <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果搜索数据存在 把内容添加进去</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 隐藏掉的ul显示出来</span>                    Ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 搜索到的数据循环追加到li里</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                     <span class="token comment" spellcheck="true">// 循环的li写入ul</span>                    Ul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 1.步骤一</span>            window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 获取输入框和ul</span>                <span class="token keyword">var</span> Q <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 事件鼠标抬起时候</span>                Q<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 如果输入框不等于空</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span>                        <span class="token comment" spellcheck="true">// 创建标签</span>                        <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//给定要跨域的地址 赋值给src</span>                        <span class="token comment" spellcheck="true">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span>                        script<span class="token punctuation">.</span>src <span class="token operator">=</span>                            'https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>sp0<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>5a1Fazu8AA54nxGko9WTAnF6hhy<span class="token operator">/</span>su<span class="token operator">?</span>                        wd<span class="token operator">=</span><span class="token string">'+this.value+'</span><span class="token operator">&amp;</span>cb<span class="token operator">=</span>demo'<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 将组合好的带src的script标签追加到body里</span>                        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/Ajax%E5%92%8CJson/image-20200725224939341.png" alt="image-20200725224939341" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> js </tag>
            
            <tag> json </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2020/08/02/SpringCloud/"/>
      <url>/2020/08/02/SpringCloud/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><img src="/2020/08/02/SpringCloud/image-20200730174923118.png" alt="image-20200730174923118" loading="lazy"></p><p>解决方案：</p><blockquote><p>SpringCloud 生态</p></blockquote><ol><li><p>SpringCloud NetFlix 一站式解决方案！</p><p>api网关，zuul组件</p><p>Feign —— httpClient —— Http通信方式，同步，阻塞</p><p>服务注册发现：Eureka</p><p>熔断机制：Hystrix</p><p>（2018年停更的）</p></li></ol><ol start="2"><li><p>Apache Dubbo zookeeper 半自动，需要整合别人的</p><p>API：没有，找第三方组件，或者自己实现</p><p>Dubbo</p><p>zookeeper</p><p>熔断机制：借助Hystrix</p><p>Dubbo并不完善~</p></li></ol><ol start="3"><li><p>SpringCloud Alibaba 一站式解决方案！</p><p>新创建的</p></li></ol><p>新概念：服务网格 Server Mesh  </p><blockquote><p>解决的问题：</p></blockquote><ol><li>API</li><li>HTTP，RPC</li><li>注册和发现</li><li>熔断机制</li></ol><p>原因：网络不可靠</p><p><img src="/2020/08/02/SpringCloud/image-20200730110910772.png" alt="image-20200730110910772" loading="lazy"></p><h2 id="2、微服务概述"><a href="#2、微服务概述" class="headerlink" title="2、微服务概述"></a>2、微服务概述</h2><h3 id="2-1、什么是微服务"><a href="#2-1、什么是微服务" class="headerlink" title="2.1、什么是微服务"></a>2.1、什么是微服务</h3><p>维基上对其定义为：一种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，将应用程序构造为一组松散耦合的服务。在微服务体系结构中，服务是细粒度的，协议是轻量级的。</p><p>微服务（或微服务架构）是一种云原生架构方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成。这些服务通常</p><ul><li>有自己的堆栈，包括数据库和数据模型；</li><li>通过REST API，事件流和消息代理的组合相互通信；</li><li>它们是按业务能力组织的，分隔服务的线通常称为有界上下文。</li><li>可以更轻松地更新代码。</li><li>团队可以为不同的组件使用不同的堆栈。</li><li>模块化，可以使用不同的语言来编写服务，也可以使用不同是数据存储</li></ul><p><img src="/2020/08/02/SpringCloud/image-20200730111506786.png" alt="image-20200730111506786" loading="lazy"></p><h3 id="2-2、微服务与微服务架构"><a href="#2-2、微服务与微服务架构" class="headerlink" title="2.2、微服务与微服务架构"></a>2.2、微服务与微服务架构</h3><p><strong>微服务</strong></p><p>强调的是服务的大小，关注的是某一个点，是具体解决某一个问题对应的一个服务应用，狭义的看，可以看做是IDEA中的一个个微服务工程或者Moudel</p><p><strong>微服务架构</strong></p><p>一种新的架构形式，Martin Fowler，2014年提出</p><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，使服务之间相互协调，互相配合，为用户提供最终的价值。对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><h3 id="2-3、微服务优缺点"><a href="#2-3、微服务优缺点" class="headerlink" title="2.3、微服务优缺点"></a>2.3、微服务优缺点</h3><p><strong>优点</strong></p><ul><li>单一职责原则</li><li>每个服务足够内聚，足够小，代码容易理解，缺一不可</li><li>开发简单，开发效率提高，一个服务可能就是专一的干一件事</li><li>微服务能够被小团队单独开发，这个小团队是2~5人的开发人员组成</li><li>微服务是松耦合，有功能意义的服务，都是独立的</li><li>可以使用不同的语言开发</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，如jenkins，Hudson，bamboo</li><li><strong>微服务是业务逻辑的代码，不会和HTML，CSS或其他界面混合</strong></li><li><strong>每个微服务有自己的存储能力，可以有自己的数据库，也可以有统一数据库</strong></li></ul><p><strong>缺点</strong></p><ul><li>开发人员要处理分布式系统的复杂性</li><li>随着服务的增加，运维的压力也在增大</li><li>系统部署依赖</li><li>服务间通信成本</li><li>数据一致性</li><li>系统集成测试</li><li>性能监控</li></ul><h3 id="2-4、微服务技术栈"><a href="#2-4、微服务技术栈" class="headerlink" title="2.4、微服务技术栈"></a>2.4、微服务技术栈</h3><p><img src="/2020/08/02/SpringCloud/image-20200730113202994.png" alt="image-20200730113202994" loading="lazy"></p><h3 id="2-5、为什么要选择SpringCloud作为微服务架构"><a href="#2-5、为什么要选择SpringCloud作为微服务架构" class="headerlink" title="2.5、为什么要选择SpringCloud作为微服务架构"></a>2.5、为什么要选择SpringCloud作为微服务架构</h3><blockquote><h4 id="选型依据"><a href="#选型依据" class="headerlink" title="选型依据"></a>选型依据</h4></blockquote><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线 </li></ul><blockquote><h4 id="当前各大IT公司的微服务架构有哪些"><a href="#当前各大IT公司的微服务架构有哪些" class="headerlink" title="当前各大IT公司的微服务架构有哪些"></a>当前各大IT公司的微服务架构有哪些</h4></blockquote><ul><li>阿里：dubbo+HFS</li><li>京东：JSF</li><li>新浪：Motan</li><li>当当网：DubboX</li><li>……</li></ul><blockquote><h4 id="各微服务框架对比"><a href="#各微服务框架对比" class="headerlink" title="各微服务框架对比"></a>各微服务框架对比</h4></blockquote><ul><li>SpringCloud NetFlix 一站式解决方案，但不再维护！</li><li>Apache Dubbo zookeeper 半自动，需要整合别人的</li><li>SpringCloud Alibaba 一站式解决方案，新产品！</li></ul><h2 id="3、SpringCloud入门概述"><a href="#3、SpringCloud入门概述" class="headerlink" title="3、SpringCloud入门概述"></a>3、SpringCloud入门概述</h2><h3 id="3-1、SpringCloud是什么"><a href="#3-1、SpringCloud是什么" class="headerlink" title="3.1、SpringCloud是什么"></a>3.1、SpringCloud是什么</h3><p>官网：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><p>中文文档：<a href="https://www.springcloud.cc/">https://www.springcloud.cc/</a></p><p>SpringCloud：<a href="https://www.springcloud.cc/spring-cloud-dalton.html">https://www.springcloud.cc/spring-cloud-dalton.html</a></p><p><img src="/2020/08/02/SpringCloud/image-20200730114601511.png" alt="image-20200730114601511" loading="lazy"></p><p>Spring Cloud为开发人员提供了工具，以快速构建分布式系统中的某些常见模式（例如，配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，群集状态）。分布式系统的协调导致样板式样，并且使用Spring Cloud开发人员可以快速站起来实现这些样板的服务和应用程序。</p><p>Spring Cloud专注于为典型的用例和扩展机制（包括其他用例）提供良好的开箱即用体验。</p><h3 id="3-2、SpringCloud和SpringBoot关系"><a href="#3-2、SpringCloud和SpringBoot关系" class="headerlink" title="3.2、SpringCloud和SpringBoot关系"></a>3.2、SpringCloud和SpringBoot关系</h3><ul><li>SpringBoot专注于快速方便的开发单个个体微服务</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，为各个为服务之间提供：配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等集成服务</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系</li><li><strong>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架</strong></li></ul><h3 id="3-3、Dubbo和SpringCloud技术选型"><a href="#3-3、Dubbo和SpringCloud技术选型" class="headerlink" title="3.3、Dubbo和SpringCloud技术选型"></a>3.3、Dubbo和SpringCloud技术选型</h3><blockquote><h4 id="分布式-服务治理Dubbo"><a href="#分布式-服务治理Dubbo" class="headerlink" title="分布式+服务治理Dubbo"></a>分布式+服务治理Dubbo</h4></blockquote><p>目前成熟的互联网架构：应用服务化拆分+消息中间件</p><p><img src="/2020/08/02/SpringCloud/image-20200730120013761.png" alt="image-20200730120013761" loading="lazy"></p><blockquote><h4 id="Dubbo和SpringCloud对比"><a href="#Dubbo和SpringCloud对比" class="headerlink" title="Dubbo和SpringCloud对比"></a>Dubbo和SpringCloud对比</h4></blockquote><p><img src="/2020/08/02/SpringCloud/image-20200730120121944.png" alt="image-20200730120121944" loading="lazy"></p><blockquote><h4 id="SpringCould能干嘛"><a href="#SpringCould能干嘛" class="headerlink" title="SpringCould能干嘛"></a>SpringCould能干嘛</h4></blockquote><p>Spring Cloud专注于为典型的用例和扩展机制（包括其他用例）提供良好的开箱即用体验。</p><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>路由</li><li>服务到服务的呼叫</li><li>负载均衡</li><li>断路器</li><li>全局锁</li><li>领导选举和集群状态</li><li>分布式消息传递</li></ul><h2 id="4、SpringCloud项目搭建"><a href="#4、SpringCloud项目搭建" class="headerlink" title="4、SpringCloud项目搭建"></a>4、SpringCloud项目搭建</h2><p><strong>实际开发版本关系</strong></p><p><img src="/2020/08/02/SpringCloud/image-20200730133313657.png" alt="image-20200730133313657" loading="lazy"></p><table><thead><tr><th>Spring Cloud</th><th>Spring Boot</th></tr></thead><tbody><tr><td>Angel版本</td><td>兼容Spring Boot 1.2.x</td></tr><tr><td>Brixton版本</td><td>兼容Spring Boot 1.3.x，也兼容Spring Boot 1.4.x</td></tr><tr><td>Camden版本</td><td>兼容Spring Boot 1.4.x，也兼容Spring Boot 1.5.x</td></tr><tr><td>Dalston版本、Edgware版本</td><td>兼容Spring Boot 1.5.x，不兼容Spring Boot 2.0.x</td></tr><tr><td>Finchley版本</td><td>兼容Spring Boot 2.0.x，不兼容Spring Boot 1.5.x</td></tr><tr><td>Greenwich版本</td><td>兼容Spring Boot 2.1.x</td></tr></tbody></table><p>在实际开发过程中，我们需要更详细的版本对应：</p><table><thead><tr><th>Spring Boot</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>1.5.2.RELEASE</td><td>Dalston.RC1</td></tr><tr><td>1.5.9.RELEASE</td><td>Edgware.RELEASE</td></tr><tr><td>2.0.2.RELEASE</td><td>Finchley.BUILD-SNAPSHOT</td></tr><tr><td>2.0.3.RELEASE</td><td>Finchley.RELEASE</td></tr></tbody></table><h3 id="4-1、创建父项目"><a href="#4-1、创建父项目" class="headerlink" title="4.1、创建父项目"></a>4.1、创建父项目</h3><ol><li><p>创建普通Maven项目<code>SpringCloud</code>，作为父项目</p></li><li><p>修改<code>pom.xml</code>文件，编写打包方式</p></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 打包方式 pom --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.16.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringCloud依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringBoot依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库mysql --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--druid--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringBoot启动器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--test--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- junit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 从上方取依赖版本 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${ junit.version} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Lombok --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 从上方取依赖版本 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${ lombok.version} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log4j --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 从上方取依赖版本 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${ log4j.version} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- logback --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 从上方取依赖版本 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="4-2、创建API模块"><a href="#4-2、创建API模块" class="headerlink" title="4.2、创建API模块"></a>4.2、创建API模块</h3><ol><li><p>新建一个moudle，<code>springcloud-api</code></p></li><li><p>在子项目的pom文件中导入依赖，因为父项目使用的是<code>&lt;/dependencyManagement&gt;</code>方式导入的</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建数据库<code>DB01</code></p><p><img src="/2020/08/02/SpringCloud/image-20200730143802527.png" alt="image-20200730143802527" loading="lazy"></p></li><li><p>在IDEA中连接并创建数据表<code>dept</code></p><p><img src="/2020/08/02/SpringCloud/image-20200730144012036.png" alt="image-20200730144012036" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200730144134151.png" alt="image-20200730144134151" loading="lazy"></p></li><li><p>对应的sql为</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">(</span>    deptno <span class="token keyword">bigint</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    db_source <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'部门表'</span><span class="token punctuation">;</span></code></pre></li><li><p>插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>dname<span class="token punctuation">,</span> db_source<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'开发部'</span><span class="token punctuation">,</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>dname<span class="token punctuation">,</span> db_source<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'人事部'</span><span class="token punctuation">,</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>dname<span class="token punctuation">,</span> db_source<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">,</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>dname<span class="token punctuation">,</span> db_source<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'市场部'</span><span class="token punctuation">,</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>dname<span class="token punctuation">,</span> db_source<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'运营部'</span><span class="token punctuation">,</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在目录<code>com.xj.springcloud.pojo</code>下创建实体类<code>Dept</code>，需要实现Serializable序列化，防止传输报错</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开启链式写法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Long deptno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dname<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个数据存在哪个数据库中的字段，微服务，一个服务对应一个数据库</span>    <span class="token keyword">private</span> String db_source<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dept</span><span class="token punctuation">(</span>String dname<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*    链式写法：        Dept dept = new Dept();        dept.setDeptno(11).setDname("sss").setDb_source("001");     */</span><span class="token punctuation">}</span> </code></pre><p>这个服务到这里就可以了</p></li></ol><h3 id="4-3、创建提供者"><a href="#4-3、创建提供者" class="headerlink" title="4.3、创建提供者"></a>4.3、创建提供者</h3><ol><li><p>新创建一个模块<code>springcloud-provider-dept-8001</code></p></li><li><p>导入依赖，其中的实体类点进去可以到达我们刚才写的实体类</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--拿到我们需要的实体类api--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mysql--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--logback-core--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--test--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jetty--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--热部署工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment" spellcheck="true"># mybatis配置</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xj.springcloud.pojo  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db01<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span></code></pre></li><li><p>编写<code>mybatis-config.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启二级缓存--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>在目录<code>com.xj.springcloud.mapper</code>下创建<code>DeptMapper</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写Mapper映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.springcloud.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into dept (dname, db_source)        values (#{ dename} ,DATABASE());    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from dept where deptno=#{ deptno}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from dept    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写业务类<code>DeptService</code>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写业务类<code>DeptServiceImpl</code>实现类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">addDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写控制类<code>DeptController</code>，提供Restful格式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 提供RestFul服务</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 调用业务层</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> deptService<span class="token punctuation">.</span><span class="token function">addDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> deptService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> deptService<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>创建主启动类<code>DeptProvider_8001</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 启动类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProvider_8001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProvider_8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动项目测试</p><p><img src="/2020/08/02/SpringCloud/image-20200730161155433.png" alt="image-20200730161155433" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200730161235040.png" alt="image-20200730161235040" loading="lazy"></p><p>可以发现，在该项目中，我们没有编写任何前端代码。并且在第二个项目中也没有编写实体类，是调用第一个项目的。</p></li></ol><h3 id="4-4、创建消费者"><a href="#4-4、创建消费者" class="headerlink" title="4.4、创建消费者"></a>4.4、创建消费者</h3><blockquote><p>80端口代表本地，在测试的时候可以不写端口号</p></blockquote><ol><li><p>创建模块<code>springcloud-consumer-dept-80</code></p></li><li><p>导入依赖，不需要数据库，只要实体类和web</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--实体类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--热部署工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>application.yaml</code>的端口号</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>编写配置类<code>ConfigBean</code>，提供RestTemplate</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Configuration 注解相当于Spring中的applicationContext.xml，然后在里面注册bean</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigBean</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>创建控制类（消费者）<code>DeptConsumerController</code>，需要调用远程的业务层</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumerController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 理解：消费者不应该有service业务层</span>    <span class="token comment" spellcheck="true">// RestTemplate 供我们直接调用业务层的url即可！它需要注册到Spring中</span>    <span class="token comment" spellcheck="true">// (String url, Class&lt;T> responseType, Object... uriVariables)传递地址、返回类型...</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REST_URL_PREFIX <span class="token operator">=</span> <span class="token string">"http://localhost:8001"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// url地址，参数，返回类型</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>REST_URL_PREFIX <span class="token operator">+</span> <span class="token string">"/dept/add?dname="</span> <span class="token operator">+</span> dept<span class="token punctuation">.</span><span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dept<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>REST_URL_PREFIX <span class="token operator">+</span> <span class="token string">"/dept/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> Dept<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>REST_URL_PREFIX <span class="token operator">+</span> <span class="token string">"/dept/list"</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>创建主启动类<code>DeptConsumer_80</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumer_80</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptConsumer_80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试：<strong>先启动8001的项目</strong>，提供者</p><p><img src="/2020/08/02/SpringCloud/image-20200730165832903.png" alt="image-20200730165832903" loading="lazy"></p></li><li><p>运行成功之后，<strong>启动80的项目</strong>，消费者（启动失败，因为本地端口被启动了，所以<strong>在配置文件改为8002端口测试</strong>）</p></li><li><p>测试成功：在消费者项目中也成功访问到了，还可以访问到数据库</p><p><img src="/2020/08/02/SpringCloud/image-20200730170620516.png" alt="image-20200730170620516" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200730174727048.png" alt="image-20200730174727048" loading="lazy"></p><p>还可以使用<code>restTemplate.postForObject</code>进行post提交</p></li></ol><h2 id="5、Eureka服务注册与发现"><a href="#5、Eureka服务注册与发现" class="headerlink" title="5、Eureka服务注册与发现"></a>5、Eureka服务注册与发现</h2><h3 id="5-1、什么是Eureka（尤里卡）"><a href="#5-1、什么是Eureka（尤里卡）" class="headerlink" title="5.1、什么是Eureka（尤里卡）"></a>5.1、什么是Eureka（尤里卡）</h3><ul><li><p>Netflix在设计Eureka时，遵循的就是AP原则</p></li><li><p>Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper</p></li></ul><h3 id="5-2、原理讲解"><a href="#5-2、原理讲解" class="headerlink" title="5.2、原理讲解"></a>5.2、原理讲解</h3><p>Eureka的基本架构</p><ul><li>SpringCloud封装了NetFlix公司开发的Eureka模块来实现服务注册和发现</li><li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心</li><li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维护<strong>心跳连接</strong>（太久没联系就没了）。这样系统的维护人员就可以通过EurekaServer来监控系统中的各个微服务是否正常运行，SpringCloud的一些其他模块就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑</li></ul><p><img src="https://img-blog.csdnimg.cn/20190703102014756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F3ZTg2MzE0,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><ul><li>Eureka包含两个组件：<strong>Eureka Server</strong>和<strong>Eureka Client</strong></li><li>Eureka Server：提供注册服务，各个节点启动后，会在EurekaServer中进行注册</li><li>Eureka Client：是一个java客户端，用于简化交互，将会向Eureka Server发送心跳（默认周期为30秒）。如果多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中将这个服务节点移除掉（默认周期为90秒）</li></ul><blockquote><p>三大角色</p></blockquote><ol><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：将自身服务注册到Eureka中，从而使消费方能够找到</li><li>Service Consumer：服务消费方从Eureka中获取注册服务列表，从而找到消费服务</li></ol><h3 id="5-3、创建一个注册中心"><a href="#5-3、创建一个注册中心" class="headerlink" title="5.3、创建一个注册中心"></a>5.3、创建一个注册中心</h3><ol><li><p>新建一个模块<code>springcloud-eureka-7001</code></p></li><li><p>导入依赖<code>spring-cloud-starter-eureka-server</code>1.4.6</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-eureka-server --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 热部署工具 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token comment" spellcheck="true"># Eureka配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost  <span class="token comment" spellcheck="true"># Eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 表示是否向Eureka注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 为false表示自己为注册中心</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 监控页面</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span> eureka.instance.hostname<span class="token punctuation">}</span> <span class="token punctuation">:</span>$<span class="token punctuation">{</span> server.port<span class="token punctuation">}</span> /eureka/</code></pre></li><li><p>编写主启动类，<code>EurekaServer_7001</code>开启功能  @EnableXXX</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServer_7001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServer_7001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动测试，可以访问到Eureka的默认页面</p><p><img src="/2020/08/02/SpringCloud/image-20200730221150033.png" alt="image-20200730221150033" loading="lazy"></p></li></ol><h3 id="5-4、进行注册"><a href="#5-4、进行注册" class="headerlink" title="5.4、进行注册"></a>5.4、进行注册</h3><ol><li><p>在<code>8001</code>项目中增加<code>Eureka</code>的maven依赖，导入<code>spring-cloud-startter-eureka</code></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-eureka --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>application.yml</code></p><pre class=" language-xml"><code class="language-xml"># Eureka的配置，注册到哪里eureka:  client:    service-url:      defaultZone: http://localhost:7001/eureka/</code></pre></li><li><p>在主启动类，开启注解支持<code>@EnableEurekaClient</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span>    <span class="token comment" spellcheck="true">// 在服务启动后自动注册到Eureka中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProvider_8001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProvider_8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试：先启动7001项目，然后开启8001</p></li><li><p>访问页面：</p><p><img src="/2020/08/02/SpringCloud/image-20200731102547529.png" alt="image-20200731102547529" loading="lazy"></p></li><li><p>修改项目描述</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept8001</code></pre><p>修改之后使用构建进行热部署，可能会出来下图警告，再次点击重建即可。</p><p><img src="/2020/08/02/SpringCloud/image-20200731102848470.png" alt="image-20200731102848470" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200731103046705.png" alt="image-20200731103046705" loading="lazy"></p><p>部署完之后会发现描述已经修改</p><p><img src="/2020/08/02/SpringCloud/image-20200731103125811.png" alt="image-20200731103125811" loading="lazy"></p></li></ol><blockquote><p>修改点击描述之后的页面内容</p></blockquote><ol><li><p>继续在<code>8001</code>项目中导入依赖<code>spring-boot-starter-actuator</code></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--actuator完善监控信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># info配置</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> xj<span class="token punctuation">-</span>springcloud  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> lxjblog.gitee.io</code></pre></li><li><p>重新启动8001进行测试</p><p><img src="/2020/08/02/SpringCloud/image-20200731104331435.png" alt="image-20200731104331435" loading="lazy"></p><p>会跳转显示我们刚才配置的信息</p><p><img src="/2020/08/02/SpringCloud/image-20200731104308003.png" alt="image-20200731104308003" loading="lazy"></p></li></ol><blockquote><p>然后就是上面那个爆红的问题</p></blockquote><ul><li>这是Eureka的<strong>自我保护机制</strong></li><li>某时刻某一微服务不可以使用了（就像刚才将8001项目停止），eureka不会立即清理，依旧会对该服务的信息进行保存，即仍然可以看到8001项目的信息，但是点进去描述网站会报错。【当一个服务崩了就会触发】</li><li>这是微服务的心跳连接，当超过90秒的时候就会出现上面爆红的情况，当接收的心跳数恢复到阈值以上时，该节点就会自动退出自我保护机制，然后红字会保留一段时间才恢复</li><li><strong>Eureka架构宁可同时保留所有的微服务，也不盲目注销任何健康的微服务</strong></li><li>在springcloud中，可以使用<code>eureka.server.enable-self-preservation = false</code>禁用自我保护机制【不推荐关闭】</li></ul><blockquote><p>对注册进来的微服务，获取信息</p></blockquote><ol><li><p>编写控制类，注意不要导错包，是<code>springframework</code>下的，不然显示无法自动装配</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取一些配置的信息，得到具体的微服务</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> DiscoveryClient client<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/discovery"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Object <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取微服务列表的清单</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> services <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"discovery==>services"</span> <span class="token operator">+</span> services<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 得到一个具体的微服务信息，通过id（微服务名称）获取</span>    List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> instances <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"SPRINGCLOUD-PROVIDER-DEPT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ServiceInstance instance <span class="token operator">:</span> instances<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span>            instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span>            instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span>            instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span>            instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在主启动类中增加注解<code>@EnableDiscoveryClient</code></p></li><li><p>热部署项目测试，只构建8001项目即可，不需要重启7001</p><p><img src="/2020/08/02/SpringCloud/image-20200731111733911.png" alt="image-20200731111733911" loading="lazy"></p></li><li><p>测试：访问<a href="http://localhost:8001/dept/discovery">http://localhost:8001/dept/discovery</a></p><p><img src="/2020/08/02/SpringCloud/image-20200731111908854.png" alt="image-20200731111908854" loading="lazy"></p><p>同时控制台输出对应的信息</p><p><img src="/2020/08/02/SpringCloud/image-20200731112030892.png" alt="image-20200731112030892" loading="lazy"></p></li></ol><p>小结：</p><ul><li>导入Eureka依赖<code>spring-cloud-starter-eureka</code></li><li>编写配置信息，即要注册到哪</li><li>开启注解支持<code>@EnableEurekaClient</code>，这样就可以把我们的服务注册到Eureka中</li><li>而通过导入<code>spring-boot-starter-actuator</code>可以配置描述的信息</li></ul><h3 id="5-5、Eureka集群配置"><a href="#5-5、Eureka集群配置" class="headerlink" title="5.5、Eureka集群配置"></a>5.5、Eureka集群配置</h3><ol><li><p>创建两个新模块<code>springcloud-eureka-7002</code>、<code>springcloud-eureka-7003</code></p></li><li><p>导入<code>7001</code>中的依赖，并分别复制配置文件，注意修改端口号</p></li><li><p>配置主启动类</p><p><img src="/2020/08/02/SpringCloud/image-20200731113941440.png" alt="image-20200731113941440" loading="lazy"></p></li><li><p>修改本地的端口号映射</p><p>打开如下目录：C:\Windows\System32\drivers\etc</p><p><img src="/2020/08/02/SpringCloud/image-20200731121057217.png" alt="image-20200731121057217" loading="lazy"></p><p>增加映射</p><p><img src="/2020/08/02/SpringCloud/image-20200731121354205.png" alt="image-20200731121354205" loading="lazy"></p><p>如果无法修改，只要右击hosts ==&gt; 属性 ==&gt; 去掉“只读”属性即可</p><p><img src="/2020/08/02/SpringCloud/image-20200731125532701.png" alt="image-20200731125532701" loading="lazy"></p><p>此时会弹出提示，点击允许操作即可</p><p><img src="/2020/08/02/SpringCloud/image-20200731124133143.png" alt="image-20200731124133143" loading="lazy"></p></li><li><p>分别修改配置文件，现在不再是关联自己，而是分别关联其他两个注册中心</p><p><img src="/2020/08/02/SpringCloud/image-20200731120033021.png" alt="image-20200731120033021" loading="lazy"></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token comment" spellcheck="true"># Eureka配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com  <span class="token comment" spellcheck="true"># Eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 表示是否向Eureka注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 为false表示自己为注册中心</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 监控页面</span>      <span class="token comment" spellcheck="true"># 单机：defaultZone: http://${ eureka.instance.hostname} :${ server.port} /eureka/</span>      <span class="token comment" spellcheck="true"># 集群（关联其他的注册中心）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre><p>其他两个配置文件以此类推，分别进行关联</p></li><li><p>修改<code>8001</code>的配置文件，注册到上面的3个注册中心中</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7003/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept8001</code></pre></li><li><p><strong>分别启动3个注册中心</strong>，发现每个注册中心都关联起其他两个（点击可进行跳转）</p><p><img src="/2020/08/02/SpringCloud/image-20200731124719543.png" alt="image-20200731124719543" loading="lazy"></p><p>也可以通过我们自定义的映射访问（因为太久没操作，开启了自我保护机制）</p><p><img src="/2020/08/02/SpringCloud/image-20200731125142475.png" alt="image-20200731125142475" loading="lazy"></p></li><li><p>启动<code>8001</code>项目进行注册，发现该服务成功注册到每个注册中心</p><p><img src="/2020/08/02/SpringCloud/image-20200731124942479.png" alt="image-20200731124942479" loading="lazy"></p></li></ol><p>【注意：该过程会比较占用电脑运行内存】</p><p><img src="/2020/08/02/SpringCloud/image-20200731125351923.png" alt="image-20200731125351923" loading="lazy"></p><h3 id="5-6、Eureka与Zookeeper的对比"><a href="#5-6、Eureka与Zookeeper的对比" class="headerlink" title="5.6、Eureka与Zookeeper的对比"></a>5.6、Eureka与Zookeeper的对比</h3><blockquote><h4 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h4></blockquote><p><img src="/2020/08/02/SpringCloud/image-20200731130600612.png" alt="image-20200731130600612" loading="lazy"></p><p>一致性（C）：在<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336">分布式系统</a>中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p><p>可用性（A）：在集群中一部分节点故障后，<a href="https://baike.baidu.com/item/%E9%9B%86%E7%BE%A4/5486962">集群</a>整体是否还能响应<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>的读写请求。（对数据更新具备高可用性）</p><p>分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</p><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。</p><blockquote><h4 id="Eureka与Zookeeper对比"><a href="#Eureka与Zookeeper对比" class="headerlink" title="Eureka与Zookeeper对比"></a>Eureka与Zookeeper对比</h4></blockquote><p>著名的CAP理论指出：一个分布式系统不可能同时满足C（一致性）、A（可用性）、p（容错性）。由于分区容错性P在分布式系统中是必须要保证的，因此我们只能在A和C之间进行权衡。</p><ul><li>Zookeeper保证的是CP；</li><li>Eureka保证的是AP；</li></ul><p>​    当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，服务注册功能对可用性的要求高于一致性。</p><p><strong>Zookeeper保证的是CP：</strong></p><p>​    当master主节点因为网络故障与其他节点失去联系的时候，剩余节点将会重新进行leader选举。而问题就在于，重新选择一个master主节点的时间太长，30~120s，且选举期间整个zookeeper集群都是不可用的，这就会导致选举期间注册服务瘫痪。</p><p><strong>Eureka保证的是AP:</strong></p><p>​    Eureka基于可用性的一点，所以<strong>各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依旧可以提供注册和查询服务，如果发现连接失败，会自动切换至其他节点。</p><p>​    只要有一台Eureka还在，就能保证注册服务的可用性，只不过查到的信息可能不是最新的。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现的网络故障，会出现以下几种情况：</p><ol><li>Eureka不再从注册列表中移除因为长时间没有收到心跳而应该过期的服务</li><li>Eureka依然能够接受新服务的注册和查询请求，但是不会被同步到其他节点（即保证当前节点仍然可用）</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ol><blockquote><p>因此Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。</p></blockquote><h2 id="6、Ribbon负载均衡"><a href="#6、Ribbon负载均衡" class="headerlink" title="6、Ribbon负载均衡"></a>6、Ribbon负载均衡</h2><p>中文文档：<a href="https://www.springcloud.cc/spring-cloud-netflix.html">https://www.springcloud.cc/spring-cloud-netflix.html</a></p><h3 id="6-1、Ribbon是什么"><a href="#6-1、Ribbon是什么" class="headerlink" title="6.1、Ribbon是什么"></a>6.1、Ribbon是什么</h3><ul><li><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户负载均衡的工具</strong></p></li><li><p>简单来说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon的客户端组件提供一系列完整的配置项如:连接超时、重试等等。简单的说,就是在配置文件中列岀 Load Balancer(简称LB:负载均衡)后面所有的机器, Ribbon会自动的帮助你基于某种规则(如简单轮询,随机连接等等)去连接这些机器。</p><p><img src="/2020/08/02/SpringCloud/image-20200731134003657.png" alt="image-20200731134003657" loading="lazy"></p></li></ul><p><strong>ribbon能干嘛？</strong></p><ul><li><p>LB，即负载均衡( Load Balance),在微服务或分布式集群中经常用的一种应用</p></li><li><p><strong>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上,从而达到系统的HA(高可用)。</strong></p></li><li><p>常见的负载均衡软件有 Nginx,Lvs等等</p></li><li><p>dubbo、 Spring Cloud中均给我们提供了负载均衡, Spring Cloud的负载均衡算法可以自定义</p></li><li><p>负载均衡简单分类</p><p><strong>集中式LB</strong>：即在服务的消费方和提供方之间使用独立的LB设施,如Ngin,由该设施负责把访问请求通过某种策略转发至服务的提供方。</p><p><strong>进程式LB：</strong>将LB逻辑集成到消费方,消费方从服务注册中心获知有哪些地址可用,然后自己再从这些地址中选出一个合适的服务器。Ribbon就属于进程内LB,它只是一个类库,集成于消费方进程,消费方通过它来获取到服务提供方</p></li></ul><h3 id="6-2、Ribbon集成测试"><a href="#6-2、Ribbon集成测试" class="headerlink" title="6.2、Ribbon集成测试"></a>6.2、Ribbon集成测试</h3><ol><li><p>在<code>消费者</code>项目中，导入Ribbon依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-netflix-ribbon --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>导入eureka依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-eureka --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Eureka的配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 不向Eureka中注册自己</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre></li><li><p>主启动类中增加注解@EnableEurekaClient</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumer_80</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptConsumer_80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写配置类，配置负载均衡实现类RestTemplate</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Configuration 注解相当于Spring中的applicationContext.xml，然后在里面注册bean</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigBean</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>修改控制类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里我们访问的地址应该是一个变量，通过服务名来访问</span><span class="token comment" spellcheck="true">// private static final String REST_URL_PREFIX = "http://localhost:8001";</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REST_URL_PREFIX <span class="token operator">=</span> <span class="token string">"http://SPRINGCLOUD-PROVIDER-DEPT"</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/SpringCloud/image-20200731142103249.png" alt="image-20200731142103249" loading="lazy"></p></li><li><p>启动测试，开启注册中心 ==&gt; 开启提供者 ==&gt; 开启消费者</p></li><li><p>访问：<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a></p><p><img src="/2020/08/02/SpringCloud/image-20200731142555064.png" alt="image-20200731142555064" loading="lazy"></p><p>消费者可以查询出相应的数据就OK了</p></li></ol><h3 id="6-3、负载均衡的实现"><a href="#6-3、负载均衡的实现" class="headerlink" title="6.3、负载均衡的实现"></a>6.3、负载均衡的实现</h3><blockquote><p>创建多个相同服务提供者，消费者访问的时候会轮询从3个提供者中查询</p></blockquote><p><img src="/2020/08/02/SpringCloud/image-20200731143357873.png" alt="image-20200731143357873" loading="lazy"></p><ol><li><p>创建新的数据库，将<code>db01</code>数据库进行右击导出备份</p><p><img src="/2020/08/02/SpringCloud/image-20200731143548473.png" alt="image-20200731143548473" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200731143832503.png" alt="image-20200731143832503" loading="lazy"></p></li><li><p>使用指令创建新的数据库，创建<code>db02</code>和<code>db03</code>项目</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token number">db02</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token number">db02</span><span class="token punctuation">;</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for dept</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span>  <span class="token punctuation">(</span>    <span class="token punctuation">`</span>deptno<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>dname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>db_source<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>deptno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'部门表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'开发部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'人事部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'市场部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'运营部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span>db_source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'娱乐部'</span><span class="token punctuation">,</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在IDEA中导入三个数据库</p><p><img src="/2020/08/02/SpringCloud/image-20200731145316004.png" alt="image-20200731145316004" loading="lazy"></p></li><li><p>创建新的提供者，<code>8002</code>、<code>8003</code></p></li><li><p>拷贝依赖和配置文件</p></li><li><p><strong>修改配置文件中的端口和数据库名字、描述名称</strong></p></li><li><p>拷贝mybatis配置文件</p></li><li><p>拷贝其余的所有文件</p></li><li><p><strong>只需要修改各自的主启动类即可</strong></p><p><strong>所以上面三个提供者只有数据库不同而已</strong></p></li><li><p>依次启动服务（只需要一个注册中心就行），其中会看到提供者会出现报错，这是因为没有启动所有注册中心，但这并不影响</p></li><li><p>启动成功之后访问：<a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a></p><p>第一次我们访问到的是db02数据库</p><p><img src="/2020/08/02/SpringCloud/image-20200731151422655.png" alt="image-20200731151422655" loading="lazy"></p><p>刷新网页，我们访问到是db03数据库</p><p><img src="/2020/08/02/SpringCloud/image-20200731151508656.png" alt="image-20200731151508656" loading="lazy"></p><p>在刷新就是访问到db01数据库</p><p><img src="/2020/08/02/SpringCloud/image-20200731151546458.png" alt="image-20200731151546458" loading="lazy"></p></li></ol><p><strong>这就是Ribbon的轮询负载均衡机制</strong></p><h3 id="6-4、自定义负载均衡算法"><a href="#6-4、自定义负载均衡算法" class="headerlink" title="6.4、自定义负载均衡算法"></a>6.4、自定义负载均衡算法</h3><ol><li><p>算法查询，进入IRule查看实现的方法</p><ul><li>IRule</li><li>RoundRobonRule：轮询</li><li>RandomRule：随机</li><li>AvailabilityFilteringRule：会先过滤掉，跳闸，访问故障的服务，对剩下的进行轮询</li><li>RetryRule：会先按照轮询获得服务，如果服务获取失败，则会在指定的时间内进行重试</li></ul><p><img src="/2020/08/02/SpringCloud/image-20200731164333644.png" alt="image-20200731164333644" loading="lazy"></p></li><li><p>自定义Ribbon，通过在主启动类中添加注解配置</p><p><img src="/2020/08/02/SpringCloud/image-20200731163146688.png" alt="image-20200731163146688" loading="lazy"></p></li><li><p><strong>注意：需要采取措施避免包含（例如将其放在一个单独的，不重叠的包中，或者指定要在<code>@ComponentScan</code>）</strong></p><p>所以我们需要在<code>springcloud</code>同级目录下创建我们自己的查询算法！</p><p><img src="/2020/08/02/SpringCloud/image-20200731165125164.png" alt="image-20200731165125164" loading="lazy"></p></li><li><p>创建控制类，修改查询算法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRule</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">iRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 先使用默认的随机查询进行测试</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>修改完之后要在主启动类中进行注解配置</p><p><code>name</code>为我们应用程序的名称，<code>configuration</code>是我们自定义的查询控制类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER-DEPT"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> MyRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumer_80</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptConsumer_80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动项目进行测试，此时我们的查询算法为随机的</p><p><img src="/2020/08/02/SpringCloud/image-20200731165951172.png" alt="image-20200731165951172" loading="lazy"></p></li><li><p>拷贝随机查询的算法代码，创建我们自己的算法：每个服务获取3次数据，然后切换到下一个服务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IClientConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>AbstractLoadBalancerRule<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>ILoadBalancer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>Server<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadLocalRandom<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRandomRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 我们自定义：每个服务获取3次数据，然后切换到下一个服务</span>    <span class="token comment" spellcheck="true">// total为访问的次数，currentIndex为哪一个服务</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE")</span>    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>ILoadBalancer lb<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>lb <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         Server server <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 服务中断</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             List<span class="token operator">&lt;</span>Server<span class="token operator">></span> upList <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取活着的服务列表</span>            List<span class="token operator">&lt;</span>Server<span class="token operator">></span> allList <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取所有的服务列表</span>            <span class="token keyword">int</span> serverCount <span class="token operator">=</span> allList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>serverCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 没有服务就退出</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 默认的随机算法</span>            <span class="token comment" spellcheck="true">// int index = chooseRandomInt(serverCount);   // 获得随机的字数</span>            <span class="token comment" spellcheck="true">// server = upList.get(index); // 从活着的服务中随机获取一个服务</span>            <span class="token comment" spellcheck="true">// 自定义算法</span>            <span class="token comment" spellcheck="true">// =========================================================</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>total <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 这里2次加上下方的1次，就为3次切换服务</span>                server <span class="token operator">=</span> upList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                total<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>currentIndex <span class="token operator">>=</span> upList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 server <span class="token operator">=</span> upList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// =========================================================</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             server <span class="token operator">=</span> null<span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> server<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">chooseRandomInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> serverCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>serverCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>创建好算法之后，我们需要在控制类中调用我们的算法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRule</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">iRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyRandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>重启<code>消费者</code>项目进行测试，发现只要刷新3次就会改变服务</p></li></ol><h2 id="7、Feign接口编程"><a href="#7、Feign接口编程" class="headerlink" title="7、Feign接口编程"></a>7、Feign接口编程</h2><h3 id="7-1、简介"><a href="#7-1、简介" class="headerlink" title="7.1、简介"></a>7.1、简介</h3><p><code>feign[feɪn]</code>是声明式的web service客户端，它让微服务之间调用变得更简单了，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Frign时提供负载均衡的http客户端。</p><p>只需要创建一个接口，然后添加注解即可！符合面向接口编程。</p><blockquote><p>调用微服务访问两种方法</p></blockquote><ol><li>微服务名字【ribbon】</li><li>接口和注解【feign】</li></ol><p><strong>Feign能干嘛</strong></p><ul><li>Feign旨在编写Java Http客户端变得更容易</li><li>在使用上，我们只需要创建一个接口并使用注解的方式来配置它，<strong>类似于之前在<code>mapper</code>接口上编注<code>Mapper注解</code>，现在时一个微服务接口上面标注一个<code>Feign注解</code>即可。</strong></li></ul><p><strong>Feign集成了Ribbon</strong></p><ul><li>而不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务的调用</li></ul><h3 id="7-2、Feign使用步骤"><a href="#7-2、Feign使用步骤" class="headerlink" title="7.2、Feign使用步骤"></a>7.2、Feign使用步骤</h3><ol><li><p>创建新模块<code>springcloud-consumer-dept-feign</code>（也是作为消费者）</p></li><li><p>拷贝<code>80</code>项目的内容到当前项目</p></li><li><p>再导入feign的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-feign --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在<code>springcloud-api</code>项目中也导入feign的依赖</p></li><li><p>创建<code>service</code>目录，编写业务类<code>DeptService</code>，让所有的服务可以使用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER-DEPT"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 关联到我们的服务类</span><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">// 交给Spring托管</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>修改<code>springcloud-consumer-dept-feign</code>项目的控制类代码，使得更加类似于我们的一般写法，调用接口实现数据库操作。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumerController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获得业务类接口</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">addDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在主启动类中启动Feign</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"com.xj.springcloud"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumer_feign</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptConsumer_feign<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试：访问成功</p><p><img src="/2020/08/02/SpringCloud/image-20200731183351047.png" alt="image-20200731183351047" loading="lazy"></p></li></ol><p><strong>小结：</strong></p><ul><li>我们需要在<code>api</code>和<code>消费者</code>项目中增加Feign依赖</li><li>在<code>api</code>项目中创建业务类接口，<strong>关联服务名</strong>，并交给Spring托管（即添加两个注解）而接口代码与<code>提供者</code>中的控制类代码相同，但不需要实现体（即在方法上添加XXXMapper注解）。</li><li>然后在<code>消费者</code>项目中自动装配业务类接口，并调用方法，最后在主启动类中启动Feign注解<code>@EnableFeignClients(basePackages = { &quot;com.xj.springcloud&quot;} )</code></li></ul><blockquote><p>总之，Feign使我们的代码可以使用业务类进行数据操作，属于面向接口的编程，同时Feign使我们在原有的代码基础上多加了一层（业务层），使得代码的可读性提高了，但也降低了我们服务的性能（毕竟代码量增多了）</p></blockquote><h2 id="8、Hystrix保护机制"><a href="#8、Hystrix保护机制" class="headerlink" title="8、Hystrix保护机制"></a>8、Hystrix保护机制</h2><p><code>Hystrix [hɪst&#39;rɪks]</code>，中文含义是<strong>豪猪</strong>，因其背上长满棘刺，从而拥有了自我保护的能力。本文所说的Hystrix是Netflix开源的一款容错框架，同样具有自我保护能力。为了实现容错和自我保护。</p><blockquote><p>分布系统面临的问题</p></blockquote><p>​    复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败！</p><blockquote><p>服务雪崩</p></blockquote><p>​    多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”、如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>​    对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟内饱和，比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><h3 id="8-1、什么是Hystrix-豪猪"><a href="#8-1、什么是Hystrix-豪猪" class="headerlink" title="8.1、什么是Hystrix(豪猪)"></a>8.1、什么是Hystrix(豪猪)</h3><p>​    Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多以来不可避免的会调用失败，比如超时，异常等。Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p><img src="/2020/08/02/SpringCloud/image-20200801105816572.png" alt="image-20200801105816572" loading="lazy"></p><p>​    “断路器”本身就是一个开关装置，当某一个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝）。向调用方返回一个服务预期的，可处理的备选响应（FallBack），而不是长时间的等待或抛出调用方法无法处理的异常，这样就可以保证服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><blockquote><p>能干嘛</p></blockquote><ul><li><p>服务降级</p></li><li><p>服务熔断</p></li><li><p>服务限流</p></li><li><p>接近实时的监控</p></li><li><p>……</p></li></ul><p><strong>官网资料：</strong><a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><h3 id="8-2、服务熔断"><a href="#8-2、服务熔断" class="headerlink" title="8.2、服务熔断"></a>8.2、服务熔断</h3><p>熔断机制是对应雪崩效应的一种微服务链路保护机制</p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点的微服务调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里的熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省5秒内20次调用失败就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><blockquote><p>测试</p></blockquote><ol><li><p>创建新模块<code>springcloud-provider-dept-hystrix-8001</code></p></li><li><p>拷贝<code>8001</code>项目到新项目中</p></li><li><p>修改主启动类名称</p></li><li><p>导入<code>Hystrix</code>依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-hystrix --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件，修改Eureka上的描述</p></li><li><p>编写控制类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"hystrixGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>         Dept dept <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dept <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Dept <span class="token function">hystrixGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDname</span><span class="token punctuation">(</span><span class="token string">"id ==>"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"没有对应的信息，null——Hystrix"</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"no this database in MySQL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>开启断路器的支持</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span>   <span class="token comment" spellcheck="true">// 开启熔断机制</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProviderHystrix_8001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProviderHystrix_8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动测试，开启<code>注册中心</code>=》开启刚创建的<code>提供者</code>=》开启<code>消费者</code>（改为了81端口）=》进行错误查询测试</p><p><img src="/2020/08/02/SpringCloud/image-20200801114921776.png" alt="image-20200801114921776" loading="lazy"></p></li><li><p>修改配置类（浏览器左下角显示真实的ip）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span><span class="token number">8001</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 显示真实的IP地址</span></code></pre><p><img src="/2020/08/02/SpringCloud/image-20200801114833325.png" alt="image-20200801114833325" loading="lazy"></p></li></ol><h3 id="8-3、服务降级"><a href="#8-3、服务降级" class="headerlink" title="8.3、服务降级"></a>8.3、服务降级</h3><blockquote><p>服务降级是在客户端做的操作</p></blockquote><p>为了让A微服务不会崩溃，停用了闲置的服务器，把C的服务终止~所以我们在服务被关闭的时候需要进行相应的提示</p><p><img src="/2020/08/02/SpringCloud/image-20200801120913812.png" alt="image-20200801120913812" loading="lazy"></p><p><strong>测试:</strong></p><ol><li><p>在<code>api</code>项目中创建一个业务类<code>DeptServiceFallback</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceFallback</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> DeptService <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 返回一个实现了的接口</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeptService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDname</span><span class="token punctuation">(</span><span class="token string">"id=>"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 以下方法也可以进行相应的处理</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在业务类中关联到我们的降级业务，使用<code>fallbackFactory</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER-DEPT"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> DeptServiceFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 关联到我们的服务类</span><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">// 交给Spring托管</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{ id} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>因为使用的是Feign的支持，所以需要修改<code>springcloud-consumer-dept-feign</code>的配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Feign配置</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>启动测试：<code>注册中心</code> =》 <code>提供者</code> =》 <code>feign消费者</code></p><p>正常访问</p><p><img src="/2020/08/02/SpringCloud/image-20200801130145311.png" alt="image-20200801130145311" loading="lazy"></p><p>把<code>提供者</code>关闭测试，显示出我们的降级信息</p><p><img src="/2020/08/02/SpringCloud/image-20200801130227685.png" alt="image-20200801130227685" loading="lazy"></p></li></ol><p><strong>小结</strong>:</p><ul><li><p>在API项目中，创建<code>处理异常的业务类</code>，实现<code>FallbackFactory</code>接口，返回主要业务的接口并实现</p></li><li><p>在主业务中通过在<code>@FeignClient</code>注解中添加<code>fallbackFactory</code>属性，关联到异常业务</p></li><li><p>在<code>消费者</code>项目的配置文件中进行配置，开启<code>feign.hystrix.enabled = true</code></p></li></ul><h3 id="8-4、Dashboard流监控"><a href="#8-4、Dashboard流监控" class="headerlink" title="8.4、Dashboard流监控"></a>8.4、Dashboard流监控</h3><ol><li><p>创建新模块<code>springcloud-consumer-hystrix-dashboard</code></p></li><li><p>导入<code>消费者</code>的依赖，然后再导入Hystrix依赖，以及Dashboard监控</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-hystrix --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-hystrix-dashboard --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>application.yml</code>，编写端口号<code>9001</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span></code></pre></li><li><p>创建主启动类，增加开启Dashboard注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboard9001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixDashboard9001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>注意：每个<code>提供者</code>项目都需要有监控的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--actuator完善监控信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动主启动类测试，进去hystrix页面，可以看到一只豪猪即可</p><p><img src="/2020/08/02/SpringCloud/image-20200801133128840.png" alt="image-20200801133128840" loading="lazy"></p></li><li><p>修改<code>springcloud-provider-dept-hystrix-8001</code>项目，必须是有熔断机制的那个项目！！！【折腾了好久】</p><p>增加一个Bean进行注册</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span>   <span class="token comment" spellcheck="true">// 开启熔断机制</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProviderHystrix_8001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProviderHystrix_8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 增加一个Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">hystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/actuator/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动<code>7001</code> =&gt; 监控页面<code>9001</code> =&gt; <code>8001</code>进行注册</p></li><li><p>先访问<a href="http://localhost:8001/dept/get/1">http://localhost:8001/dept/get/1</a></p><p><img src="/2020/08/02/SpringCloud/image-20200801152738823.png" alt="image-20200801152738823" loading="lazy"></p><p>然后访问<a href="http://localhost:8001/actuator/hystrix.stream">http://localhost:8001/actuator/hystrix.stream</a></p><p>可以看到监控出来的一推数据</p><p><img src="/2020/08/02/SpringCloud/image-20200801152820894.png" alt="image-20200801152820894" loading="lazy"></p></li><li><p>访问：<a href="http://localhost:9001/hystrix%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BE%93%E5%85%A5%E8%A6%81%E7%9B%91%E6%8E%A7%E7%9A%84%E9%A1%B5%E9%9D%A2http://localhost:8001/actuator/hystrix.stream">http://localhost:9001/hystrix页面，输入要监控的页面http://localhost:8001/actuator/hystrix.stream</a></p><p><img src="/2020/08/02/SpringCloud/image-20200801153011869.png" alt="image-20200801153011869" loading="lazy"></p><p>不断刷新我们的访问页面<a href="http://localhost:8001/dept/get/1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%87%8C%E9%9D%A2%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7">http://localhost:8001/dept/get/1，可以看到里面的实时监控</a></p><p><img src="/2020/08/02/SpringCloud/image-20200801152549620.png" alt="image-20200801152549620" loading="lazy"></p></li></ol><blockquote><h4 id="内容含义"><a href="#内容含义" class="headerlink" title="内容含义"></a>内容含义</h4></blockquote><ul><li><h4 id="一圆"><a href="#一圆" class="headerlink" title="一圆"></a>一圆</h4><p>实心圆：总共有两种含义，它通过颜色的变化代表了实例的健康程度</p><p>它的健康程度从绿色&lt; 黄色 &lt; 橙色 &lt; 红色 递减</p><p>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大，该实心圆就越大，所以通过该实心圆的展示，就可以在大量的实例中快速发现<strong>故障实例和高压力实例</strong>。</p><p><img src="/2020/08/02/SpringCloud/image-20200801153546084.png" alt="image-20200801153546084" loading="lazy"></p><p>比如：当我们一直访问错误的页面的时候，就会变为红色</p><p><img src="/2020/08/02/SpringCloud/image-20200801154019115.png" alt="image-20200801154019115" loading="lazy"></p></li><li><h4 id="一线"><a href="#一线" class="headerlink" title="一线"></a>一线</h4><p>曲线用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势！</p><p><img src="/2020/08/02/SpringCloud/image-20200801153701943.png" alt="image-20200801153701943" loading="lazy"></p></li><li><h4 id="整图说明"><a href="#整图说明" class="headerlink" title="整图说明"></a>整图说明</h4><p><img src="/2020/08/02/SpringCloud/image-20200801153836448.png" alt="image-20200801153836448" loading="lazy"></p></li></ul><h2 id="9、Zuul路由网关"><a href="#9、Zuul路由网关" class="headerlink" title="9、Zuul路由网关"></a>9、Zuul路由网关</h2><p><img src="/2020/08/02/SpringCloud/image-20200801170826742.png" alt="image-20200801170826742" loading="lazy"></p><h3 id="9-1、什么是Zuul"><a href="#9-1、什么是Zuul" class="headerlink" title="9.1、什么是Zuul"></a>9.1、什么是Zuul</h3><p>官方文档：<a href="https://github.com/Netflix/zuul/wiki">https://github.com/Netflix/zuul/wiki</a></p><p><img src="/2020/08/02/SpringCloud/image-20200801154518122.png" alt="image-20200801154518122" loading="lazy"></p><p>Zuul包含了对请求的路由和过滤的两个最主要的功能：</p><p>其中路由功能负责将外部请求转发到具体的微服务实力上（即通过域名转发到我们真实的地址），是实现外部访问统一入口（即整合我们的所有端口）的基础，而过滤功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。</p><p><img src="/2020/08/02/SpringCloud/image-20200801155409190.png" alt="image-20200801155409190" loading="lazy"></p><p>Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他微服务的消息，即以后的访问微服务都是通过Zuul跳转后获得。</p><ul><li>注意：Zuul服务最终还是会注册进Eureka</li><li>提供：代理 + 路由 + 过滤 三大功能！</li></ul><h3 id="9-2、项目测试"><a href="#9-2、项目测试" class="headerlink" title="9.2、项目测试"></a>9.2、项目测试</h3><ol><li><p>新建模块<code>springcloud-zuul-6001</code></p></li><li><p>导入<code>springcloud-consumer-hystrix-dashboard</code>的所有依赖</p></li><li><p>导入zuul依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-zuul --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>application.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>zuul    <span class="token comment" spellcheck="true"># 应用程序名</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> zuul6001.com    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> springcloud  <span class="token key atrule">companny.name</span><span class="token punctuation">:</span> blog.springcloud.com</code></pre></li><li><p>创建主启动类，开启zuul代理注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableZuulProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zuul_6001</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Zuul_6001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动<code>7001</code>，启动<code>8001</code>，启动<code>6001</code></p></li><li><p>进入<code>7001</code>，看到两个应用程序那就没问题</p><p><img src="/2020/08/02/SpringCloud/image-20200801163000754.png" alt="image-20200801163000754" loading="lazy"></p></li><li><p>然后进入<a href="http://localhost:8001/dept/get/1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E6%95%B0%E6%8D%AE">http://localhost:8001/dept/get/1可以访问到数据</a></p><p><img src="/2020/08/02/SpringCloud/image-20200801163043791.png" alt="image-20200801163043791" loading="lazy"></p><p>然后使用<code>6001</code>项目进行访问<a href="http://localhost:6001/springcloud-provider-dept/dept/get/1%EF%BC%8C%E5%90%8C%E6%A0%B7%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0">http://localhost:6001/springcloud-provider-dept/dept/get/1，同样可以访问到</a></p><p>使用<code>http://localhost:6001</code> 加 <code>要访问的应用名（小写形式）</code> 加<code>查询的内容</code></p><p><img src="/2020/08/02/SpringCloud/image-20200801163245212.png" alt="image-20200801163245212" loading="lazy"></p></li></ol><h3 id="9-3、路由网关的配置"><a href="#9-3、路由网关的配置" class="headerlink" title="9.3、路由网关的配置"></a>9.3、路由网关的配置</h3><blockquote><p>通过配置文件的配置，我们可以正式实现：</p><ol><li>统一的访问地址（路由） XXX.path</li><li>拦截（过滤）直接访问真实的地址ignored-services:</li></ol></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token key atrule">mydept.serviceId</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept <span class="token comment" spellcheck="true"># 绑定原来的服务名称</span> <span class="token key atrule">mydepr.path</span><span class="token punctuation">:</span> mydept <span class="token comment" spellcheck="true"># 自定义服务名称</span><span class="token comment" spellcheck="true"># ignored-services: springcloud-provider-dept # 不能再使用这个路径访问了</span>  <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> <span class="token string">"*"</span>  <span class="token comment" spellcheck="true"># 只能使用自定义服务名访问</span>  <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /xj</code></pre><p>   路由的设置：<strong>自定义属性前缀，后缀从下图的属性中选择</strong></p><p><img src="/2020/08/02/SpringCloud/image-20200801163834026.png" alt="image-20200801163834026" loading="lazy"></p><p><img src="/2020/08/02/SpringCloud/image-20200801163814040.png" alt="image-20200801163814040" loading="lazy"></p><p>   其他更多的配置可以在源码中查看</p><p><img src="/2020/08/02/SpringCloud/image-20200801164219768.png" alt="image-20200801164219768" loading="lazy"></p><blockquote><h4 id="开启测试"><a href="#开启测试" class="headerlink" title="开启测试"></a>开启测试</h4></blockquote><p><img src="/2020/08/02/SpringCloud/image-20200801164644932.png" alt="image-20200801164644932" loading="lazy"></p><p><strong>需要有前缀和自定义名称才可以访问</strong></p><p><img src="/2020/08/02/SpringCloud/image-20200801165957432.png" alt="image-20200801165957432" loading="lazy"></p><p><strong>现在我们可以使用<code>6001</code>端口访问原来<code>8001</code>、<code>8002</code>、<code>8003</code>的内容了</strong></p><h2 id="10、SpringCloud-Config配置"><a href="#10、SpringCloud-Config配置" class="headerlink" title="10、SpringCloud Config配置"></a>10、SpringCloud Config配置</h2><p>可以使用Github、Coding以及码云，但是码云是速度最快的。</p><h3 id="10-1、概述"><a href="#10-1、概述" class="headerlink" title="10.1、概述"></a>10.1、概述</h3><blockquote><p>分布式系统面临的配置文件的问题</p></blockquote><p>微服务意味着要将单个应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。SpringCould提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个<code>application.yml</code>，那上百个的配置文件要修改起来，岂不是要发疯！</p><blockquote><p>什么是SpringCloud Config分布式配置中心</p></blockquote><p><img src="/2020/08/02/SpringCloud/image-20200801194254910.png" alt="image-20200801194254910" loading="lazy"></p><p>SpringCould Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为每<strong>个不同微服务应用</strong>的所有环节提供了一个<strong>中心化的外部配置</strong>。</p><p>SpringCloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分；</p><ul><li>服务端也成为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器为客户端提供配置信息，加密，解密信息等访问接口</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可以通过git客户端工具来方便的管理和访问配置内容。</li></ul><blockquote><p>SpringCloud Config配置中心能干嘛</p></blockquote><ul><li>集中管理配置文件</li><li>不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev  /test  /prop  /beta  /release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置【需要热部署插件】</li><li>将配置信息以REST接口的形式暴露</li></ul><blockquote><p>SpringCloud Config分布式配置中心与Github整合</p></blockquote><ul><li>由于SpringCloud Config默认使用Git来存储配置文件，也有其他方式，比如支持SVN和本地文件，但最推荐的还是Git，而且使用的是http/https访问的形式</li></ul><h3 id="10-2、环境搭建"><a href="#10-2、环境搭建" class="headerlink" title="10.2、环境搭建"></a>10.2、环境搭建</h3><ol><li><p>安装和使用Git：这个可以在docsify文档中查看</p></li><li><p>创建新仓库<code>springcloud_config</code></p></li><li><p>向仓库提交<code>application.yml</code>文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>dev<span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>test</code></pre></li><li><p>新建模块<code>springcloud-config-server-3344</code></p></li><li><p>导入依赖（先不需要导入Eureka，不然会一直刷）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring-boot-starter-web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--actuator完善监控信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-cloud-config-server --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>server  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxjblog/springcloud_config.git <span class="token comment" spellcheck="true"># 这里使用的是Https 不是SSH</span></code></pre></li><li><p>编写主启动类<code>Config_Server_3344</code>，开启服务注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config_Server_3344</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Config_Server_3344<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动该项目测试，访问<code>application-dev.yml</code>，可以输出文件中的内容</p><p><img src="/2020/08/02/SpringCloud/image-20200801215607431.png" alt="image-20200801215607431" loading="lazy"></p><p>因为我们在<code>application.yml</code>文件中使用了<code>---</code>形成多文档块</p></li></ol><blockquote><p>除此之外，还有以下几种访问方式：</p></blockquote><ul><li><p>application为文件名，profile为工作环境，label为分支（master）</p></li><li><p>/{application}/{profile}[/{label}]</p></li><li><p>/{application}-{profile}.yml    【上方就是这种】</p></li><li><p>/{label}/{application}-{profile}.yml</p></li><li><p>/{application}-{profile}.properties</p></li><li><p>/{label}/{application}-{profile}.properties</p></li></ul><h3 id="10-3、Config客户端"><a href="#10-3、Config客户端" class="headerlink" title="10.3、Config客户端"></a>10.3、Config客户端</h3><blockquote><p>对客户端来说只是访问本地文件，然后通过服务端帮我们去进行查询</p></blockquote><ol><li><p>创建<code>config-client.yml</code>文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8201</span><span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept<span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8202</span><span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept<span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/</code></pre></li><li><p>提交到码云上</p><p><img src="/2020/08/02/SpringCloud/image-20200801221259049.png" alt="image-20200801221259049" loading="lazy"></p></li><li><p>创建新模块<code>springcloud-config-client-3355</code></p></li><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring-boot-starter-web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--actuator完善监控信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-config --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>bootstrap.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 系统级别的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client   <span class="token comment" spellcheck="true"># 需要从git上获取的文件名，不需要后缀</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment" spellcheck="true"># 工作环境</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment" spellcheck="true"># 主分支</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344    </span><span class="token comment" spellcheck="true"># 服务端的地址</span></code></pre><p>编写配置文件<code>application.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 用户级别的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client</code></pre><p>注意区别：</p><p><code>bootstrap</code>：是系统级别的配置，因为连接到远端可能会出错，所以这里使用这个</p><p><code>application</code>：用户级别的配置</p></li><li><p>编写控制类<code>ConfigClientController</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${ spring.application.name} "</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String applicationName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${ eureka.client.service-url.defaultZone} "</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String eurekaServer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${ server.port} "</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"applicationName: "</span> <span class="token operator">+</span> applicationName <span class="token operator">+</span>                <span class="token string">"eurekaServer: "</span> <span class="token operator">+</span> eurekaServer <span class="token operator">+</span>                <span class="token string">"port: "</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写主启动类测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config_Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Config_Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>启动<code>3344</code>和当前项目进行测试</p><p><img src="/2020/08/02/SpringCloud/image-20200801224244058.png" alt="image-20200801224244058" loading="lazy"></p><p>【注意：当前项目的端口号是8201，这是读取到git上的文件，因为在<code>bootstrap.yml</code>中我们配置了<code>profile: dev</code>  访问dev环境，**所以我们可以通过远端配置我们项目的端口号信息了，使代码可读性降低~**】</p></li><li><p>访问测试，成功读取到信息</p><p><img src="/2020/08/02/SpringCloud/image-20200801225244514.png" alt="image-20200801225244514" loading="lazy"></p></li><li><p>当我们把<code>bootstrap.yml</code>文件的环境改为test</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> test    <span class="token comment" spellcheck="true"># 工作环境</span></code></pre><p><img src="/2020/08/02/SpringCloud/image-20200801225123260.png" alt="image-20200801225123260" loading="lazy"></p></li></ol><h3 id="10-4、远程配置实战"><a href="#10-4、远程配置实战" class="headerlink" title="10.4、远程配置实战"></a>10.4、远程配置实战</h3><h4 id="代码上传"><a href="#代码上传" class="headerlink" title="代码上传"></a>代码上传</h4><ol><li><p>编写远程配置<code>config-eureka.yml</code>集群的注册中心</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>eureka<span class="token comment" spellcheck="true"># Eureka配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com  <span class="token comment" spellcheck="true"># Eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 表示是否向Eureka注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 为false表示自己为注册中心</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 监控页面</span>      <span class="token comment" spellcheck="true"># 集群（关联其他的注册中心）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>eureka<span class="token comment" spellcheck="true"># Eureka配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com  <span class="token comment" spellcheck="true"># Eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 表示是否向Eureka注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 为false表示自己为注册中心</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 监控页面</span>      <span class="token comment" spellcheck="true"># 集群（关联其他的注册中心）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre></li><li><p>创建<code>config-dept.yml</code>文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment" spellcheck="true"># mybatis配置</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xj.springcloud.pojo  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db01<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept8001<span class="token comment" spellcheck="true"># info配置</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> xj<span class="token punctuation">-</span>springcloud  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> lxjblog.gitee.io<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token comment" spellcheck="true"># mybatis配置</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xj.springcloud.pojo  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span class="token comment" spellcheck="true"># Spring的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db02<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;createDatabaseIfNotExist</span>=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token comment" spellcheck="true"># Eureka的配置，注册到哪里</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept8001<span class="token comment" spellcheck="true"># info配置</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> xj<span class="token punctuation">-</span>springcloud  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> lxjblog.gitee.io</code></pre></li><li><p>提交到码云上</p><p><img src="/2020/08/02/SpringCloud/image-20200801230901167.png" alt="image-20200801230901167" loading="lazy"></p></li></ol><h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><ol><li><p>创建新模块<code>springcloud-config-eureka-7001</code></p></li><li><p>拷贝原来的内容</p></li><li><p>导入config依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-eureka-server --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--热部署工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-config --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>bootstrap.yml</code></p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    config:      name: config-eureka      label: master      profile: dev      uri: http://localhost:3344</code></pre><p>编写<code>application.yml</code>文件</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: springcloud-config-eureka-7001</code></pre></li><li><p>启动访问：启动<code>3344</code>，测试是否可以读取到信息</p><p><img src="/2020/08/02/SpringCloud/image-20200801232501527.png" alt="image-20200801232501527" loading="lazy"></p><p>没问题，然后使用客户端进行连接，访问成功即可</p><p><img src="/2020/08/02/SpringCloud/image-20200801233031253.png" alt="image-20200801233031253" loading="lazy"></p></li></ol><blockquote><p>创建新的8001提供者</p></blockquote><ol><li><p>创建新模块<code>springcloud-config-dept-8001</code></p></li><li><p>拷贝内容，依赖和代码</p></li><li><p>添加congfig的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-config --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件<code>bootstrap.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>dept      <span class="token key atrule">label</span><span class="token punctuation">:</span> master      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span></code></pre><p><code>application.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>dept<span class="token punctuation">-</span><span class="token number">8001</span></code></pre></li><li><p>修改启动类名称</p></li><li><p>启动项目测试</p><p><img src="/2020/08/02/SpringCloud/image-20200801233919518.png" alt="image-20200801233919518" loading="lazy"></p></li><li><p>访问测试：成功查询出数据</p><p><img src="/2020/08/02/SpringCloud/image-20200801234042999.png" alt="image-20200801234042999" loading="lazy"></p></li></ol><p><strong>【注意：客户端会在程序启动的时候获取服务的配置文件信息，所以当你直接在git上修改数据之后，使用客户端获取到的数据仍然是更新前的，需要重新启动项目才会获取到新的数据】</strong></p><p><img src="/2020/08/02/SpringCloud/image-20200802102428335.png" alt="image-20200802102428335" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc</title>
      <link href="/2020/08/02/springmvc/"/>
      <url>/2020/08/02/springmvc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ol><li><p>新建普通Maven项目作为父类</p></li><li><p>在项目中创建模块，并添加web框架支持</p></li><li><p>配置web.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个SpringMVC的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--过滤器，处理Web乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建SpringMVC-Servlet.xml配置文件（一般使用注解版）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC不处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写控制类Controller</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello, SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"MyTest02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转发到/WEB-INF/jsp/目录下</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>配置Tomcat，<strong>并在WEB-INF目录下创建lib并导入相应的包（不然报404错误）</strong></p></li></ol><p><strong>如果使用注解@ResponseBody会不经过视图解析器处理</strong></p><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li><p>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</p></li><li><p>是将业务逻辑、数据、显示分离的方法来组织代码。</p></li><li><p>MVC主要作用是降低了视图与业务逻辑间的双向偶合。</p></li><li><p>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。</p></li></ul><p><strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层<br>（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p> <strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。<br> <strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li><p>在web早期的开发中，通常采用的都是Model1。</p></li><li><p>Model1中，主要分为两层，视图层和模型层。</p></li></ul><p><img src="/2020/08/02/springmvc/image-20200613180014634.png" alt="image-20200613180014634" loading="lazy"></p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括视图、控制、模型。</p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong><br><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li><p>业务逻辑</p></li><li><p>保存数据的状态</p></li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个普通Maven工程当父项目，导入pom依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>建立一个Model，添加Web app的支持！</p><p><img src="/2020/08/02/springmvc/image-20200613182259569.png" alt="image-20200613182259569" loading="lazy"></p></li><li><p>需要有导入servlet 和 jsp 的 jar 依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写Servlet类，处理用户请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//取得参数</span>        String method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"执行了add方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"执行了delete方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//业务逻辑</span>        <span class="token comment" spellcheck="true">//视图跳转</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/hello.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><p>(在WEB-INF目录下新建的文件属于安全的，不公开)</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>lxj</title>    </head>    <body>        ${ msg}     </body></html></code></pre></li><li><p>在web.xml中注册Servlet</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.xj.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Tomcat，并启动测试</p><ul><li><img src="/2020/08/02/springmvc/image-20200613182403983.png" alt="image-20200613182403983" loading="lazy"></li><li><code>http://localhost:8080</code>/hello?method=add</li><li><code>http://localhost:8080</code>/hello?method=delete</li></ul></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong><br>    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端<br>MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等<br>等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="/2020/08/02/springmvc/image-20200613183016033.png" alt="image-20200613183016033" loading="lazy"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。<br><strong>查看官方文档</strong>：<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p>我们为什么要学习SpringMVC呢?<br><strong>Spring MVC的特点</strong>：</p><ol><li><p>轻量级，简单易学</p></li><li><p>高效 , 基于请求响应的MVC框架</p></li><li><p>与Spring兼容性好，无缝结合</p></li><li><p>约定优于配置</p></li><li><p>功能强大：RESTful、数据验证、格式化、本地化、主题等</p></li><li><p>简洁灵活</p></li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的<br>用户可以采用基于注解形式进行开发，十分简洁；<br>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop, 使用约定优于<br>配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦<br>截器 等等……所以我们要学习 。<br><strong>最重要的一点还是用的人多 , 使用的公司多 。</strong></p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>Spring的web框架围绕<strong>DispatcherServlet</strong>设计。 DispatcherServlet的作用是将请求分发到不同的处理<br>器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用<strong>基于注解的controller</strong>声明方式。<br>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功</strong><br><strong>能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</strong></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="/2020/08/02/springmvc/image-20200613183445431.png" alt="image-20200613183445431" loading="lazy"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚<br>线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，<br>DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <code>http://localhost:8080</code>/SpringMVC/hello<br>如上url拆分成三部分：<br><code>http://localhost:8080</code>服务器域名<br>SpringMVC部署在服务器上的web站点<br>hello表示控制器<br>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>==HandlerMapping为处理器映射==。DispatcherServlet调用HandlerMapping,HandlerMapping根据<br>请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器<br>为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>==HandlerAdapter表示处理器适配器==，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>==视图解析器==将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><h3 id="3-1、配置版"><a href="#3-1、配置版" class="headerlink" title="3.1、配置版"></a>3.1、配置版</h3><ol><li><p>新建一个Moudle ， springmvc_02_hello ， 添加web的支持！</p></li><li><p>确定导入了SpringMVC 的依赖！(父项目中导入即可)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置web.xml ， 注册DispatcherServlet</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个SpringMVC的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml<br>说明，这里的名称要求是按照官方来的</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加 处理映射器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加处理映射器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>添加 处理器适配器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加处理适配器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>添加视图解析器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个<br>ModelAndView，装数据，封视图；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意：这里我们先导入Controller接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//ModelAndView 模型和视图</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装对象，放在ModelAndView中。Model</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"HelloSpringMVC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装要跳转的视图，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//: /WEB-INF/jsp/hello.jsp</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springmvc/image-20200613190316535.png" alt="image-20200613190316535" loading="lazy"></p></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Handler--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>Title</title>    </head>    <body>        ${ msg}     </body></html></code></pre></li><li><p>配置Tomcat 启动测试！</p><p><img src="/2020/08/02/springmvc/image-20200613191403510.png" alt="image-20200613191403510" loading="lazy"></p></li></ol><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><p><img src="/2020/08/02/springmvc/image-20200613191715216.png" alt="image-20200613191715216" loading="lazy"></p><p><img src="/2020/08/02/springmvc/image-20200613194922117.png" alt="image-20200613194922117" loading="lazy"></p><p><strong>小结</strong>：实际开发才不会这么写，不然就疯了.注解版实现，才是SpringMVC的精髓。</p><h3 id="3-2、注解版"><a href="#3-2、注解版" class="headerlink" title="3.2、注解版"></a>3.2、注解版</h3><ol><li><p>新建一个Moudle，springmvc_03_annotation。添加web支持！</p></li><li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们<br>在父依赖中已经引入了！</p></li><li><p>配置web.xml</p><p><strong>注意点：</strong></p><ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 /【不要使用/*不然会报错404】</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动顺序，数字越小，启动越早 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--所有请求都会被SpringMVC拦截(除了.jsp) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li></ol><p>*<em>/ 和 /</em> 的区别**：</p><ul><li><p>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；<br>即：.jsp 不会进入spring的 DispatcherServlet类 。 </p></li><li><p>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配*.jsp， 会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p></li></ul><ol start="5"><li><p>添加Spring MVC配置文件</p><ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC不处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--        支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以<strong>保证视图安全，因为这个</strong><br><strong>目录下的文件，客户端不能直接访问。</strong></p></li><li><p>创建Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/HelloController"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 向模型中添加属性msg与值，可以在jsp页面中取出并渲染</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello,SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转发到web-inf/jsp/hello.jsp</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该<br>是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></li><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；<br>可以通过EL表示取出Model中存放的值，或者对象；</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>Title</title>    </head>    <body>        ${ msg}     </body></html></code></pre></li><li><p>配置Tomcat运行<br>配置Tomcat ， 开启服务器 ， 访问对应的请求路径！</p><p><img src="/2020/08/02/springmvc/image-20200613211448132.png" alt="image-20200613211448132" loading="lazy"></p></li></ol><h3 id="3-3、小结"><a href="#3-3、小结" class="headerlink" title="3.3、小结"></a>3.3、小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.<br>使用springMVC必须配置的三大件：<br><strong>处理器映射器</strong>、<strong>处理器适配器</strong>、<strong>视图解析器</strong><br>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要<strong>开启注解驱动</strong>即可，而<br>省去了大段的xml配置</li></ol><h2 id="4、Controller-及-RestFul"><a href="#4、Controller-及-RestFul" class="headerlink" title="4、Controller 及 RestFul"></a>4、Controller 及 RestFul</h2><h3 id="4-1、控制器Controller"><a href="#4-1、控制器Controller" class="headerlink" title="4.1、控制器Controller"></a>4.1、控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><p>我们来看看有哪些方式可以实现：</p><ol><li><p>实现Controller接口</p><ul><li><p>需要实现接口方法，获得ModelAndView，并返回给解析器</p></li><li><p>并且需要在springmvc-servlet.xml中配置虚拟域名</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//ModelAndView 模型和视图</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装对象，放在ModelAndView中。Model</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"HelloSpringMVC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装要跳转的视图，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//: /WEB-INF/jsp/hello.jsp</span>        <span class="token comment" spellcheck="true">// 需要返回模型和视图给解析器</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>使用Controller注解</p><ul><li><p>可以自定义方法（可复用），需要<code>@Controller</code>和<code>@RequestMapping</code>注解</p></li><li><p>同时可以定义虚拟域名localhost8080：/hello</p></li><li><p><code>@Controller</code>定义该类为Controller</p></li><li><p><code>@RequestMapping</code>用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。<br>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 向模型中添加属性msg与值，可以在jsp页面中取出并渲染</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello,SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转发到web-inf/jsp/hello.jsp</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><h3 id="4-2、RestFul-风格"><a href="#4-2、RestFul-风格" class="headerlink" title="4.2、RestFul 风格"></a>4.2、RestFul 风格</h3><ul><li><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格<br>设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p></li><li><p><strong>功能资源</strong>：互联网所有的事物都可以被抽象为资源 资源操作：使用POST、DELETE、PUT、GET，使用<br>不同方法对资源进行操作。 分别对应 添加、 删除、修改、查询。</p></li><li><p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><pre class=" language-java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span>queryItem<span class="token punctuation">.</span>action<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> 查询<span class="token punctuation">,</span>GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span>saveItem<span class="token punctuation">.</span>action 新增<span class="token punctuation">,</span>POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span>updateItem<span class="token punctuation">.</span>action 更新<span class="token punctuation">,</span>POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span>deleteItem<span class="token punctuation">.</span>action<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> 删除<span class="token punctuation">,</span>GET或POST</code></pre></li><li><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！(对url进行复用)；<strong>使用不同的请求方法访问同一个url会有不同效果</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 带参数的</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span><span class="token number">1</span> 查询<span class="token punctuation">,</span>GET     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/item/{ p} "</span><span class="token punctuation">)</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item<span class="token operator">/</span><span class="token number">1</span> 删除<span class="token punctuation">,</span>DELETE    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/item/{ p} "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 不带参数的</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item 新增<span class="token punctuation">,</span>POST     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>item 更新<span class="token punctuation">,</span>PUT    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>作用</strong>：隐藏了url中提交的属性名，降低辨别度，更加安全！</p></li></ul><h4 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a><strong>普通使用</strong></h4><ol><li><p>在新建一个类 RestFulController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestFulController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/commit/{ p1} /{ p2} "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> p1<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> result <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"结果："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回视图位置</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><p>注意：需要对方法中的参数使用注解@PathVariable修饰</p><ol start="2"><li><p>测试</p><p><img src="/2020/08/02/springmvc/image-20200613231244135.png" alt="image-20200613231244135" loading="lazy"></p></li></ol><p><strong>思考：使用路径变量的好处？</strong></p><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，<strong>则路径与方法不匹配，而不会是参数转换失败</strong>。</li></ul><p><img src="/2020/08/02/springmvc/image-20200613231938701.png" alt="image-20200613231938701" loading="lazy"></p><h4 id="使用method属性指定请求类型"><a href="#使用method属性指定请求类型" class="headerlink" title="使用method属性指定请求类型"></a><strong>使用method属性指定请求类型</strong></h4><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT,<br>PATCH, DELETE, TRACE等<br>我们来测试一下：</p><ul><li><p>增加一个方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//映射访问路径,必须是POST请求</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index2</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会出现405错误</p><p><img src="/2020/08/02/springmvc/image-20200613232316342.png" alt="image-20200613232316342" loading="lazy"></p></li><li><p>如果将POST修改为GET则正常了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//映射访问路径,必须是GET请求</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index2</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ul><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a><strong>小结：</strong></h4><ul><li><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以<br>及 PATCH。</p></li><li><p>所有的地址栏请求默认都会是 HTTP GET 类型的。</p></li><li><p>方法级别的注解变体有如下几个： 组合注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span>            <span class="token comment" spellcheck="true">// 设置该地址为GET方法</span><span class="token annotation punctuation">@PostMapping</span>        <span class="token comment" spellcheck="true">// 设置该地址为Post方法</span><span class="token annotation punctuation">@PutMapping</span>            <span class="token comment" spellcheck="true">// 设置该地址为Put方法</span><span class="token annotation punctuation">@DeleteMapping</span>        <span class="token comment" spellcheck="true">// 设置该地址为Delete方法</span><span class="token annotation punctuation">@PatchMapping</span>        <span class="token comment" spellcheck="true">// 设置该地址为Patch方法</span></code></pre></li></ul><h2 id="5、结果跳转方式"><a href="#5、结果跳转方式" class="headerlink" title="5、结果跳转方式"></a>5、结果跳转方式</h2><h3 id="5-1、ModelAndView"><a href="#5-1、ModelAndView" class="headerlink" title="5.1、ModelAndView"></a>5.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .<br><strong>页面</strong> : {视图解析器前缀} + viewName +{视图解析器后缀}</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>对应的Controller类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest1</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//返回一个模型视图对象</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerTest1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置跳转的页面</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><strong>并需要注册Handler</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注册Handler--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/t2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller.MyTest02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="5-2、ServletAPI"><a href="#5-2、ServletAPI" class="headerlink" title="5.2、ServletAPI"></a>5.2、ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 </p><ol><li><p>通过<strong>HttpServletResponse</strong>进行输出</p></li><li><p>通过<strong>HttpServletResponse</strong>实现重定向</p></li><li><p>通过<strong>HttpServletRequest</strong>实现转发</p><p>需要获取HttpServletRequest req, HttpServletResponse rsp对象</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultGo</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/result/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse rsp<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 输出</span>        rsp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,Spring BY servlet API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/result/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse rsp<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 重定向</span>        rsp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/result/t3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse rsp<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//转发</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"/result/t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>rsp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="5-3、SpringMVC"><a href="#5-3、SpringMVC" class="headerlink" title="5.3、SpringMVC"></a>5.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><ul><li>但没有视图解析器的时候，需要写出完整的页面路径（自行拼接）</li><li>renturn默认功能为请求转发，但加上<code>redirect:</code>可以实现重定向</li><li>转发：url不会改变</li><li>重定向：url会改变</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultSpringMVC</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rsm/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//转发</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rsm/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//转发二</span>        <span class="token keyword">return</span> <span class="token string">"forward:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rsm/t3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//重定向</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><ul><li>有视图解析器的时候，转发必须简写，不能增加前缀和后缀</li><li>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以<strong>注意路径问题</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultSpringMVC2</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rsm2/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//转发</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rsm2/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//重定向</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return "redirect:hello.do"; //hello.do为另一个请求/</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h2 id="6、数据处理"><a href="#6、数据处理" class="headerlink" title="6、数据处理"></a>6、数据处理</h2><h3 id="6-1、处理提交数据"><a href="#6-1、处理提交数据" class="headerlink" title="6.1、处理提交数据"></a>6.1、处理提交数据</h3><ol><li><p><strong>提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <code>http://localhost:8080</code>/hello?name=xj<br>处理方法 :</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>后台输出 : xj</p></li></ol><ol start="2"><li><p><strong>提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <code>http://localhost:8080</code>/hello?username=xj<br>处理方法 :需要在参数前面使用注解<code>@RequestParam(&quot;XXX&quot;)</code>修饰，<strong>页面会提示参数名称</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@RequestParam("username") : username提交的域的名称 .</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/springmvc/image-20200614112623818.png" alt="image-20200614112623818" loading="lazy"></p></li><li><p><strong>提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><ol><li><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>提交数据 : <code>http://localhost:8080</code>/mvc04/user?name=xj&amp;id=1&amp;age=15</p></li><li><p>处理方法 :参数直接使用实体类对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>后台输出 : User { id=1, name=xj, age=15 }</p></li></ol><p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则String类型输出null，int类型就输出0</strong></p></li></ol><h3 id="6-2、数据显示到前端"><a href="#6-2、数据显示到前端" class="headerlink" title="6.2、数据显示到前端"></a>6.2、数据显示到前端</h3><ul><li><p><strong>第一种 : 通过ModelAndView</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest1</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//返回一个模型视图对象</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerTest1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p><strong>第二种 : 通过ModelMap</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> ModelMap model<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//封装要显示到视图中的数据</span>    <span class="token comment" spellcheck="true">//相当于req.setAttribute("name",name);</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p><strong>第三种 : 通过Model</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ct2/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//封装要显示到视图中的数据</span>    <span class="token comment" spellcheck="true">//相当于req.setAttribute("name",name);</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p><strong>对比</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Model</span> <span class="token attr-value">只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><span class="token attr-name">ModelMap</span> <span class="token attr-value">继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><span class="token attr-name">ModelAndView</span> <span class="token attr-value">可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span></code></pre></li></ul><h3 id="6-3、乱码问题"><a href="#6-3、乱码问题" class="headerlink" title="6.3、乱码问题"></a>6.3、乱码问题</h3><p>测试步骤：</p><ol><li><p>编写一个提交表单</p><pre class=" language-jsp"><code class="language-jsp"><form action="/e/t" method="post">    <input type="text" name="name">    <input type="submit"></form></code></pre></li><li><p>编写处理类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encoding</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/e/t"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取表单提交的值</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳转到test页面显示输入的值</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>输入中文测试，发现乱码</p><p><img src="/2020/08/02/springmvc/image-20200614115144426.png" alt="image-20200614115144426" loading="lazy"></p></li></ol><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法：</strong></h4><p><strong>(优先使用SpringMVC的方法)</strong></p><ol><li><p><strong>自己创建过滤器，并在Web.xml中进行配置</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>         servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放行</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--设置编码过滤器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xj.filter.EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注意这里是拦截所有，包括jsp--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>==如果自定义过滤器不能解决，使用SpringMVC自带的过滤器==**（</strong>一般直接使用该方法**）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>但是有些极端情况下,这个过滤器对get的支持不好 .</p></li><li><p><strong>当SpringMVC的过滤器使用不了时，使用该自定义过滤器</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 解决get和post请求 全部乱码的过滤器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericEncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse            response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//处理response的字符编码</span>        HttpServletResponse myResponse<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> response<span class="token punctuation">;</span>        myResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转型为与协议相关对象</span>        HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对request包装增强</span>        HttpServletRequest myrequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRequest</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>myrequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span>            ServletException <span class="token punctuation">{</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//自定义request对象，HttpServletRequest的包装类</span><span class="token keyword">class</span> <span class="token class-name">MyRequest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> HttpServletRequest request<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否编码的标记</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasEncode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>    <span class="token keyword">public</span> <span class="token function">MyRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// super必须写</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 对需要增强方法 进行覆盖</span>    <span class="token keyword">public</span> Map <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 先获得请求方式</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// post请求</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 处理post乱码</span>                request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// get请求</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span>                    request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasEncode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 确保get手动编码逻辑只运行一次</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String parameterName <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token keyword">try</span> <span class="token punctuation">{</span>                                 <span class="token comment" spellcheck="true">// 处理get乱码</span>                                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                        <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                         <span class="token punctuation">}</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>                 hasEncode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">return</span> parameterMap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//取一个值</span>    <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取回参数的第一个值</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//取所有值</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> values<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xj.filter.GenericEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>这是网上大神写的，<strong>一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！然后在web.xml中配置这个过滤器即可！</strong><br>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><ul><li><p>同时Tomcat也需要有正确的设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li></ul></li></ol><h2 id="7、JSON"><a href="#7、JSON" class="headerlink" title="7、JSON"></a>7、JSON</h2><h3 id="7-1、什么是JSON"><a href="#7-1、什么是JSON" class="headerlink" title="7.1、什么是JSON"></a>7.1、什么是JSON</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p><strong>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</strong></p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"QinJiang"</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span> </code></pre><p><strong>JSON 和 JavaScript 对象</strong></p><ul><li><p>Json本质是字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一个对象，注意键名也是可以使用引号包裹的</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{ "a": "Hello", "b": "World"} '</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一个 JSON 字符串，本质是一个字符串</span></code></pre></li><li><p>JSON 和 JavaScript 对象互转</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{ "a": "Hello", "b": "World"} '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果是 { a: 'Hello', b: 'World'} </span><span class="token comment" spellcheck="true">//要实现从JavaScript对象转换为JSON字符串，使用 JSON.stringify() 方法</span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果是 '{ "a": "Hello", "b": "World"} '</span></code></pre></li></ul><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a><strong>代码测试</strong></h4><ol><li><p>新建一个module ，SpringMVC_04_Json ， 添加web的支持</p></li><li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSON_晓江<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//编写一个js的对象</span>            <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>                 name<span class="token punctuation">:</span><span class="token string">"晓江"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>                sex<span class="token punctuation">:</span><span class="token string">"男"</span>            <span class="token punctuation">}</span> <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将js对象转换成json字符串</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将json字符串转换为js对象</span>            <span class="token keyword">var</span> user2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>age<span class="token punctuation">,</span>user2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>user2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="7-2、Controller返回JSON数据"><a href="#7-2、Controller返回JSON数据" class="headerlink" title="7.2、Controller返回JSON数据"></a>7.2、Controller返回JSON数据</h3><ol><li><p>Jackson应该是目前比较好的json解析工具了</p></li><li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p></li><li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置SpringMVC需要的配置<br>web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个SpringMVC的配置文件:【servlet-name】-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC-Servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--过滤器，处理Web乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>springmvc-servlet.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC不处理静态资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写一个实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>这里我们需要两个新东西，一个是@ResponseBody（不走视图解析器），一个是ObjectMapper对象，我们看下具体的用法编写一个Controller；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">json1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象转为JSON格式</span>        String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不会经过视图解析器，直接显示出来</span>        <span class="token comment" spellcheck="true">// 由于@ResponseBody注解，这里会将str转成json格式返回</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试（出现乱码）</p><p><img src="/2020/08/02/springmvc/image-20200614144143284.png" alt="image-20200614144143284" loading="lazy"></p><ul><li>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</li><li>通过@RequestMaping的produces属性来实现，修改下代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//produces:指定响应体返回类型和编码</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/json1"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span></code></pre><ul><li><p>测试结果正常</p><p><img src="/2020/08/02/springmvc/image-20200614144502259.png" alt="image-20200614144502259" loading="lazy"></p></li><li><p><strong>如果没有使用注解@ResponseBody会经过视图解析器处理</strong></p><p><img src="/2020/08/02/springmvc/image-20200614144613903.png" alt="image-20200614144613903" loading="lazy"></p></li></ul></li></ol><p><strong>【注意：使用json记得处理乱码问题】</strong></p><h3 id="7-3、代码优化"><a href="#7-3、代码优化" class="headerlink" title="7.3、代码优化"></a>7.3、代码优化</h3><h4 id="乱码统一解决"><a href="#乱码统一解决" class="headerlink" title="乱码统一解决"></a>乱码统一解决</h4><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样<br>就不用每次都去处理了！</p><ul><li><p><strong>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--统一处理JSON乱码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>返回json字符串统一解决</strong><br>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一<br>个都添加**@ResponseBody** ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController2</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">json2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建一个jackson的对象映射器来解析数据</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象解析为JSON格式</span>        String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>重新启动tomcat测试，结果都正常输出！</p></li></ul><h3 id="7-4、测试集合输出"><a href="#7-4、测试集合输出" class="headerlink" title="7.4、测试集合输出"></a>7.4、测试集合输出</h3><ul><li><p>添加一个新方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>    ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个对象</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试正常</p><p><img src="/2020/08/02/springmvc/image-20200614145904789.png" alt="image-20200614145904789" loading="lazy"></p></li></ul><h3 id="7-5、输出时间对象"><a href="#7-5、输出时间对象" class="headerlink" title="7.5、输出时间对象"></a>7.5、输出时间对象</h3><ul><li><p>增加一个新方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建时间一个对象，java.util.Date</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试</p><p><img src="/2020/08/02/springmvc/image-20200614150154130.png" alt="image-20200614150154130" loading="lazy"></p></li><li><p>默认日期格式会变成一个数字，<strong>是1970年1月1日到当前日期的秒数</strong>！Jackson 默认是会把时间转成timestamps形式</p></li><li><p><strong>解决方案</strong>：取消timestamps形式 ， 自定义时间格式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"json4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不使用时间戳的方式</span>    mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义日期格式对象</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定日期格式</span>    mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建时间一个对象</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>    String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>测试</p><p><img src="/2020/08/02/springmvc/image-20200614150639474.png" alt="image-20200614150639474" loading="lazy"></p></li></ul><h3 id="7-6、抽取为工具类"><a href="#7-6、抽取为工具类" class="headerlink" title="7.6、抽取为工具类"></a>7.6、抽取为工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializationFeature<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonUtils</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 重构方法，只有一个参数的格式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getJson</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJson</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span>String dateFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不使用时间差的方式</span>        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自定义日期格式对象</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定日期格式</span>        mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>使用工具类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>     Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String json <span class="token operator">=</span> JsonUtils<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> json<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>测试</p><p><img src="/2020/08/02/springmvc/image-20200614151100556.png" alt="image-20200614151100556" loading="lazy"></p><h3 id="7-7、FastJson"><a href="#7-7、FastJson" class="headerlink" title="7.7、FastJson"></a>7.7、FastJson</h3><p>​    fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转<br>换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法<br>很多，最后的实现结果都是一样的。</p><ul><li><p><strong>fastjson 的 pom依赖！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.70<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>fastjson 三个主要的类：</strong></p><ol><li>【JSONObject 代表 json 对象 】<ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用<br>诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map<br>接口并调用接口中的方法完成的。</li></ul></li><li>【JSONArray 代表 json 对象数组】<ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li>【JSON 代表 JSONObject和JSONArray的转化】<ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间<br>的相互转化。</li></ul></li></ol></li><li><p><strong>使用</strong></p><ol><li><p>我们新建一个FastJsonDemo 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个对象</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******Java对象 转 JSON字符串*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(list)==>"</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(user1)==>"</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON字符串 转 Java对象*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User jp_user1<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(str2,User.class)==>"</span><span class="token operator">+</span>jp_user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** Java对象 转 JSON对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject1 <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(JSONObject)SON.toJSON(user2)==>"</span><span class="token operator">+</span>jsonObject1<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON对象 转 Java对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User to_java_user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJavaObject(jsonObject1,User.class)==>"</span><span class="token operator">+</span>to_java_user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>控制台输出</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Java对象 转 JSON字符串<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江2号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江3号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江4号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token punctuation">]</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"晓江1号"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> JSON字符串 转 Java对象<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>晓江<span class="token number">1</span>号<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sex<span class="token operator">=</span>男<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> Java对象 转 JSON对象 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span>SON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span>晓江<span class="token number">2</span>号<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> JSON对象 转 Java对象 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>晓江<span class="token number">2</span>号<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sex<span class="token operator">=</span>男<span class="token punctuation">)</span></code></pre></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2020/08/02/spring/"/>
      <url>/2020/08/02/spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p><img src="/2020/08/02/spring/image-20200527135321085.png" alt="image-20200527135321085" loading="lazy"></p><ul><li><p>Spring : 春天 —&gt;给软件行业带来了春天</p></li><li><p>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</p></li><li><p>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</p></li><li><p>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</p></li></ul><p><strong>两个java框架</strong></p><ul><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMVC + Spring + Mybatis</li></ul><p>官网 : <a href="http://spring.io/">http://spring.io/</a></p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><p>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li><p>Spring是一个开源免费的框架 , 容器  </p></li><li><p>Spring是一个轻量级的框架 , 非侵入式的 .</p></li><li><p><strong>控制反转 IoC  , 面向切面 Aop</strong></p></li><li><p>对事物的支持 , 对框架的支持</p></li></ul><p>==一句话概括：<strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong>==</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="/2020/08/02/spring/image-20200527141010854.png" alt="image-20200527141010854" loading="lazy"></p><h3 id="1-4、扩展"><a href="#1-4、扩展" class="headerlink" title="1.4、扩展"></a>1.4、扩展</h3><p>在Spring的官网的介绍：现代化的Java开发！说白就是基于Spring的开发！</p><p><img src="/2020/08/02/spring/image-20200527141236423.png" alt="image-20200527141236423" loading="lazy"></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于Spring Boot可以快速的开发单个微服务</li><li>约定大于配置！（类似Mybatis）</li></ul></li><li>Spring Cloud<ul><li>基于Spring Boot实现的</li></ul></li></ul><p>现在大多数公司都在使用SpringBoot进行快速开发，学习前提是掌握Spring以及SpringMVC！</p><p><strong>弊端：发展太久之后，违背原来的理念！配置十分繁琐，“配置地狱！”</strong></p><hr><h3 id="1-5、Spring官方文档的查看："><a href="#1-5、Spring官方文档的查看：" class="headerlink" title="1.5、Spring官方文档的查看："></a>1.5、Spring官方文档的查看：</h3><ul><li><img src="/2020/08/02/spring/image-20200527161514828.png" alt="image-20200527161514828" loading="lazy"></li></ul><hr><ul><li><p><img src="/2020/08/02/spring/image-20200527161633018.png" alt="image-20200527161633018" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527161722731.png" alt="image-20200527161722731" loading="lazy"></p></li></ul><h3 id="1-6、Spring下载的官方页面"><a href="#1-6、Spring下载的官方页面" class="headerlink" title="1.6、Spring下载的官方页面"></a>1.6、Spring下载的官方页面</h3><ul><li><p><img src="/2020/08/02/spring/image-20200527161905091.png" alt="image-20200527161905091" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527162011730.png" alt="image-20200527162011730" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527162047021.png" alt="image-20200527162047021" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527162123562.png" alt="image-20200527162123562" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527162141239.png" alt="image-20200527162141239" loading="lazy"></p></li><li><p>这里就可以下载各个版本的Spring了，链接：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p></li></ul><h2 id="2、Ioc理论推导"><a href="#2、Ioc理论推导" class="headerlink" title="2、Ioc理论推导"></a>2、Ioc理论推导</h2><p>==控制反转，将实现类的控制权交到用户手里，使程序员更加专注于处理service==</p><h3 id="2-1、IoC基础"><a href="#2-1、IoC基础" class="headerlink" title="2.1、IoC基础"></a>2.1、IoC基础</h3><p>新建一个空白的maven项目</p><blockquote><p>分析实现</p></blockquote><p>我们先用我们原来的方式写一段代码 .</p><p>1、先写一个UserDao接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>2、再去写Dao的实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取用户数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>3、然后去写UserService的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>4、最后写Service的实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>5、测试一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    UserService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>这是我们原来的方式 , 开始大家也都是这么去写的对吧 . 那我们现在修改一下 .</p><blockquote><p>把Userdao的实现类增加一个 实现类UserDaoMySqlImpl</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoMySqlImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySql获取用户数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoMySqlImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><blockquote><p>在假设, 我们再增加一个Userdao的实现类 UserDaoOracleImpl</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoOracleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Oracle获取用户数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>==那么我们要使用Oracle , 又需要去service实现类里面修改对应的实现 . 假设我们的这种需求非常大 , 这种方式就根本不适用了, 甚至反人类对吧 , 每次变动 , 都需要修改大量代码 . 这种设计的耦合性太高了, 牵一发而动全身 .==</p><p><strong>那我们如何去解决呢 ?</strong> （面向接口编程）</p><p>我们可以在需要用到他的地方 , 不去实现它 , 而是留出一个接口 , 利用set , 我们去代码里修改下 .</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 利用set实现</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>现在去我们的测试类里 , 进行测试 ;</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    UserServiceImpl service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   service<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoMySqlImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//那我们现在又想用Oracle去实现呢</span>   service<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoOracleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>大家发现了区别没有 ? 可能很多人说没啥区别 . 但是同学们 , 他们已经发生了根本性的变化 , 很多地方都不一样了 . 仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p><p>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p><h4 id="两种区别如下："><a href="#两种区别如下：" class="headerlink" title="==两种区别如下：=="></a>==两种区别如下：==</h4><ul><li>控制权在程序手里</li></ul><p><img src="/2020/08/02/spring/image-20200527151129580.png" alt="image-20200527151129580" loading="lazy"></p><ul><li>控制权在用户手里</li></ul><p><img src="/2020/08/02/spring/image-20200527151143463.png" alt="image-20200527151143463" loading="lazy"></p><h3 id="2-2、IOC本质"><a href="#2-2、IOC本质" class="headerlink" title="2.2、IOC本质"></a>2.2、IOC本质</h3><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p><img src="/2020/08/02/spring/image-20200530155539586.png" alt="image-20200530155539586" loading="lazy"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h2 id="3、第一个Spring程序"><a href="#3、第一个Spring程序" class="headerlink" title="3、第一个Spring程序"></a>3、第一个Spring程序</h2><h3 id="3-1、Hello-Spring"><a href="#3-1、Hello-Spring" class="headerlink" title="3.1、Hello Spring"></a>3.1、Hello Spring</h3><p>注意：有时候需要修改文件夹类型，否则无法创建java类，以及配置文件无效</p><ul><li><img src="/2020/08/02/spring/image-20200527162502782.png" alt="image-20200527162502782" loading="lazy"></li><li><img src="/2020/08/02/spring/image-20200527162540164.png" alt="image-20200527162540164" loading="lazy"></li></ul><ol><li><p>导入maven依赖，放在主项目的pom.xml中，所有模块就不用再次导入了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- AOP织入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"Hello{ "</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'} '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写Spring配置文件bean.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        id = 类名        class = new 对象        property： 为对象赋值    --></span>    &lt;bean id = "Hello" class = "com.xj.pojo.Hello">        &lt;property name = "name" value="Spring"/>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p><img src="/2020/08/02/spring/image-20200527170108924.png" alt="image-20200527170108924" loading="lazy"></p></li><li><p><img src="/2020/08/02/spring/image-20200527170149895.png" alt="image-20200527170149895" loading="lazy"></p></li><li><p>关于配置文件中的内容，直接在官方文档中复制</p></li><li><p><a href="https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-instantiation">https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-instantiation</a></p><p><img src="/2020/08/02/spring/image-20200527161252806.png" alt="image-20200527161252806" loading="lazy"></p></li></ul></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">mytest</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//解析beans.xml文件 , 生成管理相应的Bean对象 CPX</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getBean : 参数即为spring配置文件中bean的id</span>        Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>结果</p><p>当配置成功之后，在实体类中会出现两个标志，点击可以跳转到配置文件中的相应位置</p><p>（如果没出现，请到配置文件中设置）</p><p><img src="/2020/08/02/spring/image-20200527165902710.png" alt="image-20200527165902710" loading="lazy"></p></li></ol><hr><h3 id="3-2、修改上面的Ioc代码"><a href="#3-2、修改上面的Ioc代码" class="headerlink" title="3.2、修改上面的Ioc代码"></a>3.2、修改上面的Ioc代码</h3><ol><li><p>编写配置文件bean.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MysqlImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.dao.UserDaoMysqlImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OracleImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.dao.UserDaoOracleImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 注意这里必须使用ref --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OracleImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytest_02</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取bean</span>        UserServiceImpl service <span class="token operator">=</span> <span class="token punctuation">(</span>UserServiceImpl<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>结果（现在只需要修改配置文件就可以实现不同类型）</p><p><img src="/2020/08/02/spring/image-20200527164943824.png" alt="image-20200527164943824" loading="lazy"></p></li></ol><hr><h3 id="3-3、property标签"><a href="#3-3、property标签" class="headerlink" title="3.3、property标签"></a>3.3、property标签</h3><ol><li><p>两种类型，但参数为常量的时候，使用value</p><pre class=" language-xml"><code class="language-xml">&lt;bean id = "Hello" class = "com.xj.pojo.Hello">    &lt;property name = "name" value="Spring"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>但参数为自定义类型时，使用ref</p><pre class=" language-xml"><code class="language-xml">&lt;bean id = "service" class = "com.xj.service.UserServiceImpl">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OracleImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><p>OK , 到了现在 , 我们彻底不用在程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! </p><hr><h2 id="4、IOC创建对象方式"><a href="#4、IOC创建对象方式" class="headerlink" title="4、IOC创建对象方式"></a>4、IOC创建对象方式</h2><ol><li><p>通过无参构造方法来创建</p><p><img src="/2020/08/02/spring/image-20200527180012820.png" alt="image-20200527180012820" loading="lazy"></p><ul><li>修改为有参构造的话，配置文件就需要相应修改，不然报错</li></ul></li><li><p><strong>如果想通过有参来创建</strong></p><ul><li><p>通过<strong>constructor-arg</strong>标签的使用<strong>构造函数参数名称</strong></p></li><li><p>创建实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有参构造方法</span>    <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ul><ol><li><p><strong>构造函数参数索引</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--构造函数参数索引--></span>&lt;bean id = "Hello" class = "com.xj.pojo.Hello">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>构造函数参数类型匹配</strong>（当有两种同类型不适用）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--构造函数参数类型匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>构造函数参数名称</strong>（推荐使用）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--构造函数参数类型匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><p>结论：在配置文件加载的时候。其中管理的对象都已经初始化了！</p></li></ol><h2 id="5、Spring的配置"><a href="#5、Spring的配置" class="headerlink" title="5、Spring的配置"></a>5、Spring的配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><blockquote><p>不实用</p></blockquote><p>alias 设置别名 , 为bean设置别名 , 可以设置多个别名，但原来的名字仍可以使用</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userT<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userNew<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="5-2、Bean的配置（也可以设置别名）"><a href="#5-2、Bean的配置（也可以设置别名）" class="headerlink" title="5.2、Bean的配置（也可以设置别名）"></a>5.2、Bean的配置（也可以设置别名）</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--bean就是java对象,由Spring创建和管理--></span><span class="token comment" spellcheck="true">&lt;!--   id: 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符   如果配置id,又配置了name,那么name是别名   name: 可以设置多个别名,可以用逗号,分号,空格隔开   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;    class是bean的全限定名=包名+类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello2 h2,h3;h4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>团队的合作通过import来实现 .</p><p>当项目由多个人来开发，每个人负责不同的Bean.xml，最后可以利用import将所有的bean.xml合并在一个总的配置文件中！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>使用的时候使用总的配置文件就好！</p><hr><h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><blockquote><p>即前面的构造方法注入。</p></blockquote><p>无参构造和有参构造</p><h3 id="6-2、Set方式注入【重点】"><a href="#6-2、Set方式注入【重点】" class="headerlink" title="6.2、Set方式注入【重点】"></a>6.2、Set方式注入【重点】</h3><ul><li>依赖注入：Set注入<ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul></li></ul><h4 id="【环境搭建】"><a href="#【环境搭建】" class="headerlink" title="【环境搭建】"></a>【环境搭建】</h4><ol><li><p>复杂类型</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String address<span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre></li></ol><ol start="2"><li><p>真实测试对象</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>     <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>     <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbys<span class="token punctuation">;</span>     <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>     <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span>     <span class="token keyword">private</span> String wife<span class="token punctuation">;</span>     <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBooks</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbys</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbys<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>hobbys <span class="token operator">=</span> hobbys<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> card<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGames</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>games <span class="token operator">=</span> games<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWife</span><span class="token punctuation">(</span>String wife<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>wife <span class="token operator">=</span> wife<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span>Properties info<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span> name                 <span class="token operator">+</span> <span class="token string">",address="</span><span class="token operator">+</span> address<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token operator">+</span> <span class="token string">",books="</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String book<span class="token operator">:</span>books<span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;"</span><span class="token operator">+</span>book<span class="token operator">+</span><span class="token string">">>\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n爱好:"</span><span class="token operator">+</span>hobbys<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"card:"</span><span class="token operator">+</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"games:"</span><span class="token operator">+</span>games<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wife:"</span><span class="token operator">+</span>wife<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info:"</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre></li></ol><h4 id="【完善代码】"><a href="#【完善代码】" class="headerlink" title="【完善代码】"></a>【完善代码】</h4><ul><li><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引用类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>潮州<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--数组类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--List类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>跑步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Map类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>201841312124<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>班级<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18光电1班<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Set类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>王者荣耀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>吃鸡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Null类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>null</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Properties类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/test?serverTimezone=GMT<span class="token entity" title="&amp;">&amp;amp;</span>createDatabaseIfNotExist=true<span class="token entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token entity" title="&amp;">&amp;amp;</span>autoReconnect=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h3><p>可以使用<strong>p命名空间</strong>和<strong>c命名空间</strong>进行注入</p><ul><li><strong>p命名注入属性值</strong></li><li><strong>c命名注入构造方法的值</strong></li></ul><p>官方解释：</p><p><img src="/2020/08/02/spring/image-20200528114638993.png" alt="image-20200528114638993" loading="lazy"></p><ol><li><p>使用</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--需要无参构造--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--需要有参构造--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"userbean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这样子就不用强制类型转换</span>    User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><ul><li>==注意：p命名和c命名空间不能直接使用，需要导入xml约束,==</li></ul><pre class=" language-xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><h3 id="6-4、bean作用域"><a href="#6-4、bean作用域" class="headerlink" title="6.4、bean作用域"></a>6.4、bean作用域</h3><p><img src="/2020/08/02/spring/image-20200528120646558.png" alt="image-20200528120646558" loading="lazy"></p><ol><li><p>单例模式（Spring默认机制）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>原型模式：每次都会从容器中get新的对象</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>其余的request、session、application只能再web开发中使用！</p></li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是使用spring满足bean依赖的一种方法</li><li>spring会在应用上下文中为某个bean寻找其依赖的bean。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ol><li>在xml中显式配置；</li><li>在java中显式配置；</li><li>隐式的bean发现机制和自动装配。【重点】</li></ol><p><strong>推荐不使用自动装配xml配置 , 而使用注解 .</strong></p><p><img src="/2020/08/02/spring/image-20200528121444576.png" alt="image-20200528121444576" loading="lazy"></p><h3 id="7-1、测试（未使用自动装配）"><a href="#7-1、测试（未使用自动装配）" class="headerlink" title="7.1、测试（未使用自动装配）"></a>7.1、测试（未使用自动装配）</h3><ol><li><p>新建项目 Spring_05_autowired</p></li><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"miao~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wang~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Dog <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDog</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dog <span class="token operator">=</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>输出正常</p></li></ol><h3 id="7-2、byName自动装配"><a href="#7-2、byName自动装配" class="headerlink" title="7.2、byName自动装配"></a>7.2、byName自动装配</h3><p><strong>autowire byName (按名称自动装配)</strong></p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。</p><p>采用自动装配将避免这些错误，并且使配置简单化。</p><p>测试：修改bean配置，增加一个属性  autowire=”byName”</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!---    byName:会在容器上下文中查找，和自己对象set方法后面的值对应的bean id    byType:会在容器上下文中查找，和自己属性类型相同的bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>==注意：User类中的属性名必须和定义的id对应，否则输出不了==</li></ul><h3 id="7-3、byType自动装配"><a href="#7-3、byType自动装配" class="headerlink" title="7.3、byType自动装配"></a>7.3、byType自动装配</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>==使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。==</li></ul><h3 id="7-4、使用自动装配注解"><a href="#7-4、使用自动装配注解" class="headerlink" title="7.4、使用自动装配注解"></a>7.4、使用自动装配注解</h3><ul><li><strong>注解是使用反射获取的，所以可以不用set方法</strong></li></ul><p><img src="/2020/08/02/spring/image-20200528132055338.png" alt="image-20200528132055338" loading="lazy"></p><ul><li>jdk1.5开始支持注解，spring2.5开始全面支持注解。</li><li>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.</li></ul><p>要使用注解须知：</p><ol><li><p>导入约束context约束</p></li><li><p>==配置注解的支持：<code>&lt;context:annotation-config&gt;</code>==</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><ol><li><p>再User类中使用@Autowired注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> </code></pre></li><li><p>此时配置文件内容</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>晓江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试，成功输出结果！</p></li></ol><p>【科普】</p><ul><li><p>@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果允许对象为null，设置required = false,默认为true</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span></code></pre></li></ul><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><ul><li><strong>@Autowired是根据类型自动装配的</strong>，加上**@Qualifier则可以根据byName的方式自动装配**</li><li><strong>@Qualifier不能单独使用</strong></li></ul><p><strong>测试实验步骤：</strong></p><p>1、配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>2、没有加Qualifier测试，直接报错</p><p>3、在属性上添加Qualifier注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dog1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><p><img src="/2020/08/02/spring/image-20200528140419412.png" alt="image-20200528140419412" loading="lazy"></p><p>测试，成功输出！</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li>@Resource如有<strong>指定的name属性</strong>，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p>实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果允许对象为null，设置required = false,默认为true</span>   <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cat2"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>   <span class="token keyword">private</span> String str<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>beans.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>测试：结果OK，删掉cat2依然可以</strong></p><p>结论：先进行byName查找，失败；再进行byType查找，成功。</p><h3 id="7-5、小结"><a href="#7-5、小结" class="headerlink" title="7.5、小结"></a>7.5、小结</h3><ol><li>@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</li><li>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</li></ol><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须保证aop的包导入了，一般使用spring-webmvc会自动导入</p><p><img src="/2020/08/02/spring/image-20200528142612746.png" alt="image-20200528142612746" loading="lazy"></p><p>在配置文件当中，还得要引入一个context约束</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="8-1、bean"><a href="#8-1、bean" class="headerlink" title="8.1、bean"></a>8.1、bean</h3><ul><li>配置扫描哪些包下的注解</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--指定注解扫描包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>在指定包下编写类，增加注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于配置文件中 &lt;bean id="user" class="com.xj.pojo.User"/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"晓江"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><ul><li>测试</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="8-2、属性注入"><a href="#8-2、属性注入" class="headerlink" title="8.2、属性注入"></a>8.2、属性注入</h3><p>使用注解注入属性</p><ul><li>可以不用提供set方法，直接在直接名上添加@value(“值”)</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于  &lt;bean id="user" class="com.xj.pojo.User"/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 相当于配置文件中 &lt;property name="name" value="晓江"/></span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span></code></pre><ul><li>如果提供了set方法，在set方法上添加@value(“值”);</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于  &lt;bean id="user" class="com.xj.pojo.User"/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 相当于配置文件中 &lt;property name="name" value="晓江"/></span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="8-3、衍生的注解"><a href="#8-3、衍生的注解" class="headerlink" title="8.3、衍生的注解"></a>8.3、衍生的注解</h3><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li><strong>@Controller：control层</strong></li><li><strong>@Service：service层</strong></li><li><strong>@Repository：dao层</strong></li></ul><p><strong>写上这些注解，就相当于将这个类交给Spring管理装配了！</strong></p><h3 id="8-4、自动装配"><a href="#8-4、自动装配" class="headerlink" title="8.4、自动装配"></a>8.4、自动装配</h3><ul><li>在7.4中有详细介绍</li></ul><h3 id="8-5、作用域"><a href="#8-5、作用域" class="headerlink" title="8.5、作用域"></a>8.5、作用域</h3><p>@scope</p><ul><li>singleton：单例模式。默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"晓江"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="8-6、小结"><a href="#8-6、小结" class="headerlink" title="8.6、小结"></a>8.6、小结</h3><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li><p>xml管理Bean</p></li><li><p>注解完成属性注入</p></li><li><p>使用过程中， 可以不用扫描，扫描是为了类上的注解</p></li><li><p>自动装配需要<code>&lt;context:annotation-config/&gt;</code></p></li><li><p>注解开发需要<code>&lt;context:component-scan base-package=&quot;com.xj.pojo&quot;/&gt;</code></p></li></ul><h2 id="9、使用java的方式配置Spring"><a href="#9、使用java的方式配置Spring" class="headerlink" title="9、使用java的方式配置Spring"></a>9、使用java的方式配置Spring</h2><ul><li><p>不使用xml配置文件</p></li><li><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p></li></ul><h3 id="9-1、实体类"><a href="#9-1、实体类" class="headerlink" title="9.1、实体类"></a>9.1、实体类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @Component将这个类注解为Spring的一个组件，放到容器中！</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"晓江"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="9-2、配置类"><a href="#9-2、配置类" class="headerlink" title="9.2、配置类"></a>9.2、配置类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个也会被Spring容器托管，注册到容器中，因为它本来就是一个@Component</span><span class="token comment" spellcheck="true">// @Configuration代表这是一个配置类，就和我们之前看的bean.xml一样</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.xj.pojo"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以导入其他文件</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyConfig2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig1</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 注册一个bean，就相当于我们之前写的一个bean标签</span>    <span class="token comment" spellcheck="true">// 这个方法的名字，就相当于bean标签中的id属性</span>    <span class="token comment" spellcheck="true">// 这个方法的返回值，就相当于bean标签中class属性</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 就是返回要注入到bean中的对象！</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h3 id="9-3、测试类"><a href="#9-3、测试类" class="headerlink" title="9.3、测试类"></a>9.3、测试类</h3><p>（使用AnnotationConfigApplicationContext获取配置类）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MyConfig1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>测试成功！</p><p>==当有多个配置类的话，可以使用@Import(MyConfig2.class)导入==</p><ol><li><p>效果图（不需要xml配置文件）</p><p><img src="/2020/08/02/spring/image-20200528155246750.png" alt="image-20200528155246750" loading="lazy"></p></li></ol><p>这种纯java 的配置方式，在SpringBoot中随处可见</p><h3 id="9-4、将主动权放到pojo中"><a href="#9-4、将主动权放到pojo中" class="headerlink" title="9.4、将主动权放到pojo中"></a>9.4、将主动权放到pojo中</h3><ul><li>将config类中的@Bean标签取消掉</li><li>在pojo中设置@Component(“user”)，并对属性赋值</li><li>效果跟==8==中的使用注解开发效果一样</li></ul><ol><li><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"晓江"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 只需要这几部分</span><span class="token comment" spellcheck="true">// @Configuration代表这是一个配置类</span><span class="token annotation punctuation">@Configuration</span>    <span class="token comment" spellcheck="true">// 指定注解扫描包</span><span class="token comment" spellcheck="true">// 类似于 &lt;context:component-scan base-package="com.xj.pojo"/></span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.xj.pojo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig1</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试与上方一致</p></li></ol><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p><img src="/2020/08/02/spring/image-20200528214649380.png" alt="image-20200528214649380" loading="lazy"></p><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p><strong>静态代理角色分析</strong></p><ul><li>抽象角色 : 一般使用接口或者抽象类来实现（出租这件事）</li><li>真实角色 : 被代理的角色（房东）</li><li>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .（中介）</li><li>客户  :  使用代理角色来进行一些操作 （ 客户）</li></ul><blockquote><p>通过代理可以在不修改 “房东” 的情况下增加一些操作，在代理代码中获取 “房东” 对象，在使用其方法的基础上增加操作</p></blockquote><ul><li><p><strong>代码实现</strong></p><ol><li><p>Rent.java 事务接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 租房</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>Host.java 房东</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>Proxy.java 代理中介</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 中介可以联系到房东</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHost</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">showHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 中介自己的功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"带客看房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收取中介费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>Client.java 客户</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 代理帮客户联系房东，并收取相应服务费</span>        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>结果</p><p><img src="/2020/08/02/spring/image-20200528225451878.png" alt="image-20200528225451878" loading="lazy"></p></li></ol></li></ul><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 </li><li>公共的业务由代理来完成 . 实现了业务的分工 </li><li>公共业务发生扩展时变得更加集中和方便 </li></ul><p><strong>缺点 :</strong></p><ul><li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</li></ul><blockquote><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</p></blockquote><ul><li>纵向开发，横向开发</li></ul><p><img src="/2020/08/02/spring/image-20200530160030207.png" alt="image-20200530160030207" loading="lazy"></p><hr><h3 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的</li><li>动态代理分为两大类：一类是基于接口动态代理 , 一类是基于类的动态代理<ul><li>基于接口的动态代理—-JDK动态代理</li><li>基于类的动态代理–cglib</li><li>java字节码实现–javasist </li></ul></li><li><strong>JDK的动态代理需要了解两个类</strong><ul><li>核心 : InvocationHandler   和   Proxy  </li></ul></li></ul><p>【InvocationHandler：调用处理程序 invoke】</p><p><img src="/2020/08/02/spring/image-20200530160050119.png" alt="image-20200530160050119" loading="lazy"></p><pre class=" language-java"><code class="language-java">Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> 方法 method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//参数</span><span class="token comment" spellcheck="true">//proxy - 调用该方法的代理实例</span><span class="token comment" spellcheck="true">//method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><span class="token comment" spellcheck="true">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span></code></pre><p>【Proxy  : 代理】</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生成代理类</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><ul><li><p>代码实现</p><ol><li><p>编写抽像接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象角色：租房</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>真实角色</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//真实角色: 房东，房东要出租房子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Rent rent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRent</span><span class="token punctuation">(</span>Rent rent<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>rent <span class="token operator">=</span> rent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// proxy : 代理类      method : 代理类的调用处理程序的方法对象.</span>    <span class="token comment" spellcheck="true">// 处理代理实例上的方法调用并返回结果</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//核心：本质利用反射实现！</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>使用（租客）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 租客</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 真实角色</span>        Host host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理实例的调用处理程序</span>        ProxyInvocationHandler pih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pih<span class="token punctuation">.</span><span class="token function">setRent</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将真实角色放进去</span>        Rent proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Rent<span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！</strong></p><hr></li></ol></li></ul><h4 id="动态代理深入理解"><a href="#动态代理深入理解" class="headerlink" title="动态代理深入理解"></a>动态代理深入理解</h4><ol><li><p>抽象角色</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象角色：增删改查业务</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>真实对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//真实对象，完成增删改查操作的人</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span>  <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 抽象角色</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 生成代理类</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// proxy : 代理类</span>    <span class="token comment" spellcheck="true">// method : 代理类的调用处理程序的方法对象.</span>    <span class="token comment" spellcheck="true">// 用来设置代理的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// method.getName()获取调用方法的方法名</span>        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 核心：本质利用反射实现！</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>使用（调用者）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 真实对象</span>        UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理对象的调用处理程序</span>        ProxyInvocationHandler pih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置要代理的对象</span>        pih<span class="token punctuation">.</span><span class="token function">setUserService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态生成代理类</span>        UserService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><h4 id="动态代理优化"><a href="#动态代理优化" class="headerlink" title="==动态代理优化=="></a>==动态代理优化==</h4><ul><li><p>修改代理角色，使其具有通用性（将抽象角色设置为Object）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 将抽象角色设置为Object</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 返回的代理类是接口类型的</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 核心</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在”租房”实例中使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 真实对象</span>    Host host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取代理对象的调用程序</span>    ProxyInvocationHandler pih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置代理对象</span>    pih<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取接口代理</span>    Rent proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Rent<span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>在调用方法中使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 真实对象</span>    UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取代理对象的调用程序</span>    ProxyInvocationHandler pih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置代理对象</span>    pih<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取接口代理</span>    UserService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ul><p>以上测试结果均正常输出，并添加上了日志信息，使用method.getName()获取每个方法的方法名。</p><hr><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ol><li>动态代理的角色：<ul><li>抽象角色</li><li>真实对象（实现抽象角色）</li><li>代理角色（实现InvocationHandler）</li><li>使用者（租客）</li></ul></li><li>动态代理没有代理类，只有用来生成代理类的代理角色</li><li>代理角色需要实现<code>InvocationHandler</code>接口<ul><li>并在其中定义<code>抽象角色</code></li><li>定义获取代理类的方法<code>getProxy</code></li><li>实现设置代理类方法的方法<code>invoke</code></li><li>方法<code>invoke</code>的核心是<code>Object result = method.invoke(target,args);</code></li></ul></li><li>在测试程序中需要定义<code>真实对象</code>，并获取到<code>接口代理</code></li><li>注意：代理类是使用==接口类型==</li></ol><hr><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<strong>耦合度降低</strong>，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/2020/08/02/spring/image-20200530160106524.png" alt="image-20200530160106524" loading="lazy"></p><h3 id="11-2、Aop在Spring中的作用"><a href="#11-2、Aop在Spring中的作用" class="headerlink" title="11.2、Aop在Spring中的作用"></a>11.2、Aop在Spring中的作用</h3><p>提供声明式事务；允许用户自定义切面</p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即 它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点</li></ul><p><img src="/2020/08/02/spring/image-20200530160121216.png" alt="image-20200530160121216" loading="lazy"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常抛出通知</li><li>引介通知</li></ul><p><img src="/2020/08/02/spring/image-20200530160132321.png" alt="image-20200530160132321" loading="lazy"></p><h3 id="11-3、使用Spring实现AOP"><a href="#11-3、使用Spring实现AOP" class="headerlink" title="11.3、使用Spring实现AOP"></a>11.3、使用Spring实现AOP</h3><p><strong>【重点】使用AOP织入，需要导入一个依赖包！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- AOP织入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>【主要SpringAPI接口实现】</p><p>​    <strong>通过 Spring API 实现</strong></p><ol><li><p>编写业务接口和实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写增强类（前置和后置）</p><ul><li>前置增强（实现MethodBeforeAdvice 接口 ）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//method : 要执行的目标对象的方法</span>    <span class="token comment" spellcheck="true">//objects : 被调用的方法的参数</span>    <span class="token comment" spellcheck="true">//Object : 目标对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><ul><li>后置增强（实现AfterReturningAdvice 接口）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//returnValue 返回值</span>    <span class="token comment" spellcheck="true">//method 被调用的方法</span>    <span class="token comment" spellcheck="true">//args 被调用的方法的对象的参数</span>    <span class="token comment" spellcheck="true">//target 被调用的目标对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>Object returnValue<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法"</span> <span class="token operator">+</span>                <span class="token string">"返回值："</span> <span class="token operator">+</span> returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop       http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册bean--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServuce<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.log.Log<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterlog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.log.AfterLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--aop的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--切入点 pointcut; expression:表达式匹配要执行的方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.xj.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--执行环绕；advice-ref执行方法，pointcut-ref切入点--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterlog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>结果</p><p><img src="/2020/08/02/spring/image-20200529151048628.png" alt="image-20200529151048628" loading="lazy"></p></li></ol><h5 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h5><ol><li><p>使用aop的核心在于增强和配置文件</p></li><li><p>配置文件使用：</p><ul><li><p>增加aop约束</p></li><li><p>注册bean： 真实对象 以及 增强类</p></li><li><p>aop的配置<a href="aop:congfig">aop:congfig</a>：切入点、增强方法的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--切入点 pointcut; expression:表达式匹配要执行的方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.xj.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--执行环绕；advice-ref执行方法，pointcut-ref切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterlog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h4 id="第二种方式（自定义切面）aop-aspect"><a href="#第二种方式（自定义切面）aop-aspect" class="headerlink" title="第二种方式（自定义切面）aop:aspect"></a>第二种方式（自定义切面）aop:aspect</h4><p>【主要是切面定义，简单点】</p><ol><li><p>定义一个自己的切入类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiyPointcut</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============方法执行前========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============方法执行后=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在Spring中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第二种方式自定义实现--></span><span class="token comment" spellcheck="true">&lt;!--注册bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.diy.DiyPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--aop的配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第二种方式：使用AOP的标签使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diyPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.xj.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diyPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diyPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试（跟方式一的一样）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>结果</p><p><img src="/2020/08/02/spring/image-20200529153338154.png" alt="image-20200529153338154" loading="lazy"></p></li></ol><h4 id="第三种方式（注解）-Aspect"><a href="#第三种方式（注解）-Aspect" class="headerlink" title="第三种方式（注解）@Aspect"></a>第三种方式（注解）@Aspect</h4><p>【使用注解】</p><ol><li><p>编写一个注解实现的增强类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>diy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Around<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationPointcut</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xj.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------方法执行前---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xj.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------方法执行后---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xj.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标方法proceed</span>        Object proceed <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proceed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p><img src="/2020/08/02/spring/image-20200529155346412.png" alt="image-20200529155346412" loading="lazy"></p></li><li><p>在Spring配置文件中，注册bean，并增加支持注解的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第三种方式:注解实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.diy.AnnotationPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre><p><a href="aop:aspectj-autoproxy">aop:aspectj-autoproxy</a>标签说明：</p><pre class=" language-xml"><code class="language-xml">通过aop命名空间的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span>声明自动为spring容器中那些配置@Aspect切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span>隐藏起来了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span>  <span class="token attr-name">poxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</code></pre></li><li><p>测试方法不变（Spring中要有注册userService的bean）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">updata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>结果</p><p><img src="/2020/08/02/spring/image-20200529155951329.png" alt="image-20200529155951329" loading="lazy"></p></li></ol><h2 id="12、整合MyBatis"><a href="#12、整合MyBatis" class="headerlink" title="12、整合MyBatis"></a>12、整合MyBatis</h2><h3 id="12-1、基本配置"><a href="#12-1、基本配置" class="headerlink" title="12.1、基本配置"></a>12.1、基本配置</h3><ol><li><p>导入相关jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mysql-connector-java--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--aspectJ AOP 织入器--></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mybatis-spring整合包 【重点】--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Lombok--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Maven静态资源过滤问题！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写配置文件</p></li><li><p>代码实现</p></li></ol><h3 id="12-2、回忆MyBatis的使用"><a href="#12-2、回忆MyBatis的使用" class="headerlink" title="12.2、回忆MyBatis的使用"></a>12.2、回忆MyBatis的使用</h3><ol><li><p>编写实体类pojo</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>实现mybatis配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone<span class="token punctuation">=</span>GMT&amp;amp;createDatabaseIfNotExist<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;autoReconnect<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写mapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><ol start="4"><li><p>编写mapper.xml映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="5"><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 省略了工具类</span>    String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启自动提交事务</span>    SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>成功读取出数据，配置成功，注意mysql的url会有不同，因为我使用的是<strong>mysql8.0版本</strong></p></li></ol><hr><h3 id="12-3、MyBatis-Spring概念"><a href="#12-3、MyBatis-Spring概念" class="headerlink" title="12.3、MyBatis-Spring概念"></a>12.3、MyBatis-Spring概念</h3><p><img src="/2020/08/02/spring/image-20200529174714149.png" alt="image-20200529174714149" loading="lazy"></p><ul><li><p>官网：<a href="http://mybatis.org/spring/zh/index.html">http://mybatis.org/spring/zh/index.html</a></p></li><li><p>什么是 MyBatis-Spring？</p><ul><li>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</li></ul></li><li><p><strong>知识基础</strong></p><ul><li>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</li><li>MyBatis-Spring 需要对应以下版本：</li></ul><p><img src="/2020/08/02/spring/image-20200529174902347.png" alt="image-20200529174902347" loading="lazy"></p></li><li><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。</p></li></ul><ul><li>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>  <strong>注意</strong>：SqlSessionFactory需要一个 DataSource（数据源）。这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><ul><li><strong>在 MyBatis-Spring 中，则使用 SqlSessionFactoryBean 来创建。</strong></li></ul><p>  在 MyBatis 中，你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。</p><p>  SqlSessionFactory有一个唯一的必要属性：用于 JDBC 的 DataSource。这可以是任意的 DataSource 对象，它的配置方法和其它 Spring 数据库连接是一样的。</p><p>  一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。</p><p>  需要注意的是，<strong>这个配置文件并不需要是一个完整的 MyBatis 配置</strong>。确切地说，任何环境配置（<environments>），数据源（<DataSource>）和 MyBatis 的事务管理器（<transactionManager>）都会被忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环境的值。</transactionManager></DataSource></environments></p><p>  <strong>SqlSessionTemplate（模板） 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。</strong></p><p>  <strong>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的</strong>，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>  <strong>可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>  现在，这个 bean 就可以直接注入到你的 DAO bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SqlSession sqlSession<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>  按下面这样，注入 SqlSessionTemplate：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.sample.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><hr><h3 id="12-4、整合实现一"><a href="#12-4、整合实现一" class="headerlink" title="12.4、整合实现一"></a>12.4、整合实现一</h3><ol><li><p>引入Spring配置文件Spring-beans.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置数据源替换mybaits的数据源（注意修改url的版本参数【这是mysql8.0的】，以及用户名、密码）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone<span class="token punctuation">=</span>GMT&amp;amp;createDatabaseIfNotExist<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;autoReconnect<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>Spring-bean.xml代替之后需要将mybatis-config.xml中重复的部分删掉，不然会报错（这是现在的mybatis-config.xml配置文件，只保留别名设置）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置SqlSessionFactory，关联MyBatis（在Spring-beans.xml中配置）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联Mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/xj/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>注册sqlSessionTemplate，关联sqlSessionFactory；</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--利用构造器注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>增加Mapper接口的实现类；私有化sqlSessionTemplate</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// sqlSession不用我们自己创建了，Spring创建</span>    <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>注册bean实现</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注册bean实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 这部分跟Spring中的获取一样</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Spring-bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> <span class="token punctuation">(</span>UserMapper<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这部分跟mybatis的部分一样</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>读取出数据库的信息，测试成功！</p></li><li><p>结果图</p><p><img src="/2020/08/02/spring/image-20200529183102165.png" alt="image-20200529183102165" loading="lazy"></p></li></ol><h4 id="小结：-2"><a href="#小结：-2" class="headerlink" title="小结："></a>小结：</h4><ol><li><p>在Spring中整合MyBatis关键在于Spring-bean.xml的配置</p><ul><li><p>以下部分为相对固定的内容（配置之后不需要修改）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone<span class="token punctuation">=</span>GMT&amp;amp;createDatabaseIfNotExist<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;autoReconnect<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联Mybatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/xj/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册sqlSessionTemplate,关联sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--利用构造器注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>然后再将新增的<code>UserMapperImpl</code>实现类进行注册（需要修改）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注册bean实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>新增Mapper接口的实现类 <code>UserMapperImpl</code></p></li><li><p>测试（使用方法和Spring中的相似）</p><p>只需要修改接口和实现类</p></li></ol><hr><h3 id="12-5、整合实现二"><a href="#12-5、整合实现二" class="headerlink" title="12.5、整合实现二"></a>12.5、整合实现二</h3><p>mybatis-spring1.2.3版以上的才有这个 </p><ul><li>mapper继承SqlSessionDaoSupport  , 直接利用 getSqlSession() 获得 , 然后直接注入<code>SqlSessionFactory </code>，比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</li><li>相比方式一，只是少了使用<code>SqlSessionTemplate</code>私有化sqlSession的步骤</li><li>同时在bean中注入的是<code>sqlSessionFactory</code></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>将我们上面写的UserMapperImpl修改一下变成UserMapperImpl2</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl2</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 一句话搞定</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>修改bean的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapperImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> <span class="token punctuation">(</span>UserMapper<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>测试成功！</p><hr></li></ol><h3 id="12-6、整合框架优化"><a href="#12-6、整合框架优化" class="headerlink" title="12.6、整合框架优化"></a>12.6、整合框架优化</h3><ul><li><p>将Spring 的配置文件分为两个 <code>applicationContext.xml</code>和 <code>Spring-bean.xml</code>方便管理</p><ul><li><p><code>Spring-bean.xml</code>用于配置连接信息，一般不需要再修改</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone<span class="token punctuation">=</span>GMT&amp;amp;createDatabaseIfNotExist<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;autoReconnect<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联Mybatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/xj/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册sqlSessionTemplate,关联sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--利用构造器注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>applicationContext.xml</code>用于注册bean的实现</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入另一个配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring-bean.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册bean实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mapper.UserMapperImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><p><strong>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</strong></p><h2 id="13、事务"><a href="#13、事务" class="headerlink" title="13、事务"></a>13、事务</h2><ul><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li><li>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。</li></ul><p>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</p><p><strong>事务的四个属性ACID</strong></p><ol><li><p>原子性（atomicity）</p><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul></li><li><p>一致性（consistency）</p><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul></li><li><p>隔离性（isolation）</p><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li></ul></li><li><p>持久性（durability）</p><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ol><h3 id="13-1、测试："><a href="#13-1、测试：" class="headerlink" title="13.1、测试："></a>13.1、测试：</h3><p>将上面的代码拷贝到一个新项目中</p><p>在之前的案例中，我们给UserMapper接口新增两个方法，删除和增加用户；</p><ol><li><p>增加方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加一个用户</span><span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据id删除用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id, name, pwd) values (#{ id} , #{ name} , #{ pwd} );<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 这里故意写错delete --></span>       deletes from mybatis.user where id = #{ id} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写接口的实现类，在实现类中，我们去操作一波</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">,</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>程序报错，但仍然会插入数据</p><p><img src="/2020/08/02/spring/image-20200530144048743.png" alt="image-20200530144048743" loading="lazy"></p></li></ol><p>说明默认是没有开启事务的，我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要<strong>事务！</strong></p><h3 id="13-2、使用Spring管理事务"><a href="#13-2、使用Spring管理事务" class="headerlink" title="13.2、使用Spring管理事务"></a>13.2、使用Spring管理事务</h3><ul><li>在Spring-bean.xml中配置</li></ul><ol><li><p><strong>注意头文件的约束导入 : tx</strong></p><p>(这部分可以在配置好事务的通知之后 按alt+Enter自动生成)</p><pre class=" language-xml"><code class="language-xml">xmlns:tx="http://www.springframework.org/schema/tx"http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd"></code></pre></li><li><p><strong>JDBC事务</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>配置好事务管理器后我们需要去配置事务的通知</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置事务通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--></span>        <span class="token comment" spellcheck="true">&lt;!--propagation="REQUIRED" 为默认的传播特性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--以上可直接省略为下面一句--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>配置AOP</strong></p><p>导入aop的头文件！</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置aop织入事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.xj.dao.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>进行测试</strong></p><p>删掉刚才插入的数据，再次测试！事务创建成功！</p><p>只要将UserMapper.xml中的deletes改成delete即可正常运行！</p><p><img src="/2020/08/02/spring/image-20200530145443356.png" alt="image-20200530145443356" loading="lazy"></p></li></ol><hr><h3 id="13-4、为什么需要配置事务？"><a href="#13-4、为什么需要配置事务？" class="headerlink" title="13.4、为什么需要配置事务？"></a>13.4、为什么需要配置事务？</h3><ul><li>如果不配置，就需要我们手动提交控制事务；</li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul><h2 id="14、异常："><a href="#14、异常：" class="headerlink" title="14、异常："></a>14、异常：</h2><ul><li><p>Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.</p><p><strong>解决方法：</strong>在服务中将Mysql启动</p><p><img src="/2020/08/02/spring/image-20200530132354579.png" alt="image-20200530132354579" loading="lazy"></p></li></ul><blockquote><p>Spring的内容就这么多了，需要掌握使用注解开发，因为到了SpringBoot之后就很少使用配置文件了</p></blockquote><p><img src="/2020/08/02/spring/image-20200530150742827.png" alt="image-20200530150742827" loading="lazy"></p><blockquote><p>本页学习资源来自b站：遇见狂神说 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2020/08/02/mybatis/"/>
      <url>/2020/08/02/mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img src="/2020/08/02/mybatis/image-20200528181938030.png" alt="image-20200528181938030" loading="lazy"></p><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持定制化 SQL、存储过程以及高级映射。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到Github。</li></ul><p>如何获得Mybatis？</p><ul><li><p>maven仓库：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>步骤：创建数据表–&gt;搭建环境–&gt;编写代码–&gt;测试程序</p><h3 id="2-1、创建数据表"><a href="#2-1、创建数据表" class="headerlink" title="2.1、创建数据表"></a>2.1、创建数据表</h3><p>在数据库中新建一个表格并插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>mybatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'晓江'</span><span class="token punctuation">,</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'23123'</span><span class="token punctuation">)</span></code></pre><h3 id="2-2、搭建环境"><a href="#2-2、搭建环境" class="headerlink" title="2.2、搭建环境"></a>2.2、搭建环境</h3><p>1、新建maven项目</p><p>2、导入maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--junit--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>3、编写mybatis的核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!--configuration核心配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- default默认选择下面id为 development的环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 连接Mybatis数据库 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>                    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone<span class="token punctuation">=</span>GMT&amp;amp;createDatabaseIfNotExist<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;autoReconnect<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置映射文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 路径必须用"/"分隔开 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xj/mybatis/mapper/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><p>1、编写实体类User</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"User{ "</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'} '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><p>2、关联映射</p><ul><li><p>编写映射接口UserMappe</p><p>Mybatis框架中的映射接口类似于Hibernate中的Dao层接口，唯一不同的是，Mybatis中只需要声明接口即可，不需要实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写对应的映射配置文件UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace=绑定一个对应的Dao/Mapper接口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--insert插入语句 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         insert into mybatis.user(id,name,pwd) values (#{ id} ,#{ name} ,#{ pwd} )    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里的id必须与接口中的方法名一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user where id = #{ id}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul><p>3、编写工具类</p><ul><li><p>编写mybatis工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 使用Mybatis第一步：获取sqlSessionFactory对象</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载配置文件</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span>    <span class="token comment" spellcheck="true">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ul><h3 id="2-4、编写测试代码"><a href="#2-4、编写测试代码" class="headerlink" title="2.4、编写测试代码"></a>2.4、编写测试代码</h3><p>可以使用Junit进行测试，但感觉在eclipse中使用Junit查错真的不方便</p><ul><li><p>编写demo测试代码</p></li><li><p>主要的两步是 获取和关闭，中间填写填写相应执行语句</p><p><code>SqlSession sqlSession = MybatisUtil.getSqlSession();</code></p><p>和<code>sqlSession.close();</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xj<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MybatisUtil<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 获取SqlSession</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一：getMapper</span>        UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 填写相应执行语句</span>        User rs <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭SqlSession</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ul><h3 id="2-5、Eclipse中的文件"><a href="#2-5、Eclipse中的文件" class="headerlink" title="2.5、Eclipse中的文件"></a>2.5、Eclipse中的文件</h3><ul><li>如果出现找不到mybatis-config.xml的错误时，将文件放到源文件夹中即可。</li></ul><p><img src="/2020/08/02/mybatis/image-20200528181958478.png" alt="image-20200528181958478" loading="lazy"></p><ul><li><p>在web项目中的文件</p></li><li><p>需要手动导入两个jar包</p><p><img src="/2020/08/02/mybatis/image-20200528182009694.png" alt="image-20200528182009694" loading="lazy"></p></li></ul><h3 id="2-6、易错点"><a href="#2-6、易错点" class="headerlink" title="2.6、易错点"></a>2.6、易错点</h3><ul><li><p>UserMapper.xml文件中的配置</p><p>在此代码中注意对应好 id（映射接口中的方法）以及 parameterType的拼写</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--insert插入语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     insert into mybatis.user(id,name,pwd) values (#{ id} ,#{ name} ,#{ pwd} )    <span class="token comment" spellcheck="true">&lt;!-- 注意sql结尾不能加分号，否则报"ORA-00911"的错误 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>以及标签的区分 <insert></insert></p></li><li><p>以及sql错误：<code> Table &#39;test.user&#39; doesn&#39;t exist</code></p><p>解决方法：在user前面增加mybatis.  完整的数据表位置</p><pre class=" language-xml"><code class="language-xml"> insert into mybatis.user(id,name,pwd) values (#{ id} ,#{ name} ,#{ pwd} )</code></pre></li></ul><h3 id="2-7、总结："><a href="#2-7、总结：" class="headerlink" title="2.7、总结："></a>2.7、总结：</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>创建数据表</li><li>导入maven依赖（或jar包）</li><li>编写mybatis的核心配置文件</li><li>编写实体类pojo</li><li>编写映射接口mapper和映射文件mapper.xml</li><li>编写工具类（获取SqlSession对象）</li><li>编写测试代码</li></ol><ul><li>完成之后程序只需要修改三部分</li></ul><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、select"><a href="#1、select" class="headerlink" title="1、select"></a>1、select</h3><p>选择，查询语句;</p><ul><li>id : 就是对应的namespace中的方法名；</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType ： 参数类型！</li></ul><p>1、编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据id查询用户</span><span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、编写映射文件中对应的mapper中的sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 这里的id必须与接口中的方法名一致 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{ id}     <span class="token comment" spellcheck="true">&lt;!-- 注意sql结尾不能加分号，否则报"ORA-00911"的错误 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>3、测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查询</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//方式一：getMapper</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User rs <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="2、insert"><a href="#2、insert" class="headerlink" title="2、insert"></a>2、insert</h3><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--insert插入语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     insert into mybatis.user(id,name,pwd) values (#{ id} ,#{ name} ,#{ pwd} )    <span class="token comment" spellcheck="true">&lt;!-- 注意sql结尾不能加分号，否则报"ORA-00911"的错误 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试（必须提交事务，不然插入语句不会存在）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 插入</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取mapper</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行插入语句</span>    <span class="token keyword">int</span> rs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 提交事务</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="3、update"><a href="#3、update" class="headerlink" title="3、update"></a>3、update</h3><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修改数据</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updataUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写映射文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updataUser"</span> parameterType<span class="token operator">=</span><span class="token string">"com.xj.mybatis.pojo.User"</span><span class="token operator">></span>    update mybatis<span class="token punctuation">.</span>user set name<span class="token operator">=</span>#<span class="token punctuation">{</span> name<span class="token punctuation">}</span> <span class="token punctuation">,</span>pwd<span class="token operator">=</span>#<span class="token punctuation">{</span> pwd<span class="token punctuation">}</span>   where id <span class="token operator">=</span> #<span class="token punctuation">{</span> id<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span></code></pre></li><li><p>测试（同样需要提交事务）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updataUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取mapper</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行修改语句</span>    <span class="token keyword">int</span> rs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">updataUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"李二"</span><span class="token punctuation">,</span> <span class="token string">"32141"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 提交事务</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="4、delect"><a href="#4、delect" class="headerlink" title="4、delect"></a>4、delect</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 删除数据 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user where id = #{ id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><h3 id="5、万能Map"><a href="#5、万能Map" class="headerlink" title="5、万能Map"></a>5、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//万能的Map</span><span class="token keyword">int</span> <span class="token function">addUser2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--对象中的属性，可以直接取出来    传递map的key--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id, pwd) values (#{ userid} ,#{ passWord} );<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">,</span><span class="token string">"2222333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">addUser2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p><p>多个参数用Map，<strong>或者注解！</strong></p><h3 id="6、模糊匹配"><a href="#6、模糊匹配" class="headerlink" title="6、模糊匹配"></a>6、模糊匹配</h3><p>Java代码执行的时候，传递通配符 % %</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatis<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token comment" spellcheck="true">#{ value} </span></code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%李%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、配置文件的设置"><a href="#4、配置文件的设置" class="headerlink" title="4、配置文件的设置"></a>4、配置文件的设置</h2><h3 id="属性顺序："><a href="#属性顺序：" class="headerlink" title="属性顺序："></a>属性顺序：</h3><ul><li><strong>properties</strong></li><li><strong>settings</strong></li><li><strong>typeAliases</strong></li><li><strong>typeHandlers</strong></li><li><strong>objectFactory</strong></li><li><strong>objectWrapperFactory</strong></li><li><strong>reflectorFactory</strong></li><li><strong>plugins</strong></li><li><strong>environments</strong></li><li><strong>databaseIdProvider</strong></li><li><strong>mappers</strong></li></ul><h3 id="1、属性的设置"><a href="#1、属性的设置" class="headerlink" title="1、属性的设置"></a>1、属性的设置</h3><ul><li><p>mybatis-config.xml中配置的数据库mysql的数值可以通过引用配置文件设置【db.properties】</p><blockquote><p>发现我这个版本的mysql必须指定下面这段url (MySQL 8.0)</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT&amp;createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span></code></pre></li><li><p>在配置文件中导入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入外部配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里面也可以增加配置信息，当相同时，外部文件优先级更高 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11111<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改environments环境中的属性值<code>${ driver} </code></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- default默认选择下面id为 development的环境 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 连接数据库 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ driver} <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ url} <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ username} <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${ password} <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>注意</strong>：在配置文件中增加属性需要按照指定顺序：</p><p>The content of element type “configuration” must match “(<strong>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</strong>)”.</p></li></ul><h3 id="2、类别名（typeAliases）"><a href="#2、类别名（typeAliases）" class="headerlink" title="2、类别名（typeAliases）"></a>2、类别名（typeAliases）</h3><ul><li><p>为类型名起一个简短的名字</p></li><li><p>存在的意义仅在于用来减少类完全限定名的冗余。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--可以给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre></li><li><p>在映射文件mapper.xml中</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 这里的id必须与接口中的方法名一致 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><p>  也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><p>  扫描实体类的包，它的默认别名就为这个类的 类名，<strong>建议首字母小写！</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--可以给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>  在实体类比较少的时候，使用第一种方式。</p><p>  <strong>如果实体类十分多，建议使用第二种</strong>。</p><p>  第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre><h3 id="3、映射器（mappers）"><a href="#3、映射器（mappers）" class="headerlink" title="3、映射器（mappers）"></a>3、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xj/mybatis/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>方式二：使用class文件绑定注册</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xj.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><h3 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h3><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白了就是可以想象为 ：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><h2 id="5、结果集映射-resultMap"><a href="#5、结果集映射-resultMap" class="headerlink" title="5、结果集映射 resultMap"></a>5、结果集映射 resultMap</h2><ul><li><p>当实体类的属性名与数据表不一致时</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>查询之后password的值为null（需要进行结果集映射）</p></li><li><p>在mapper.xml中进行配置的</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，property实体类中的属性 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据库属性名 - 类属性名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 注意使用的时resultMap --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="6、日志（setting）"><a href="#6、日志（setting）" class="headerlink" title="6、日志（setting）"></a>6、日志（setting）</h2><h3 id="1、日志工厂类型："><a href="#1、日志工厂类型：" class="headerlink" title="1、日志工厂类型："></a>1、日志工厂类型：</h3><ul><li>SLF4J </li><li>LOG4J  【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING   【掌握】</li><li>NO_LOGGING</li></ul><h3 id="2、STDOUT-LOGGING标准日志输出"><a href="#2、STDOUT-LOGGING标准日志输出" class="headerlink" title="2、STDOUT_LOGGING标准日志输出"></a>2、STDOUT_LOGGING标准日志输出</h3><ul><li>在mybatis核心配置文件中，配置我们的日志！</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/08/02/mybatis/image-20200528182029771.png" alt="image-20200528182029771" loading="lazy"></p><h3 id="3、Log4j的使用"><a href="#3、Log4j的使用" class="headerlink" title="3、Log4j的使用"></a>3、Log4j的使用</h3><ol><li><p>先导入log4j的包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>log4j.properties（可以控制输出类型和存放文件）</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token comment" spellcheck="true">#设置日志的输出文件</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/xj.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token comment" spellcheck="true">#可以修改时间格式</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{ yy-MM-dd} ][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre></li><li><p>配置log4j为日志的实现</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log4j<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>输出结果</p><p><img src="/2020/08/02/mybatis/image-20200528182040356.png" alt="image-20200528182040356" loading="lazy"></p></li></ol><h3 id="4、log4j的简单使用"><a href="#4、log4j的简单使用" class="headerlink" title="4、log4j的简单使用"></a>4、log4j的简单使用</h3><ol><li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserDaoTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>日志级别</p><pre class=" language-java"><code class="language-java">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>输出结果</p><p>在当前目录下产生./log/xj.log文件，里面存放控制台的所有输出信息</p><p><img src="/2020/08/02/mybatis/image-20200528182050076.png" alt="image-20200528182050076" loading="lazy"></p></li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><ul><li>使用新的项目编写（Mybatis_02）<ol><li>导包</li><li>配置文件</li><li>编写实体类</li><li>编写接口和映射文件</li></ol></li></ul><h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><pre class=" language-sql"><code class="language-sql">语法：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">limit</span> startIndex<span class="token punctuation">,</span>pageSize<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#[0,n]</span></code></pre><p>使用Mybatis实现分页，核心SQL</p><ol><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，property实体类中的属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 这里的id必须与接口中的方法名一致 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 分页查询语法：SELECT * from user limit startIndex,pageSize; --></span>    select * from mybatis.user limit #{ startIndex} ,#{ pageSize} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页查询</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 方式一：getMapper</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> rs <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User result <span class="token operator">:</span> rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><ol><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页2</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，property实体类中的属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--分页2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页查询2</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//RowBounds实现（从0开始，查询2个数据）</span>    RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过Java代码层面实现分页，不需要获取mapper了</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span>        <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.xj.mybatis.mapper.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User result <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><ul><li><p><strong>注意</strong>：使用RowBounds分页查询，不需要使用</p><pre class=" language-java"><code class="language-java">UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而是使用</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.xj.mybatis.mapper.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="8、注解开发"><a href="#8、注解开发" class="headerlink" title="8、注解开发"></a>8、注解开发</h2><p>-<strong>面向接口开发</strong>（不需要在配置映射文件mapper.xml）</p><p>- <strong>作用 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong></p><ul><li><strong>我们可以在工具类创建的时候实现自动提交事务！</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession  <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="8-1、select"><a href="#8-1、select" class="headerlink" title="8.1、select"></a>8.1、select</h3><ol><li><p>在接口中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注解开发</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from mybatis.user"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用注解查询</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>本质：反射机制实现</p><p>底层：动态代理！</p></li></ol><h3 id="8-2、CRUD"><a href="#8-2、CRUD" class="headerlink" title="8.2、CRUD"></a>8.2、CRUD</h3><ul><li>其他的接口注解</li><li>==方法存在多个参数，所有的参数前面必须加上 @Param(“id”)注解==</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法存在多个参数，所有的参数前面必须加上 @Param("id")注解</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from mybatis.user where id = #{ id} "</span><span class="token punctuation">)</span>User <span class="token function">getUserByID</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into mybatis.user(id,name,pwd) values (#{ id} ,#{ name} ,#              { password} )"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update mybatis.user set name=#{ name} ,pwd=#{ password}  where id = #{ id} "</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from mybatis.user where id = #{ uid} "</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>关于@Param() 注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li></ul><blockquote><p><strong>#{}     ${} 区别</strong>：#{}比使用 ${}更加安全，作用一样</p></blockquote><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><ul><li>使用注解来简化实体层的代码（set、get、构造方法等）</li></ul><p>使用步骤：</p><ol><li><p><strong>在项目中导入lombok的jar包</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>在编译器中安装Lombok插件！</strong></p><ul><li>运行Lombok包</li></ul><p><img src="/2020/08/02/mybatis/image-20200524170600801.png" alt="image-20200524170600801" loading="lazy"></p><p><img src="/2020/08/02/mybatis/image-20200524170751035.png" alt="image-20200524170751035" loading="lazy"></p><ul><li>点击确定之后选择 Specify Location，选择eclipse的安装路径</li></ul><p><img src="/2020/08/02/mybatis/image-20200524170913594.png" alt="image-20200524170913594" loading="lazy"></p><ul><li>点击安装之后会发现目录下多了lombx.jar，此时重启eclipse即可</li></ul><p><img src="/2020/08/02/mybatis/image-20200524171009774.png" alt="image-20200524171009774" loading="lazy"></p><ul><li><strong>注意：</strong>如果出现无法重启eclipse的情况，请修改eclipse.ini中的配置路径（这里路径中的中文名被分隔开了）</li></ul><p><img src="/2020/08/02/mybatis/image-20200524171152198.png" alt="image-20200524171152198" loading="lazy"></p></li></ol><ol start="3"><li><p>在实体类上加注解即可！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span> ：get、set、无参构造方法等<span class="token annotation punctuation">@AllArgsConstructor</span> ：有参构造方法<span class="token annotation punctuation">@NoArgsConstructor</span> ：无参构造方法</code></pre></li><li><p>总的注解有：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span> and <span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@FieldNameConstants</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@RequiredArgsConstructor</span> and <span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Log</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Log4j</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Log4j2</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@XSlf4j</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@CommonsLog</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@JBossLog</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Flogger</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Singular</span><span class="token annotation punctuation">@Delegate</span><span class="token annotation punctuation">@Value</span><span class="token annotation punctuation">@Accessors</span><span class="token annotation punctuation">@Wither</span><span class="token annotation punctuation">@SneakyThrows</span></code></pre></li></ol><p>说明：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>：无参构造，get、set、tostring、hashcode，equals<span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Getter</span></code></pre><h2 id="10、多对一"><a href="#10、多对一" class="headerlink" title="10、多对一"></a>10、多对一</h2><ul><li>SQL（多条语句手动依次进行）</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'卢晓江'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'小张'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'小李'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>新建Maven项目Mybatis_03（第一个记得打勾）</p><p><img src="/2020/08/02/mybatis/image-20200524185521741.png" alt="image-20200524185521741" loading="lazy"></p></li><li><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li><p>导入lombok.jar（已安装好lombox插件）</p></li><li><p>新建实体类 Teacher，Student</p></li><li><p>建立Mapper接口</p></li><li><p>建立Mapper.XML文件</p></li><li><p>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</p><p>以及类别名的设置</p></li><li><p>测试查询是否能够成功！</p></li></ol></li></ul><h3 id="10-1、步骤："><a href="#10-1、步骤：" class="headerlink" title="10.1、步骤："></a>10.1、步骤：</h3><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><ol><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Teacher teacher<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">",name="</span> <span class="token operator">+</span>                name <span class="token operator">+</span> <span class="token string">",teacher="</span> <span class="token operator">+</span>                 teacher<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按照结果嵌套处理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select     s.id sid,    s.name sname,    t.name tname    from    mybatis.student s,    mybatis.teacher t    where    s.tid = t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 结果集映射 --></span><span class="token comment" spellcheck="true">&lt;!-- type中的类Student是使用类别名的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 关联一个 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetStudentsTest</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> stus <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Student stu <span class="token operator">:</span> stus<span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><ul><li><p><img src="/2020/08/02/mybatis/image-20200524185457446.png" alt="image-20200524185457446" loading="lazy"></p></li><li><p>文件图：</p><p><img src="/2020/08/02/mybatis/image-20200524183325594.png" alt="image-20200524183325594" loading="lazy"></p></li></ul><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><ul><li>修改映射文件（不需要编写长的SQL语句，但需要增加查询Teacher的select标签语句）</li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 思路:     1. 查询所有的学生信息    2. 根据查询出来的学生的tid，寻找对应的老师！ 子查询 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudents2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span>            <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.teacher where id = #{ id}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><p>结果</p><p><img src="/2020/08/02/mybatis/image-20200524185422540.png" alt="image-20200524185422540" loading="lazy"></p></li></ul><h2 id="11、一对多"><a href="#11、一对多" class="headerlink" title="11、一对多"></a>11、一对多</h2><h3 id="按结果嵌套查询"><a href="#按结果嵌套查询" class="headerlink" title="按结果嵌套查询"></a>按结果嵌套查询</h3><ul><li><p>修改实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一个老师拥有多个学生</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>接口</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> <span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按结果嵌套查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select            s.id sid,        s.name sname,         t.name tname,        t.id tid    from         mybatis.student s,        mybatis.teacher t    where         s.tid = t.id         and t.id = #{ tid} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--复杂的属性，我们需要单独处理             对象： association             集合： collection        javaType="" 指定属性的类型！        集合中的泛型信息，我们使用ofType获取        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li><p><img src="/2020/08/02/mybatis/image-20200524191334549.png" alt="image-20200524191334549" loading="lazy"></p></li></ul><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #{ tid} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.student where tid = #{ tid} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>关联 - association   【多对一】</li><li>集合 - collection   【一对多】</li><li>javaType    &amp;   ofType<ol><li>JavaType  用来指定实体类中属性的类型</li><li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li></ul><h2 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h2><blockquote><p>从这里开始，使用IDEA进行开发</p></blockquote><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p><p>开启驼峰命名设置==即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。==</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><ol><li><p>接口中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用IF动态查询</span>List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogIF</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>映射文件中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #{ title}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #{ author}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogIF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"晓江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ol><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul><li>在追加的语句上面自动添加where</li><li>并自动对<strong>第一条语句进行删除and的操作（如果存在and）</strong></li><li>但<strong>不会自动生成and</strong>（即第二条语句需要加上and）</li></ul><pre class=" language-xml"><code class="language-xml">select * from mybatis.blog <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{ title}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{ author}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span></code></pre><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    1、&lt;choose> 配合&lt;when>、&lt;otherwise>使用    2、相当于switch语句，只会检索出符合的一个条件    3、但&lt;when>中都不符合，检索出&lt;otherwise>中的--></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #{ title}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author = #{ author}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                and views = #{ views}             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li>运行结果<br><img src="/2020/08/02/mybatis/image-20200525170530327.png" alt="image-20200525170530327" loading="lazy"></li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li><p>==用于执行动态修改语句==，</p><p>前面的语句必须加 “ , ”，而最后的语句加上逗号也没问题</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #{ title} ,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author = #{ author}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #{ id} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>==有的时候，我们可能会将一些功能的部分抽取出来，方便复用！==</p><ol><li><p>使用SQL标签抽取公共的部分</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{ title}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{ author}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre></li><li><p>在需要使用的地方使用==<Include>==标签引用即可</Include></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><ul><li><p>sql语句（查询出前三个）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatis<span class="token punctuation">.</span>blog <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">or</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre></li><li><p>==用法：传一个集合给他，他依次返回集合中的数值==</p><ol><li>item：返回值</li><li>collection：传入的集合</li><li>open：开始符号</li><li>separator：分隔符</li><li>close：结束符号</li></ol><pre class=" language-xml"><code class="language-xml">select * from user where 1=1 and <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    #{ id} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写映射文件</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)        collection：传入的集合        item：返回的数值        我们现在传递一个万能的map ， 这map中可以存在一个集合，传入一个ids的集合！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #{ id}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li>测试</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 因为map要传递一个 ids 的值，是集合类型</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="13、缓存-（了解即可）"><a href="#13、缓存-（了解即可）" class="headerlink" title="13、缓存 （了解即可）"></a>13、缓存 （了解即可）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><pre><code>查询  ：  连接数据库 ，耗资源！    一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</code></pre><ol><li><p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，<strong>从缓存中查询</strong>，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，<strong>提高系统效率。</strong></li></ul></li><li><p>什么样的数据能使用缓存？</p><ul><li><strong>经常查询并且不经常改变的数据</strong>。【可以使用缓存】</li></ul></li></ol><h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3 id="13-3、一级缓存（作用于SqlSession）"><a href="#13-3、一级缓存（作用于SqlSession）" class="headerlink" title="13.3、一级缓存（作用于SqlSession）"></a>13.3、一级缓存（作用于SqlSession）</h3><ul><li>一级缓存也叫本地缓存：  SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Sesion中查询两次相同记录</li><li>查看日志输出（查询相同数据使用缓存）</li></ol><p><img src="/2020/08/02/mybatis/1569983650437.png" alt="1569983650437" loading="lazy"></p><p><strong>缓存失效</strong>的情况：</p><ol><li><p>查询<strong>不同</strong>的东西</p></li><li><p><strong>增删改</strong>操作，可能会改变原来的数据，所以必定会刷新缓存！</p><p><img src="/2020/08/02/mybatis/1569983952321.png" alt="1569983952321" loading="lazy"></p></li><li><p>查询<strong>不同的Mapper.xml</strong></p></li><li><p>手动清理缓存！<code>sqlSession.clearCache</code></p><p><img src="/2020/08/02/mybatis/1569984008824.png" alt="1569984008824" loading="lazy"></p></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p><p>一级缓存就是一个Map。</p><h3 id="13-4、二级缓存（作用于Mapper）"><a href="#13-4、二级缓存（作用于Mapper）" class="headerlink" title="13.4、二级缓存（作用于Mapper）"></a>13.4、二级缓存（作用于Mapper）</h3><ul><li>二级缓存也叫<strong>全局缓存</strong>，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果<strong>当前会话关闭了</strong>，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被<strong>保存到二级缓存中</strong>；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在配置文件中显示的开启全局缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre><p>也可以自定义参数（60秒）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>测试</p><ol><li><p>问题:我们需要将实体类序列化！否则就会报错！</p><pre><code>Caused by: java.io.NotSerializableException: com.kuang.pojo.User</code></pre></li><li><p>在实体类中实现<strong>java.io.Serializable接口</strong></p></li></ol></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li></ul><h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><ol><li>先查看二级缓存中有没有</li><li>查看一级缓存有没有</li><li>如果都没有就直接查询数据库</li></ol><p><img src="/2020/08/02/mybatis/1569985541106.png" alt="1569985541106" loading="lazy"></p><h2 id="14、遇到的问题"><a href="#14、遇到的问题" class="headerlink" title="14、遇到的问题"></a>14、遇到的问题</h2><h3 id="1、MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效。"><a href="#1、MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效。" class="headerlink" title="1、MalformedByteSequenceException:3 字节的 UTF-8 序列的字节 3 无效。"></a>1、MalformedByteSequenceException:3 字节的 UTF-8 序列的字节 3 无效。</h3><ul><li><p>解决方法：在pom.xml中的相应部分增加如下代码</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="2、Caused-by-java-io-NotSerializableException-com-xj-pojo-User"><a href="#2、Caused-by-java-io-NotSerializableException-com-xj-pojo-User" class="headerlink" title="2、Caused by: java.io.NotSerializableException: com.xj.pojo.User"></a>2、Caused by: java.io.NotSerializableException: com.xj.pojo.User</h3><ul><li><p>解决方法：在实体类中实现java.io.Serializable接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li></ul><blockquote><p><strong>备注：本文学习资源来自b站：狂神说</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
